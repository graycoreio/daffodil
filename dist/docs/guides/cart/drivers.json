{
  "id": "guides/cart/drivers",
  "title": "Drivers",
  "contents": "\n<div class=\"content\">\n<h1 id=\"drivers\">Drivers</h1>\n<ul>\n<li><a href=\"#drivers\">Drivers</a><ul>\n<li><a href=\"#supported-drivers\">Supported Drivers</a><ul>\n<li><a href=\"#in-memory-web-api\">In-Memory Web API</a></li>\n<li><a href=\"#magento\">Magento</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\">Usage</a></li>\n</ul>\n</li>\n</ul>\n<p>Daffodil can interface with supported platforms through drivers. Choose the driver that correspondes to the platform of choice and follow the linked guide to set it up.</p>\n<h2 id=\"supported-drivers\">Supported Drivers</h2>\n<h3 id=\"in-memory-web-api\">In-Memory Web API</h3>\n<p>Optional, but <a href=\"./drivers/in-memory\">great for fast prototyping and development</a>.</p>\n<h3 id=\"magento\">Magento</h3>\n<p>Refer to <a href=\"./drivers/magento\">the Magento guide</a></p>\n<h2 id=\"usage\">Usage</h2>\n<p>The drivers can be injected into components and invoked directly. The following example shows how to list the items in the cart and add a simple item to the cart.</p>\n<pre><code class=\"language-typescript\">import {\n  DaffCartItemServiceInterface,\n  DaffCartItemDriver,\n  DaffCartItemInput,\n  DaffCartItemInputType,\n  DaffCartItem\n} from &#39;@daffodil/cart&#39;;\n\nexport class CartItemComponent implements OnInit {\n  items$: Observable&lt;DaffCartItem[]&gt;;\n\n  constructor(@Inject(DaffCartItemDriver) public cartItemDriver: DaffCartItemServiceInterface) {}\n\n  ngOnInit() {\n    // load the cart items\n    this.items$ = this.cartItemDriver.list(&#39;cartId&#39;);\n  }\n\n  addSimpleItem(productId: string, qty: number) {\n    const input: DaffCartItemInput = {\n      type: DaffCartItemInputType.Simple,\n      productId,\n      qty\n    };\n    this.items$ = this.cartItemDriver.add(&#39;cartId&#39;, input).pipe(\n      map(cart =&gt; cart.items)\n    );\n  }\n}</code></pre>\n\n</div>\n"
}