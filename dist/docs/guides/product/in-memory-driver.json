{
  "id": "guides/product/in-memory-driver",
  "title": "Using the InMemory Driver",
  "contents": "\n<div class=\"content\">\n<h1 id=\"using-the-inmemory-driver\">Using the InMemory Driver</h1>\n<p>The InMemory driver is for rapid development without the need to set up a magento/shopify/etc backend. It will mock out the service calls to get products and return fake data. There are a few steps to wiring up the DaffInMemory driver:</p>\n<p>First, you&#39;ll need to create a layer between your app and the <code>DaffProductInMemoryDriverModule</code> so that the <code>DaffInMemoryBackendProductService</code> only ever receives product-related requests. This middle layer can just be an <code>in-memory-web-api</code> service that uses the <code>DaffInMemoryBackendProductService</code> to handle database creation for products and product get requests:</p>\n<pre><code class=\"language-ts\">@Injectable({\n  providedIn: &#39;root&#39;\n})\nexport class MyAppInMemoryService implements InMemoryDbService {\n  constructor(\n    private productTestingService: DaffInMemoryBackendProductService,\n    private myAppTestingService: MyAppTestingService\n  ) {}\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  post(reqInfo: any) {\n    if (collectionName === &#39;myAppCollectionName&#39;) {\n      return myAppTestingService.post(reqInfo);\n    }\n\n    return undefined;\n  }\n\n  get(reqInfo: any) {\n    const collectionName = reqInfo.collectionName;\n    if (collectionName === &#39;products&#39;) {\n      return this.productTestingService.get(reqInfo);\n    } else if (collectionName === &#39;myAppCollectionName&#39;) {\n      return myAppTestingService.get(reqInfo);\n    }\n  }\n\n  createDb(): MockMyAppDatabase {\n    return {\n      ...this.productTestingService.createDb(),\n      ...myAppCreatesOtherPartsOfTheMockDatabase()\n    };\n  }\n}\n\nexport interface MockMyAppDatabase {\n  products: DaffProduct[];\n  myAppCollection: MyAppCollection[];\n}</code></pre>\n<p>With this, you&#39;ll have all get requests for products handled by <code>@daffodil/product</code> and all other requests handled by your <code>MyAppTestingService</code>.</p>\n<p>The only other thing you need to do is to make the product images in <code>@daffodil/product/assets</code> available to your application, because these are the images referenced in the mocked product data. You can do this by including assets from your node_modules directory to your application. For example, through angular-cli:</p>\n<pre><code class=\"language-json\">{\n  &quot;projects&quot;: {\n    &quot;myApp&quot;: {\n      **,\n      &quot;architect&quot;: {\n        &quot;build&quot;: {\n          **,\n          &quot;options&quot;: {\n            **,\n            &quot;assets&quot;: [\n              **,\n              {\n                &quot;glob&quot;: &quot;**/*&quot;,\n                &quot;input&quot;: &quot;node_modules/@daffodil/product/assets&quot;,\n                &quot;output&quot;: &quot;assets/&quot;\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}</code></pre>\n\n</div>\n"
}