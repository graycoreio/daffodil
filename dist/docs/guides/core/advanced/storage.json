{
  "id": "guides/core/advanced/storage",
  "title": "Storage",
  "contents": "\n<div class=\"content\">\n<h1 id=\"storage\">Storage</h1>\n<ul>\n<li><a href=\"#storage\">Storage</a><ul>\n<li><a href=\"#services\">Services</a><ul>\n<li><a href=\"#dafflocalstorageservice\"><code>DaffLocalStorageService</code></a></li>\n<li><a href=\"#daffmemorystorageservice\"><code>DaffMemoryStorageService</code></a></li>\n<li><a href=\"#dafferrorstorageservice\"><code>DaffErrorStorageService</code></a></li>\n<li><a href=\"#daffnoopstorageservice\"><code>DaffNoopStorageService</code></a></li>\n</ul>\n</li>\n<li><a href=\"#environment-specific-storage-services\">Environment-Specific Storage Services</a></li>\n</ul>\n</li>\n</ul>\n<p>Daffodil abstracts the storage layer behind the <code>DaffPersistenceService</code> interface. A number of different services implement this interface and suit different use cases.</p>\n<h2 id=\"services\">Services</h2>\n<!-- TODO: clarify use cases -->\n\n<h3 id=\"dafflocalstorageservice\"><code>DaffLocalStorageService</code></h3>\n<p>The <code>DaffLocalStorageService</code> uses <code>localStorage</code> to implement persistence. It is appropriate for browser environments.</p>\n<h3 id=\"daffmemorystorageservice\"><code>DaffMemoryStorageService</code></h3>\n<p>The <code>DaffMemoryStorageService</code> stores items in-memory. It is appropriate for testing environments or when true persistence is not desired.</p>\n<h3 id=\"dafferrorstorageservice\"><code>DaffErrorStorageService</code></h3>\n<p>The <code>DaffErrorStorageService</code> always throws an error when it is invoked. It is appropriate for server environments such as SSR where storage mechanisms are not available.</p>\n<h3 id=\"daffnoopstorageservice\"><code>DaffNoopStorageService</code></h3>\n<p>The <code>DaffNoopStorageService</code> never performs any actions and always returns <code>undefined</code>.</p>\n<h2 id=\"environment-specific-storage-services\">Environment-Specific Storage Services</h2>\n<p>The storage service used can be configured by providing for the <code>DaffPersistenceServiceToken</code> injection token. The following example demonstrates how to provide appropriate services based on the current environment.</p>\n<!-- TODO: find a better example -->\n<pre><code class=\"language-typescript\">import { PLATFORM_ID } from &#39;@angular/core&#39;;\nimport { isPlatformBrowser } from &#39;@angular/common&#39;;\nimport {\n  DaffPersistenceServiceToken,\n  DaffLocalStorageService,\n  DaffErrorStorageService\n} from &#39;@daffodil/core&#39;;\n\n@NgModule({\n  ...,\n  providers: [\n    {\n      provide: DaffPersistenceServiceToken,\n      deps: [PLATFORM_ID],\n      factory: (platformId: string) =&gt; isPlatformBrowser(platformId)\n        ? new DaffLocalStorageService(platformId)\n        : new DaffErrorStorageService()\n    }\n  ]\n})\nclass AppModule {}</code></pre>\n\n</div>\n"
}