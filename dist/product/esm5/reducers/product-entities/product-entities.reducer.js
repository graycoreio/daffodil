/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffProductGridActionTypes } from '../../actions/product-grid.actions';
import { DaffProductActionTypes } from '../../actions/product.actions';
import { DaffBestSellersActionTypes } from '../../actions/best-sellers.actions';
import { daffProductEntitiesAdapter } from './product-entities-reducer-adapter';
/**
 * Reducer function that catches actions and changes/overwrites product entities state.
 *
 * @template T
 * @param {?=} state current State of the redux store
 * @param {?=} action ProductGrid, BestSellers, or Product actions
 * @return {?} Product entities state
 */
export function daffProductEntitiesReducer(state, action) {
    if (state === void 0) { state = daffProductEntitiesAdapter().getInitialState(); }
    /** @type {?} */
    var adapter = daffProductEntitiesAdapter();
    switch (action.type) {
        case DaffProductGridActionTypes.ProductGridLoadSuccessAction:
            return adapter.upsertMany(action.payload, state);
        case DaffBestSellersActionTypes.BestSellersLoadSuccessAction:
            return adapter.upsertMany(action.payload, state);
        case DaffProductActionTypes.ProductLoadSuccessAction:
            return adapter.upsertOne(tslib_1.__assign({ id: action.payload.id }, action.payload), state);
        case DaffProductGridActionTypes.ProductGridResetAction:
            return adapter.removeAll(state);
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1lbnRpdGllcy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhZmZvZGlsL3Byb2R1Y3QvIiwic291cmNlcyI6WyJyZWR1Y2Vycy9wcm9kdWN0LWVudGl0aWVzL3Byb2R1Y3QtZW50aXRpZXMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSwwQkFBMEIsRUFBMEIsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RyxPQUFPLEVBQUUsc0JBQXNCLEVBQXNCLE1BQU0sK0JBQStCLENBQUM7QUFDM0YsT0FBTyxFQUFFLDBCQUEwQixFQUEwQixNQUFNLG9DQUFvQyxDQUFDO0FBQ3hHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7Ozs7QUFVaEYsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxLQUF5RCxFQUN6RCxNQUFxRjtJQURyRixzQkFBQSxFQUFBLFFBQVEsMEJBQTBCLEVBQUssQ0FBQyxlQUFlLEVBQUU7O1FBRXBELE9BQU8sR0FBRywwQkFBMEIsRUFBSztJQUM5QyxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSywwQkFBMEIsQ0FBQyw0QkFBNEI7WUFDMUQsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsS0FBSywwQkFBMEIsQ0FBQyw0QkFBNEI7WUFDMUQsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsS0FBSyxzQkFBc0IsQ0FBQyx3QkFBd0I7WUFDbEQsT0FBTyxPQUFPLENBQUMsU0FBUyxvQkFFcEIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUNsQixNQUFNLENBQUMsT0FBTyxHQUVuQixLQUFLLENBQ04sQ0FBQztRQUNKLEtBQUssMEJBQTBCLENBQUMsc0JBQXNCO1lBQ3BELE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQztZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eVN0YXRlIH0gZnJvbSAnQG5ncngvZW50aXR5JztcblxuaW1wb3J0IHsgRGFmZlByb2R1Y3RHcmlkQWN0aW9uVHlwZXMsIERhZmZQcm9kdWN0R3JpZEFjdGlvbnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Byb2R1Y3QtZ3JpZC5hY3Rpb25zJztcbmltcG9ydCB7IERhZmZQcm9kdWN0QWN0aW9uVHlwZXMsIERhZmZQcm9kdWN0QWN0aW9ucyB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcHJvZHVjdC5hY3Rpb25zJztcbmltcG9ydCB7IERhZmZCZXN0U2VsbGVyc0FjdGlvblR5cGVzLCBEYWZmQmVzdFNlbGxlcnNBY3Rpb25zIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9iZXN0LXNlbGxlcnMuYWN0aW9ucyc7XG5pbXBvcnQgeyBkYWZmUHJvZHVjdEVudGl0aWVzQWRhcHRlciB9IGZyb20gJy4vcHJvZHVjdC1lbnRpdGllcy1yZWR1Y2VyLWFkYXB0ZXInO1xuaW1wb3J0IHsgRGFmZlByb2R1Y3QgfSBmcm9tICcuLi8uLi9tb2RlbHMvcHJvZHVjdCc7XG5cbi8qKlxuICogUmVkdWNlciBmdW5jdGlvbiB0aGF0IGNhdGNoZXMgYWN0aW9ucyBhbmQgY2hhbmdlcy9vdmVyd3JpdGVzIHByb2R1Y3QgZW50aXRpZXMgc3RhdGUuXG4gKiBcbiAqIEBwYXJhbSBzdGF0ZSBjdXJyZW50IFN0YXRlIG9mIHRoZSByZWR1eCBzdG9yZVxuICogQHBhcmFtIGFjdGlvbiBQcm9kdWN0R3JpZCwgQmVzdFNlbGxlcnMsIG9yIFByb2R1Y3QgYWN0aW9uc1xuICogQHJldHVybnMgUHJvZHVjdCBlbnRpdGllcyBzdGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFmZlByb2R1Y3RFbnRpdGllc1JlZHVjZXI8VCBleHRlbmRzIERhZmZQcm9kdWN0PihcbiAgc3RhdGUgPSBkYWZmUHJvZHVjdEVudGl0aWVzQWRhcHRlcjxUPigpLmdldEluaXRpYWxTdGF0ZSgpLCBcbiAgYWN0aW9uOiBEYWZmUHJvZHVjdEdyaWRBY3Rpb25zPFQ+IHwgRGFmZkJlc3RTZWxsZXJzQWN0aW9uczxUPiB8IERhZmZQcm9kdWN0QWN0aW9uczxUPik6IEVudGl0eVN0YXRlPFQ+IHtcblx0Y29uc3QgYWRhcHRlciA9IGRhZmZQcm9kdWN0RW50aXRpZXNBZGFwdGVyPFQ+KCk7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERhZmZQcm9kdWN0R3JpZEFjdGlvblR5cGVzLlByb2R1Y3RHcmlkTG9hZFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4gYWRhcHRlci51cHNlcnRNYW55KGFjdGlvbi5wYXlsb2FkLCBzdGF0ZSk7XG4gICAgY2FzZSBEYWZmQmVzdFNlbGxlcnNBY3Rpb25UeXBlcy5CZXN0U2VsbGVyc0xvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIGFkYXB0ZXIudXBzZXJ0TWFueShhY3Rpb24ucGF5bG9hZCwgc3RhdGUpO1xuICAgIGNhc2UgRGFmZlByb2R1Y3RBY3Rpb25UeXBlcy5Qcm9kdWN0TG9hZFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4gYWRhcHRlci51cHNlcnRPbmUoXG4gICAgICAgIHsgXG4gICAgICAgICAgaWQ6IGFjdGlvbi5wYXlsb2FkLmlkLCBcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICBzdGF0ZVxuICAgICAgKTtcbiAgICBjYXNlIERhZmZQcm9kdWN0R3JpZEFjdGlvblR5cGVzLlByb2R1Y3RHcmlkUmVzZXRBY3Rpb246XG4gICAgICByZXR1cm4gYWRhcHRlci5yZW1vdmVBbGwoc3RhdGUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==