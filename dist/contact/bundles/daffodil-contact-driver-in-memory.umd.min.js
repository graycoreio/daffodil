!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@angular/common"),require("@daffodil/contact/driver"),require("@angular/common/http"),require("rxjs")):"function"==typeof define&&define.amd?define("@daffodil/contact/driver/in-memory",["exports","@angular/core","@angular/common","@daffodil/contact/driver","@angular/common/http","rxjs"],o):o(((t=t||self).daffodil=t.daffodil||{},t.daffodil.contact=t.daffodil.contact||{},t.daffodil.contact.driver=t.daffodil.contact.driver||{},t.daffodil.contact.driver["in-memory"]={}),t.ng.core,t.ng.common,t.daffodil.contact.driver,t.ng.common.http,t.rxjs)}(this,function(t,o,e,r,n,i){"use strict";var a=function(){function t(t){this.http=t,this.url="/api/contact"}return t.prototype.send=function(t){return this.http.post(this.url,t)},t.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:n.HttpClient}]},t.ngInjectableDef=o.ɵɵdefineInjectable({factory:function(){return new t(o.ɵɵinject(n.HttpClient))},token:t,providedIn:"root"}),t}();var c=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[{provide:r.DaffContactDriver,useClass:a}]}},t.decorators=[{type:o.NgModule,args:[{imports:[e.CommonModule]}]}],t}(),f=function(){function t(){this.forums=[]}return t.prototype.parseRequestUrl=function(t,o){return o.parseRequestUrl(t)},t.prototype.createDb=function(){return{forums:this.forums}},t.prototype.post=function(t){return void 0===t?Error("Payload is undefined"):-1!==this.forums.indexOf(t.body)?Error("Already contains submission"):(this.forums.push(t.body),i.of(t))},t.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],t.ngInjectableDef=o.ɵɵdefineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}();t.DaffContactInMemoryDriverModule=c,t.DaffInMemoryBackendContactService=f,t.ɵa=a,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=daffodil-contact-driver-in-memory.umd.min.js.map