{"version":3,"sources":["ng://@daffodil/contact/state/actions/contact.actions.ts","ng://@daffodil/contact/state/effects/contact.effects.ts","ng://@daffodil/contact/state/selectors/contact.selector.ts","ng://@daffodil/contact/state/reducers/contact.reducer.ts","ng://@daffodil/contact/state/contact.module.ts","ng://@daffodil/contact/state/facades/contact.facade.ts"],"names":["ContactSubmitAction","ContactCancelAction","ContactSuccessSubmitAction","ContactFailedSubmitAction","ContactRetryAction","ContactResetAction","payload","this","type","DaffContactActionTypes","DaffContactFailedSubmit","DaffContactCancel","DaffContactSuccessSubmit","DaffContactReset","DaffContactEffects","actions$","driver","_this","trySubmission$","createEffect","pipe","ofType","switchMap","action","EMPTY","submitContact","prototype","contact","send","map","resp","catchError","error","of","Injectable","Actions","Inject","args","DaffContactDriver","selectContactFeatureState","createFeatureSelector","selectDaffContactLoading","createSelector","state","loading","selectDaffContactSuccess","success","selectDaffContactError","errors","initialState","reducer","__assign","DaffContactStateModule","NgModule","declarations","imports","StoreModule","forFeature","EffectsModule","providers","DaffContactFacade","store","success$","select","error$","loading$","dispatch","providedIn","Store"],"mappings":"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","sourcesContent":["import { Action } from '@ngrx/store';\n\nexport enum DaffContactActionTypes {\n\tContactSubmitAction = '[Daff-Contact] Contact Submit Action',\n\tContactCancelAction = '[Daff-Contact] Contact Cancel Action',\n\tContactSuccessSubmitAction = '[Daff-Contact] Contact Success Submit Action',\n\tContactFailedSubmitAction = '[Daff-Contact] Contact Failed Submit Action',\n\tContactRetryAction = '[Daff-Contact] Contact Retry Action',\n\tContactResetAction = '[Daff-Contact] Contact Reset Action',\n}\n\nexport class DaffContactSubmit<T> implements Action {\n\treadonly type = DaffContactActionTypes.ContactSubmitAction;\n\n\tconstructor(public payload: T) {}\n}\n\nexport class DaffContactRetry<T> implements Action {\n\treadonly type = DaffContactActionTypes.ContactRetryAction;\n\n\tconstructor(public payload: T) {}\n}\nexport class DaffContactFailedSubmit implements Action {\n\treadonly type = DaffContactActionTypes.ContactFailedSubmitAction;\n\n\tconstructor(public payload: string[]) {}\n}\nexport class DaffContactCancel implements Action {\n\treadonly type = DaffContactActionTypes.ContactCancelAction;\n}\nexport class DaffContactSuccessSubmit implements Action {\n\treadonly type = DaffContactActionTypes.ContactSuccessSubmitAction;\n}\nexport class DaffContactReset implements Action {\n\treadonly type = DaffContactActionTypes.ContactResetAction;\n}\n\nexport type DaffContactActions<T> =\n\t| DaffContactSubmit<T>\n\t| DaffContactRetry<T>\n\t| DaffContactFailedSubmit\n\t| DaffContactCancel\n\t| DaffContactSuccessSubmit\n\t| DaffContactReset;\n","import { Injectable, Inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of, EMPTY } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\n\nimport {\n\tDaffContactServiceInterface,\n\tDaffContactDriver,\n} from '@daffodil/contact/driver';\n\nimport {\n\tDaffContactActionTypes,\n\tDaffContactSubmit,\n\tDaffContactCancel,\n\tDaffContactSuccessSubmit,\n\tDaffContactFailedSubmit,\n\tDaffContactRetry,\n} from '../actions/contact.actions';\n\n@Injectable()\nexport class DaffContactEffects<T, V> {\n\tconstructor(\n\t\tprivate actions$: Actions,\n\t\t@Inject(DaffContactDriver)\n\t\tprivate driver: DaffContactServiceInterface<T, V>,\n\t) {}\n\n\ttrySubmission$: Observable<Action> = createEffect(() =>\n\t\tthis.actions$.pipe(\n\t\t\tofType(\n\t\t\t\tDaffContactActionTypes.ContactSubmitAction,\n\t\t\t\tDaffContactActionTypes.ContactRetryAction,\n\t\t\t\tDaffContactActionTypes.ContactCancelAction,\n\t\t\t),\n\t\t\tswitchMap(\n\t\t\t\t(\n\t\t\t\t\taction:\n\t\t\t\t\t\t| DaffContactSubmit<T>\n\t\t\t\t\t\t| DaffContactRetry<T>\n\t\t\t\t\t\t| DaffContactCancel,\n\t\t\t\t) => {\n\t\t\t\t\tif (action instanceof DaffContactCancel) {\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.submitContact(action.payload);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t),\n\t\t),\n\t);\n\n\tprivate submitContact(contact: T): Observable<Action> {\n\t\treturn this.driver.send(contact).pipe(\n\t\t\tmap((resp: V) => {\n\t\t\t\treturn new DaffContactSuccessSubmit();\n\t\t\t}),\n\t\t\tcatchError(error => {\n\t\t\t\treturn of(new DaffContactFailedSubmit(['Failed to submit']));\n\t\t\t}),\n\t\t);\n\t}\n}\n","import { MemoizedSelector, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { DaffContactState } from '../reducers/contact.reducer';\n\nexport interface DaffContactFeatureState {\n  contact: DaffContactState\n}\n\nexport const selectContactFeatureState:\n  MemoizedSelector<DaffContactFeatureState, DaffContactState> = createFeatureSelector<DaffContactState>('contact');\n\nexport const selectDaffContactLoading = createSelector(\n  selectContactFeatureState, (state: DaffContactState) => state.loading\n);\n\nexport const selectDaffContactSuccess = createSelector(\n  selectContactFeatureState, (state: DaffContactState) => state.success\n);\n\nexport const selectDaffContactError = createSelector(\n  selectContactFeatureState, (state: DaffContactState) => state.errors\n);","import { DaffContactActions, DaffContactActionTypes} from '../actions/contact.actions';\n\nexport interface DaffContactState {\n  success: boolean;\n  loading: boolean;\n  errors: string[] | null;\n}\n\nconst initialState: DaffContactState = {\n  success: false,\n  loading: false,\n  errors: null\n}\n\nexport function reducer<T>(state: DaffContactState = initialState, \n  action: DaffContactActions<T>){\n    switch(action.type){\n      case DaffContactActionTypes.ContactRetryAction:\n      case DaffContactActionTypes.ContactSubmitAction:\n        return {...state, loading: true};\n      case DaffContactActionTypes.ContactFailedSubmitAction:\n        return {...state, loading: false, errors: action.payload};\n      case DaffContactActionTypes.ContactSuccessSubmitAction:\n        return {...state, success: true, loading: false}\n      case DaffContactActionTypes.ContactCancelAction:\n        return {...state, loading: false};\n      case DaffContactActionTypes.ContactResetAction:\n        return {...state, ... initialState};\n      default:\n        return state;\n    }\n  }","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducer } from './reducers/contact.reducer';\nimport { DaffContactEffects } from './effects/contact.effects';\n\n@NgModule({\n\tdeclarations: [],\n\timports: [\n\t\tStoreModule.forFeature('contact', reducer),\n\t\tEffectsModule.forFeature([DaffContactEffects])\n\t],\n\tproviders: [],\n})\nexport class DaffContactStateModule { }\n","import { Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport {\n\tDaffContactFeatureState,\n\tselectDaffContactLoading,\n\tselectDaffContactError,\n\tselectDaffContactSuccess,\n} from '../selectors/contact.selector';\nimport { DaffContactStateModule } from '../contact.module';\nimport { DaffContactFacadeInterface } from './contact-facade.interface';\n\n@Injectable({ providedIn: DaffContactStateModule })\nexport class DaffContactFacade implements DaffContactFacadeInterface {\n\tsuccess$: Observable<boolean> = this.store.select(selectDaffContactSuccess);\n\terror$: Observable<string[]> = this.store.select(selectDaffContactError);\n\tloading$: Observable<boolean> = this.store.select(selectDaffContactLoading);\n\n\tconstructor(private store: Store<DaffContactFeatureState>) { }\n\tdispatch(action: Action) {\n\t\tthis.store.dispatch(action);\n\t}\n}\n"]}