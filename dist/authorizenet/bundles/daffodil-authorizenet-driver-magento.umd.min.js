!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("@angular/common"),require("@daffodil/authorizenet/driver"),require("rxjs"),require("@daffodil/authorizenet")):"function"==typeof define&&define.amd?define("@daffodil/authorizenet/driver/magento",["exports","@angular/core","@angular/common","@daffodil/authorizenet/driver","rxjs","@daffodil/authorizenet"],r):r(((e=e||self).daffodil=e.daffodil||{},e.daffodil.authorizenet=e.daffodil.authorizenet||{},e.daffodil.authorizenet.driver=e.daffodil.authorizenet.driver||{},e.daffodil.authorizenet.driver.magento={}),e.ng.core,e.ng.common,e.daffodil.authorizenet.driver,e.rxjs,e.daffodil.authorizenet)}(this,function(e,r,t,o,a,i){"use strict";var n=function(){function e(e,r){this.config=e,this.acceptJsLoader=r}return e.prototype.generateToken=function(e){var r=this;return new a.Observable(function(t){return r.acceptJsLoader.getAccept().dispatchData((a=e,i=r.config,{cardData:{cardNumber:a.creditCard.cardnumber,cardCode:a.creditCard.securitycode,month:a.creditCard.month,year:a.creditCard.year},authData:{clientKey:i.clientKey,apiLoginID:i.apiLoginID}}),function(r){if("Error"===r.messages.resultCode){var a=o.DAFF_AUTHORIZE_NET_ERROR_CODE_MAP[r.messages.message[0].code],i=r.messages.message[0].code+": "+r.messages.message[0].text;throw a?new a(i):new Error(i)}t.next(function(e,r){return{code:"authorizenet_acceptjs",authorizenet_acceptjs:{cc_last_4:parseInt(r.slice(12),10),opaque_data_descriptor:"COMMON.ACCEPT.INAPP.PAYMENT",opaque_data_value:e.opaqueData.dataValue}}}(r,e.creditCard.cardnumber))});var a,i})},e.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:r.Inject,args:[o.DaffAuthorizeNetConfigToken]}]},{type:i.DaffAcceptJsLoadingService}]},e.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new e(r.ɵɵinject(o.DaffAuthorizeNetConfigToken),r.ɵɵinject(i.DaffAcceptJsLoadingService))},token:e,providedIn:"root"}),e}();var d=function(){function e(){}return e.forRoot=function(r){if(!r.apiLoginID||!r.clientKey)throw Error("You must provide an apiLoginID and clientKey for Authorize.Net configuration.");return{ngModule:e,providers:[{provide:o.DaffAuthorizeNetConfigToken,useValue:r},{provide:o.DaffAuthorizeNetDriver,useExisting:n},{provide:o.DaffAuthorizeNetPaymentId,useValue:"authorizenet_acceptjs"}]}},e.decorators=[{type:r.NgModule,args:[{imports:[t.CommonModule]}]}],e}();e.DaffMagentoAuthorizeNetDriverModule=d,e.MAGENTO_AUTHORIZE_NET_PAYMENT_ID="authorizenet_acceptjs",Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=daffodil-authorizenet-driver-magento.umd.min.js.map