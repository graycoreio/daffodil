{"version":3,"sources":["ng://@daffodil/authorizenet/driver/magento/authorize-net.service.ts","ng://@daffodil/authorizenet/driver/magento/transformers/authorize-net-transformer.ts","ng://@daffodil/authorizenet/driver/magento/authorize-net-payment-id.ts","ng://@daffodil/authorizenet/driver/magento/authorize-net.module.ts"],"names":["DaffMagentoAuthorizeNetService","config","acceptJsLoader","this","prototype","generateToken","paymentTokenRequest","_this","Observable","observer","getAccept","dispatchData","request","cardData","cardNumber","creditCard","cardnumber","cardCode","securitycode","month","year","authData","clientKey","apiLoginID","response","messages","resultCode","MappedError","DAFF_AUTHORIZE_NET_ERROR_CODE_MAP","message","code","text","Error","next","ccNumber","authorizenet_acceptjs","cc_last_4","parseInt","slice","opaque_data_descriptor","opaque_data_value","opaqueData","dataValue","transformMagentoAuthorizeNetResponse","Injectable","args","providedIn","Inject","DaffAuthorizeNetConfigToken","DaffAcceptJsLoadingService","DaffMagentoAuthorizeNetDriverModule","forRoot","ngModule","providers","provide","useValue","DaffAuthorizeNetDriver","useExisting","DaffAuthorizeNetPaymentId","NgModule","imports","CommonModule"],"mappings":"0uBAAA,IAAAA,EAAA,WAcC,SAAAA,EAC+CC,EACpCC,GADoCC,KAAAF,OAAAA,EACpCE,KAAAD,eAAAA,SAGXF,EAAAI,UAAAC,cAAA,SAAcC,GAAd,IAAAC,EAAAJ,KACC,OAAO,IAAIK,EAAAA,WAAU,SAACC,GACrB,OAAAF,EAAKL,eAAeQ,YAAYC,cChBiBC,EDgBgCN,EChBOL,EDgBcM,EAAKN,OCftG,CACNY,SAAU,CACTC,WAAYF,EAAQG,WAAWC,WAC/BC,SAAUL,EAAQG,WAAWG,aAC7BC,MAAOP,EAAQG,WAAWI,MAC1BC,KAAMR,EAAQG,WAAWK,MAE1BC,SAAU,CACTC,UAAWrB,EAAOqB,UAClBC,WAAYtB,EAAOsB,cDM+F,SAAGC,GACpH,GAAqC,UAAjCA,EAASC,SAASC,WAAwB,KAClCC,EAAcC,EAAAA,kCAAkCJ,EAASC,SAASI,QAAQ,GAAGC,MAC7ED,EAAUL,EAASC,SAASI,QAAQ,GAAGC,KAAO,KAAON,EAASC,SAASI,QAAQ,GAAGE,KAE7F,MAAMJ,EAAc,IAAIA,EAAYE,GAAW,IAAIG,MAAMH,GAEzDpB,EAASwB,KCRd,SAAqDT,EAAgCU,GACpF,MAAO,CACNJ,KAAM,wBACNK,sBAAuB,CACtBC,UAAWC,SAASH,EAASI,MAAM,IAAK,IACxCC,uBAAwB,8BACxBC,kBAAmBhB,EAASiB,WAAWC,YDEvBC,CAAqCnB,EAAUlB,EAAoBS,WAAWC,eCvBjG,IAAoDJ,EAAuCX,yBDI1F2C,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAKTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,sCAZiDC,EAAAA,yNAH7D,GEAA,ICAAC,EAAA,WAQA,SAAAA,KA6BA,OAvBSA,EAAAC,QAAP,SAAelD,GACf,IAAIA,EAAOsB,aAAetB,EAAOqB,UAChC,MAAMU,MAAM,iFAGX,MAAO,CACLoB,SAAUF,EACVG,UAAW,CACb,CACCC,QAASN,EAAAA,4BACTO,SAAUtD,GAEP,CACEqD,QAASE,EAAAA,uBACdC,YAAazD,GAEd,CACCsD,QAASI,EAAAA,0BACTH,SDhC2C,gDCQ/CI,EAAAA,SAAQd,KAAA,CAAC,CACRe,QAAS,CACPC,EAAAA,kBA2BJX,EArCA,8EDAgD","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DaffAuthorizeNetTokenRequest, AuthorizeNetResponse, DaffAcceptJsLoadingService } from '@daffodil/authorizenet';\nimport { DaffAuthorizeNetService, DaffAuthorizeNetConfigToken, DaffAuthorizeNetConfig, DAFF_AUTHORIZE_NET_ERROR_CODE_MAP } from '@daffodil/authorizenet/driver';\n\nimport { transformMagentoAuthorizeNetRequest, transformMagentoAuthorizeNetResponse } from './transformers/authorize-net-transformer';\nimport { MagentoAuthorizeNetPayment } from './models/authorize-net-payment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoAuthorizeNetService implements DaffAuthorizeNetService {\n\n\tconstructor(\n    @Inject(DaffAuthorizeNetConfigToken) public config: DaffAuthorizeNetConfig,\n    private acceptJsLoader: DaffAcceptJsLoadingService\n\t) {}\n\n\tgenerateToken(paymentTokenRequest: DaffAuthorizeNetTokenRequest): Observable<MagentoAuthorizeNetPayment> {\n\t\treturn new Observable(observer =>\n\t\t\tthis.acceptJsLoader.getAccept().dispatchData(transformMagentoAuthorizeNetRequest(paymentTokenRequest, this.config), (response: AuthorizeNetResponse) => {\n\t\t\t\tif (response.messages.resultCode === 'Error') {\n          const MappedError = DAFF_AUTHORIZE_NET_ERROR_CODE_MAP[response.messages.message[0].code];\n          const message = response.messages.message[0].code + ': ' + response.messages.message[0].text;\n\n\t\t\t\t\tthrow MappedError ? new MappedError(message) : new Error(message);\n\t\t\t\t} else {\n\t\t\t\t\tobserver.next(transformMagentoAuthorizeNetResponse(response, paymentTokenRequest.creditCard.cardnumber));\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { DaffAuthorizeNetTokenRequest, AuthorizeNetResponse, AuthorizeNetRequest } from '@daffodil/authorizenet';\nimport { DaffAuthorizeNetConfig } from '@daffodil/authorizenet/driver';\n\nimport { MagentoAuthorizeNetPayment } from '../models/authorize-net-payment';\n\nexport function transformMagentoAuthorizeNetRequest(request: DaffAuthorizeNetTokenRequest, config: DaffAuthorizeNetConfig): AuthorizeNetRequest {\n\treturn {\n\t\tcardData: {\n\t\t\tcardNumber: request.creditCard.cardnumber,\n\t\t\tcardCode: request.creditCard.securitycode,\n\t\t\tmonth: request.creditCard.month,\n\t\t\tyear: request.creditCard.year\n\t\t},\n\t\tauthData: {\n\t\t\tclientKey: config.clientKey,\n\t\t\tapiLoginID: config.apiLoginID\n\t\t}\n\t};\n};\n\nexport function transformMagentoAuthorizeNetResponse(response: AuthorizeNetResponse, ccNumber: string): MagentoAuthorizeNetPayment {\n\treturn {\n\t\tcode: 'authorizenet_acceptjs',\n\t\tauthorizenet_acceptjs: {\n\t\t\tcc_last_4: parseInt(ccNumber.slice(12), 10),\n\t\t\topaque_data_descriptor: 'COMMON.ACCEPT.INAPP.PAYMENT',\n\t\t\topaque_data_value: response.opaqueData.dataValue\n\t\t}\n\t}\n}\n","export const MAGENTO_AUTHORIZE_NET_PAYMENT_ID = 'authorizenet_acceptjs';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffAuthorizeNetConfig, DaffAuthorizeNetConfigToken, DaffAuthorizeNetDriver, DaffAuthorizeNetPaymentId } from '@daffodil/authorizenet/driver';\n\nimport { DaffMagentoAuthorizeNetService } from './authorize-net.service';\nimport { MAGENTO_AUTHORIZE_NET_PAYMENT_ID } from './authorize-net-payment-id';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffMagentoAuthorizeNetDriverModule {\n  static forRoot(config: DaffAuthorizeNetConfig): ModuleWithProviders {\n\t\tif(!config.apiLoginID || !config.clientKey) {\n\t\t\tthrow Error('You must provide an apiLoginID and clientKey for Authorize.Net configuration.')\n\t\t}\n\n    return {\n      ngModule: DaffMagentoAuthorizeNetDriverModule,\n      providers: [\n\t\t\t\t{\n\t\t\t\t\tprovide: DaffAuthorizeNetConfigToken,\n\t\t\t\t\tuseValue: config\n\t\t\t\t},\n        {\n          provide: DaffAuthorizeNetDriver,\n\t\t\t\t\tuseExisting: DaffMagentoAuthorizeNetService\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: DaffAuthorizeNetPaymentId,\n\t\t\t\t\tuseValue: MAGENTO_AUTHORIZE_NET_PAYMENT_ID\n\t\t\t\t}\n      ]\n    };\n  }\n}\n"]}