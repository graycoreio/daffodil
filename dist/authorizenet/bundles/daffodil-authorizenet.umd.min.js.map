{"version":3,"sources":["ng://@daffodil/authorizenet/services/accept-js-production.token.ts","ng://@daffodil/authorizenet/services/accept-js-loading.service.ts","ng://@daffodil/authorizenet/injection-tokens/error-matcher.token.ts"],"names":["DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION","InjectionToken","providedIn","factory","DaffAcceptJsLoadingService","production","doc","this","prototype","load","Accept","acceptJsScript","createElement","async","setAttribute","body","appendChild","getAccept","Injectable","args","Inject","DOCUMENT","DAFF_AUTHORIZENET_ERROR_MATCHER","daffTransformErrorToStateError"],"mappings":"wbAQA,IAAaA,EAAyC,IAAIC,EAAAA,eAExD,yCAA0C,CAC3CC,WAAY,OACZC,QAAO,WAAQ,OAAA,KCFhBC,EAAA,WAIC,SAAAA,EACyDC,EAC9BC,GAD8BC,KAAAF,WAAAA,EAC9BE,KAAAD,IAAAA,SAG3BF,EAAAI,UAAAC,KAAA,WACC,GAAsB,oBAAXC,OAAwB,KAC5BC,EAAiBJ,KAAKD,IAAIM,cAAc,UAC9CD,EAAeE,OAAQ,EACvBF,EAAeG,aAAa,OAAQ,mBACpCH,EAAeG,aACd,MACAP,KAAKF,WApBwB,wCADH,6CAuB3BM,EAAeG,aAAa,UAAW,SACvCP,KAAKD,IAAIS,KAAKC,YAAYL,KAI5BP,EAAAI,UAAAS,UAAA,WACC,OAAOP,4BAxBRQ,EAAAA,WAAUC,KAAA,CAAC,CACXjB,WAAY,8EAIVkB,EAAAA,OAAMD,KAAA,CAACnB,qCACPoB,EAAAA,OAAMD,KAAA,CAACE,EAAAA,4JANV,GCFA,IAAaC,EAAkC,IAAIrB,EAAAA,eAAsD,kCAAmC,CAACE,QAAO,WAAQ,OAAAoB,EAAAA","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * A token that represents the version to use for Accept.JS calls.\n * A \"true\" value configures the package to use the production AcceptJs endpoint, \n * and a \"false\" value configures it to use the Sandbox AcceptJs endpoint. \n * By default, we assume you're using the sandbox (false).\n */\nexport const DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION = new InjectionToken<\n\tboolean\n>('DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION', {\n\tprovidedIn: 'root',\n\tfactory: () => false,\n});\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION } from './accept-js-production.token';\nimport { AcceptType } from '../models/acceptJs/accept';\n\nconst ACCEPT_JS_SANDBOX_URL = 'https://jstest.authorize.net/v1/Accept.js';\nconst ACCEPT_JS_PRODUCTION_URL = 'https://js.authorize.net/v1/Accept.js';\n\nexport declare var Accept: AcceptType;\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class DaffAcceptJsLoadingService {\n\tconstructor(\n\t\t@Inject(DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION) private production: boolean,\n\t\t@Inject(DOCUMENT) private doc,\n\t) {}\n\n\tload(): void {\n\t\tif (typeof Accept === 'undefined') {\n\t\t\tconst acceptJsScript = this.doc.createElement('script');\n\t\t\tacceptJsScript.async = true;\n\t\t\tacceptJsScript.setAttribute('type', 'text/javascript');\n\t\t\tacceptJsScript.setAttribute(\n\t\t\t\t'src',\n\t\t\t\tthis.production ? ACCEPT_JS_PRODUCTION_URL : ACCEPT_JS_SANDBOX_URL,\n\t\t\t);\n\t\t\tacceptJsScript.setAttribute('charset', 'utf-8');\n\t\t\tthis.doc.body.appendChild(acceptJsScript);\n\t\t}\n\t}\n\n\tgetAccept(): AcceptType {\n\t\treturn Accept;\n\t}\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { daffTransformErrorToStateError } from '@daffodil/core/state';\n\n/**\n * Transforms `DaffError`s into `DaffStateError`s before they are serialized into state.\n * Can be used to further refine Daffodil errors into more specific app errors.\n */\nexport const DAFF_AUTHORIZENET_ERROR_MATCHER = new InjectionToken<typeof daffTransformErrorToStateError>('DAFF_AUTHORIZENET_ERROR_MATCHER', {factory: () => daffTransformErrorToStateError});\n"]}