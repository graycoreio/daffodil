{"version":3,"sources":["ng://@daffodil/authorizenet/state/testing/mock-authorize-net-facade.ts","ng://@daffodil/authorizenet/state/testing/authorize-net-testing.module.ts"],"names":["MockDaffAuthorizeNetFacade","this","isAcceptJsLoaded$","BehaviorSubject","loading$","paymentError$","acceptJsLoadError$","prototype","dispatch","action","Injectable","args","providedIn","DaffAuthorizeNetTestingModule","NgModule","providers","provide","DaffAuthorizeNetFacade","useExisting"],"mappings":"mlBACA,IAAAA,EAAA,WAMA,SAAAA,IAEEC,KAAAC,kBAA8C,IAAIC,EAAAA,iBAAgB,GAClEF,KAAAG,SAAqC,IAAID,EAAAA,iBAAgB,GACzDF,KAAAI,cAAiD,IAAIF,EAAAA,gBAAgB,MACrEF,KAAAK,mBAAsD,IAAIH,EAAAA,gBAAgB,aAE1EH,EAAAO,UAAAC,SAAA,SAASC,yBAPVC,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAY,kHANzB,GCDA,IAAAC,EAAA,WAMA,SAAAA,KAK4C,2BAL3CC,EAAAA,SAAQH,KAAA,CAAC,CACRI,UAAW,CACX,CAAEC,QAASC,EAAAA,uBAAwBC,YAAalB,QAGNa,EAX5C","sourcesContent":["import { Action } from '@ngrx/store';\nimport { BehaviorSubject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nimport { DaffAuthorizeNetFacadeInterface } from '@daffodil/authorizenet/state';\nimport { DaffStateError } from '@daffodil/core/state';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffAuthorizeNetFacade implements DaffAuthorizeNetFacadeInterface {\n  isAcceptJsLoaded$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  paymentError$: BehaviorSubject<DaffStateError> = new BehaviorSubject(null);\n  acceptJsLoadError$: BehaviorSubject<DaffStateError> = new BehaviorSubject(null);\n\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffAuthorizeNetFacade } from '@daffodil/authorizenet/state';\n\nimport { MockDaffAuthorizeNetFacade } from './mock-authorize-net-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffAuthorizeNetFacade, useExisting: MockDaffAuthorizeNetFacade }\n\t]\n})\nexport class DaffAuthorizeNetTestingModule {}\n"]}