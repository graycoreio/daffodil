{"version":3,"file":"daffodil-authorizenet.umd.js","sources":["ng://@daffodil/authorizenet/models/request/authorize-net-request.ts","ng://@daffodil/authorizenet/models/response/authorize-net-response.ts","ng://@daffodil/authorizenet/services/accept-js-production.token.ts","ng://@daffodil/authorizenet/services/accept-js-loading.service.ts","ng://@daffodil/authorizenet/injection-tokens/error-matcher.token.ts"],"sourcesContent":["export interface AuthorizeNetRequest {\n\tcardData: AuthorizeNetCreditCard;\n\tauthData: {\n\t\tclientKey: string;\n\t\tapiLoginID: string;\n\t};\n}\n\nexport interface AuthorizeNetCreditCard {\n\tcardNumber: string;\n\tcardCode: string;\n\tmonth: string;\n\tyear: string;\n}\n","export interface AuthorizeNetMessage {\n\tcode: string;\n\ttext: string;\n}\n\nexport interface AuthorizeNetResponse {\n\topaqueData: {\n\t\tdataDescriptor: string;\n\t\tdataValue: string;\n\t};\n\tmessages: {\n\t\tresultCode: string;\n\t\tmessage: AuthorizeNetMessage[];\n\t};\n}","import { InjectionToken } from '@angular/core';\n\n/**\n * A token that represents the version to use for Accept.JS calls.\n * A \"true\" value configures the package to use the production AcceptJs endpoint, \n * and a \"false\" value configures it to use the Sandbox AcceptJs endpoint. \n * By default, we assume you're using the sandbox (false).\n */\nexport const DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION = new InjectionToken<\n\tboolean\n>('DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION', {\n\tprovidedIn: 'root',\n\tfactory: () => false,\n});\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION } from './accept-js-production.token';\nimport { AcceptType } from '../models/acceptJs/accept';\n\nconst ACCEPT_JS_SANDBOX_URL = 'https://jstest.authorize.net/v1/Accept.js';\nconst ACCEPT_JS_PRODUCTION_URL = 'https://js.authorize.net/v1/Accept.js';\n\nexport declare var Accept: AcceptType;\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class DaffAcceptJsLoadingService {\n\tconstructor(\n\t\t@Inject(DAFF_AUTHORIZENET_ACCEPT_JS_PRODUCTION) private production: boolean,\n\t\t@Inject(DOCUMENT) private doc,\n\t) {}\n\n\tload(): void {\n\t\tif (typeof Accept === 'undefined') {\n\t\t\tconst acceptJsScript = this.doc.createElement('script');\n\t\t\tacceptJsScript.async = true;\n\t\t\tacceptJsScript.setAttribute('type', 'text/javascript');\n\t\t\tacceptJsScript.setAttribute(\n\t\t\t\t'src',\n\t\t\t\tthis.production ? ACCEPT_JS_PRODUCTION_URL : ACCEPT_JS_SANDBOX_URL,\n\t\t\t);\n\t\t\tacceptJsScript.setAttribute('charset', 'utf-8');\n\t\t\tthis.doc.body.appendChild(acceptJsScript);\n\t\t}\n\t}\n\n\tgetAccept(): AcceptType {\n\t\treturn Accept;\n\t}\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { daffTransformErrorToStateError } from '@daffodil/core/state';\n\n/**\n * Transforms `DaffError`s into `DaffStateError`s before they are serialized into state.\n * Can be used to further refine Daffodil errors into more specific app errors.\n */\nexport const DAFF_AUTHORIZENET_ERROR_MATCHER = new InjectionToken<typeof daffTransformErrorToStateError>('DAFF_AUTHORIZENET_ERROR_MATCHER', {factory: () => daffTransformErrorToStateError});\n"],"names":["InjectionToken","Injectable","Inject","DOCUMENT","daffTransformErrorToStateError"],"mappings":";;;;;;;;;;;;;IAAA,kCAMC;;;QALA,uCAAiC;;QACjC,uCAGE;;;;;IAGH,qCAKC;;;QAJA,4CAAmB;;QACnB,0CAAiB;;QACjB,uCAAc;;QACd,sCAAa;;;;;;;;;;ICZd,kCAGC;;;QAFA,mCAAa;;QACb,mCAAa;;;;;IAGd,mCASC;;;QARA,0CAGE;;QACF,wCAGE;;;;;;;;;;;;ICbH;;;;;;;AAQA,QAAa,sCAAsC,GAAG,IAAIA,mBAAc,CAEtE,wCAAwC,EAAE;QAC3C,UAAU,EAAE,MAAM;QAClB,OAAO;;;QAAE,cAAM,OAAA,KAAK,GAAA,CAAA;KACpB,CAAC;;;;;;ICbF;QAKM,qBAAqB,GAAG,2CAA2C;;QACnE,wBAAwB,GAAG,uCAAuC;AAIxE;QAIC,oCACyD,UAAmB,EACjD,GAAG;YAD2B,eAAU,GAAV,UAAU,CAAS;YACjD,QAAG,GAAH,GAAG,CAAA;SAC1B;;;;QAEJ,yCAAI;;;QAAJ;YACC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;;oBAC5B,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACvD,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC;gBAC5B,cAAc,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;gBACvD,cAAc,CAAC,YAAY,CAC1B,KAAK,EACL,IAAI,CAAC,UAAU,GAAG,wBAAwB,GAAG,qBAAqB,CAClE,CAAC;gBACF,cAAc,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAChD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;aAC1C;SACD;;;;QAED,8CAAS;;;QAAT;YACC,OAAO,MAAM,CAAC;SACd;;oBAzBDC,eAAU,SAAC;wBACX,UAAU,EAAE,MAAM;qBAClB;;;;kDAGEC,WAAM,SAAC,sCAAsC;oDAC7CA,WAAM,SAACC,eAAQ;;;yCAhBlB;KAUA,IA0BC;;;;;;QArBC,gDAA2E;;;;;QAC3E,yCAA6B;;;;;;;;;;;;IChB/B;;;;;AAQA,QAAa,+BAA+B,GAAG,IAAIH,mBAAc,CAAwC,iCAAiC,EAAE,EAAC,OAAO;;;QAAE,cAAM,OAAAI,oCAA8B,GAAA,CAAA,EAAC,CAAC;;;;;;;;;;;;;;"}