{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-payment.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-shipping-rate.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-shipping-information.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/shipping-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/billing-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-coupon.ts","ng://@daffodil/cart/driver/magento/models/responses/cart-item.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/simple-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/bundle-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/configurable-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-totals-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/shipping-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/billing-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-item-update.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/payment-method.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/shipping-method.service.ts","ng://@daffodil/cart/driver/magento/injection-tokens/fragments/cart.ts","ng://@daffodil/cart/driver/magento/queries/fragments/money.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-coupon.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-address.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-item.ts","ng://@daffodil/cart/driver/magento/queries/fragments/available-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/available-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/prices.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart.ts","ng://@daffodil/cart/driver/magento/queries/list-cart-items.ts","ng://@daffodil/cart/driver/magento/queries/add-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/remove-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/update-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/list-payment-methods.ts","ng://@daffodil/cart/driver/magento/queries/get-selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method-with-billing.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method-with-billing-and-email.ts","ng://@daffodil/cart/driver/magento/queries/list-shipping-methods.ts","ng://@daffodil/cart/driver/magento/queries/get-selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/get-billing-address.ts","ng://@daffodil/cart/driver/magento/queries/update-billing-address.ts","ng://@daffodil/cart/driver/magento/queries/update-billing-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/get-shipping-address.ts","ng://@daffodil/cart/driver/magento/queries/update-shipping-address.ts","ng://@daffodil/cart/driver/magento/queries/update-shipping-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/update-address.ts","ng://@daffodil/cart/driver/magento/queries/update-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/get-cart.ts","ng://@daffodil/cart/driver/magento/queries/create-cart.ts","ng://@daffodil/cart/driver/magento/queries/place-order.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-totals.ts","ng://@daffodil/cart/driver/magento/queries/apply-coupon.ts","ng://@daffodil/cart/driver/magento/queries/list-cart-coupons.ts","ng://@daffodil/cart/driver/magento/queries/remove-all-coupons.ts","ng://@daffodil/cart/driver/magento/errors/codes.ts","ng://@daffodil/cart/driver/magento/errors/map.ts","ng://@daffodil/cart/driver/magento/errors/transform.ts","ng://@daffodil/cart/driver/magento/injection-tokens/cart-mutation-queue.token.ts","ng://@daffodil/cart/driver/magento/cart.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-item-input-transformers.ts","ng://@daffodil/cart/driver/magento/cart-item.service.ts","ng://@daffodil/cart/driver/magento/cart-payment.service.ts","ng://@daffodil/cart/driver/magento/cart-payment-methods.service.ts","ng://@daffodil/cart/driver/magento/cart-billing-address.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-address.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-methods.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-information.service.ts","ng://@daffodil/cart/driver/magento/cart-address.service.ts","ng://@daffodil/cart/driver/magento/cart-order.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-coupon-response.service.ts","ng://@daffodil/cart/driver/magento/cart-coupon.service.ts","ng://@daffodil/cart/driver/magento/cart-driver.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","__makeTemplateObject","cooked","raw","defineProperty","DaffMagentoCartPaymentTransformer","transform","responsePayment","magento_payment_method","method","code","Injectable","args","providedIn","DaffMagentoCartShippingRateTransformer","shippingMethod","magento_shipping_method","carrier","carrier_code","carrier_title","price","amount","method_code","method_title","id","method_description","DaffMagentoCartShippingInformationTransformer","shippingRateTransformer","address_id","DaffMagentoCartAddressTransformer","address","magento_address","street","city","region","country","label","country_id","postcode","firstname","lastname","telephone","email","suffix","middlename","prefix","address_type","DaffMagentoShippingAddressTransformer","addressTransformer","DaffMagentoBillingAddressTransformer","daffMagentoCouponTransform","coupon","magento_coupon","Simple","Bundle","Configurable","transformMagentoSimpleCartItem","cartItem","magento_cart_item","type","DaffCartItemInputType","item_id","sku","product","name","qty","quantity","prices","row_total","product_id","String","image","thumbnail","url","total_discount","total_item_discount","in_stock","stock_status","MagentoProductStockStatusEnum","InStock","parent_item_id","transformBundleCartItemOption","option","option_id","values","option_label","value_label","transformConfigurableCartItemAttribute","attribute_label","transformMagentoCartItem","__typename","MagentoCartItemTypeEnum","bundleCartItem","Composite","options","bundle_options","map","configurableCartItem","attributes","configurable_options","transformCartTotals","cart","discounts","totalTax","applied_taxes","reduce","acc","tax","daffAdd","totals","DaffCartTotalTypeEnum","grandTotal","grand_total","subtotalExcludingTax","subtotal_excluding_tax","subtotalIncludingTax","subtotal_including_tax","subtotalWithDiscountExcludingTax","subtotal_with_discount_excluding_tax","subtotalWithDiscountIncludingTax","discount","shipping","validateSelectedShippingAddress","shipping_addresses","selected_shipping_method","DaffMagentoCartTransformer","shippingAddressTransformer","billingAddressTransformer","paymentTransformer","shippingInformationTransformer","transformShippingAddress","shipping_address","transformBillingAddress","billing_address","transformCartItems","items","transformTotals","subtotal","transformCoupons","coupons","applied_coupons","transformPayment","payment","selected_payment_method","transformShippingInformation","shipping_information","transformShippingMethods","_this","available_shipping_methods","transformPaymentMethods","available_payment_methods","extra_attributes","DaffMagentoCartAddressInputTransformer","cartAddress","country_code","save_in_address_book","DaffMagentoShippingAddressInputTransformer","cartAddressTransformer","customer_address_id","DaffMagentoBillingAddressInputTransformer","DaffMagentoCartItemUpdateInputTransformer","item","cart_item_id","Number","DaffMagentoPaymentMethodInputTransformer","payment_info","DaffMagentoShippingMethodInputTransformer","DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS","InjectionToken","factory","moneyFragment","gql","templateObject_1","cartCouponFragment","templateObject_1$1","cartAddressFragment","templateObject_1$2","cartItemFragment","templateObject_1$3","magentoProductFragment","availablePaymentMethodFragment","templateObject_1$4","selectedPaymentMethodFragment","templateObject_1$5","availableShippingMethodFragment","templateObject_1$6","selectedShippingMethodFragment","templateObject_1$7","pricesFragment","templateObject_1$8","cartFragment","templateObject_1$9","listCartItems","extraCartFragments","templateObject_1$a","daffBuildFragmentNameSpread","daffBuildFragmentDefinition","addSimpleCartItem","templateObject_1$b","addBundleCartItem","templateObject_2","addConfigurableCartItem","templateObject_3","removeCartItem","templateObject_1$c","updateCartItem","templateObject_1$d","listPaymentMethods","templateObject_1$e","getSelectedPaymentMethod","templateObject_1$f","setSelectedPaymentMethod","templateObject_1$g","setSelectedPaymentMethodWithBilling","templateObject_1$h","setSelectedPaymentMethodWithBillingAndEmail","templateObject_1$i","listShippingMethods","templateObject_1$j","getSelectedShippingMethod","templateObject_1$k","setSelectedShippingMethod","templateObject_1$l","getBillingAddress","templateObject_1$m","updateBillingAddress","templateObject_1$n","updateBillingAddressWithEmail","templateObject_1$o","getShippingAddress","templateObject_1$p","updateShippingAddress","templateObject_1$q","updateShippingAddressWithEmail","templateObject_1$r","updateAddress","templateObject_1$s","updateAddressWithEmail","templateObject_1$t","getCart","templateObject_1$u","createCart","templateObject_1$v","placeOrder","templateObject_1$w","cartTotalsFragment","templateObject_1$x","applyCoupon","templateObject_1$y","listCartCoupons","templateObject_1$z","removeAllCoupons","templateObject_1$A","DaffCartMagentoErrorMap","_a","DaffCartNotFoundError","MagentoCartGraphQlErrorCode","DaffBadInputError","DaffCartMagentoErrorMessageRegexMap","_b","DaffCartDriverErrorCodes","INVALID_COUPON_CODE","transformCartMagentoError","graphQLErrors","message","search","DaffCartDriverErrorMap","daffTransformMagentoError","transformMagentoCartGraphQlError","DAFF_MAGENTO_CART_MUTATION_QUEUE","DaffQueuedApollo","inject","Apollo","DaffMagentoCartService","apollo","mutationQueue","cartTransformer","cartItemDriver","get","cartId","query","variables","pipe","catchError","throwError","result","data","create","mutate","mutation","createEmptyCart","addToCart","productId","Error","clear","list","switchMap","forkJoin","delete","decorators","Inject","DaffCartItemDriver","transformSimpleCartItem","transformCompositeCartItemOption","DaffMagentoCartItemService","cartItemUpdateInputTransformer","itemId","find","add","cartItemInput","addBundledProduct","addConfigurableProduct","addSimpleProduct","update","changes","input","updateCartItems","removeItemFromCart","bundleInput","addBundleProductsToCart","configurableInput","parentSku","variantId","addConfigurableProductsToCart","addSimpleProductsToCart","DaffMagentoCartPaymentService","paymentInputTransformer","cartAddressInputTransformer","setPaymentMethodOnCart","updateWithBilling","updateWithBillingAddressAndEmail","updateWithBillingAddress","remove","mapTo","undefined","resp","setGuestEmailOnCart","DaffMagentoCartPaymentMethodsService","DaffMagentoCartBillingAddressService","billingAddressInputTransformer","setBillingAddressOnCart","DaffMagentoCartShippingAddressService","shippingAddressInputTransformer","setShippingAddressesOnCart","DaffMagentoCartShippingMethodsService","DaffMagentoCartShippingInformationService","shippingMethodInputTransformer","shippingInfo","fetchPolicy","shippingMethods","setShippingMethodsOnCart","DaffMagentoCartAddressService","DaffMagentoCartOrderService","order","order_number","orderId","err","DaffMagentoCartCouponResponseTransformer","DaffMagentoCartCouponService","couponCode","applyCouponToCart","removeAll","removeCouponFromCart","DaffCartMagentoDriverModule","forRoot","ngModule","providers","provide","DaffCartDriver","useExisting","DaffCartAddressDriver","DaffCartBillingAddressDriver","DaffCartShippingAddressDriver","DaffCartShippingMethodsDriver","DaffCartShippingInformationDriver","DaffCartPaymentDriver","DaffCartPaymentMethodsDriver","DaffCartOrderDriver","DaffCartCouponDriver","NgModule","imports","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\n\nimport { MagentoCartPaymentMethod } from '../../models/responses/cart-payment-method';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentTransformer {\n\n  /**\n   * Transforms the magento CartPayment from the magento cart query into a DaffCartPaymentMethod.\n   * @param response the response from a magento cart query.\n   */\n  transform(responsePayment: MagentoCartPaymentMethod): DaffCartPaymentMethod {\n    return responsePayment ? {\n      ...{magento_payment_method: responsePayment},\n\n      method: responsePayment.code\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\n\nimport { MagentoCartShippingMethod } from '../../models/responses/cart-shipping-method';\n\n/**\n * Transforms magento cart shipping methods into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingRateTransformer {\n  /**\n   * Transforms the magento shipping method from the magento cart query into a DaffCartShippingRate.\n   * @param shippingMethod the shippingMethod from a magento cart query.\n   */\n  transform(shippingMethod: MagentoCartShippingMethod): DaffCartShippingRate {\n    return shippingMethod ? {\n      ...{magento_shipping_method: shippingMethod},\n\n      carrier: shippingMethod.carrier_code,\n      carrier_title: shippingMethod.carrier_title,\n      price: shippingMethod.amount.value,\n      method_code: shippingMethod.method_code,\n      method_title: shippingMethod.method_title,\n\n      // TODO: implement\n      id: null,\n      method_description: null\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingInformation } from '@daffodil/cart';\n\nimport { MagentoCartShippingMethod } from '../../models/responses/cart-shipping-method';\nimport { DaffMagentoCartShippingRateTransformer } from './cart-shipping-rate.service';\n\n/**\n * Transforms magento cart shipping methods into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingInformationTransformer {\n  constructor(public shippingRateTransformer: DaffMagentoCartShippingRateTransformer) {}\n  /**\n   * Transforms the magento shipping method from the magento cart query into a DaffCartShippingInformation.\n   * @param shippingMethod the shippingMethod from a magento cart query.\n   */\n  transform(shippingMethod: MagentoCartShippingMethod): DaffCartShippingInformation {\n    return shippingMethod ? {\n      ...this.shippingRateTransformer.transform(shippingMethod),\n      // TODO: implement\n      address_id: 0\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoCartAddress } from '../../models/responses/cart-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartAddressTransformer {\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoCartAddress): DaffCartAddress {\n    return address ? {\n      ...{magento_address: address},\n\n      // address\n      street: address.street[0],\n      city: address.city,\n      region: address.region.code,\n      country: address.country.label,\n      country_id: address.country.code,\n      postcode: address.postcode,\n\n      // personal address\n      firstname: address.firstname,\n      lastname: address.lastname,\n      telephone: address.telephone,\n      email: address.email,\n\n      // TODO: implement\n      address_id: null,\n      suffix: null,\n      middlename: null,\n      prefix: null,\n      address_type: null,\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { DaffMagentoCartAddressTransformer } from './cart-address.service';\nimport { MagentoShippingAddress } from '../../models/responses/shipping-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoShippingAddressTransformer {\n  constructor (public addressTransformer: DaffMagentoCartAddressTransformer) {}\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoShippingAddress): DaffCartAddress {\n    return address ? {\n      ...this.addressTransformer.transform(address),\n      address_type: 'shipping',\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { DaffMagentoCartAddressTransformer } from './cart-address.service';\nimport { MagentoCartAddress } from '../../models/responses/cart-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoBillingAddressTransformer {\n  constructor (\n    public addressTransformer: DaffMagentoCartAddressTransformer\n  ) {}\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoCartAddress): DaffCartAddress {\n    return address ? {\n      ...this.addressTransformer.transform(address),\n      address_type: 'billing',\n    } : null\n  }\n}\n","import { DaffCartCoupon } from '@daffodil/cart';\n\nimport { MagentoCartCoupon } from '../../models/responses/public_api';\n\nexport function daffMagentoCouponTransform(coupon: MagentoCartCoupon): DaffCartCoupon {\n  return {\n    ...{magento_coupon: coupon},\n    code: coupon.code\n  }\n}\n","import { MagentoProduct } from '@daffodil/product';\nimport { MagentoMoney } from '@daffodil/driver/magento'\n\nexport enum MagentoCartItemTypeEnum {\n\tSimple = 'SimpleCartItem',\n\tBundle = 'BundleCartItem',\n\tConfigurable = 'ConfigurableCartItem'\n}\n\n/**\n * An object for defining what the cart service requests and retrieves from a magento backend.\n */\nexport interface MagentoCartItem {\n\t__typename: MagentoCartItemTypeEnum;\n  id: string;\n  prices: {\n    price: MagentoMoney;\n    row_total: MagentoMoney;\n    row_total_including_tax: MagentoMoney;\n    total_item_discount: MagentoMoney;\n  };\n  product: MagentoProduct;\n  quantity: number;\n}\n\n/**\n * An interface for magento bundled cart items.\n */\nexport interface MagentoBundleCartItem extends MagentoCartItem {\n\tbundle_options: {\n\t\tid: number;\n\t\tlabel: string;\n\t\ttype: string;\n\t\tvalues: {\n\t\t\tid: number;\n\t\t\tlabel: string;\n\t\t\tprice: number;\n\t\t\tquantity: number;\n\t\t}[];\n\t}[];\n}\n\n/**\n * An interface for magento configurable cart items.\n */\nexport interface MagentoConfigurableCartItem extends MagentoCartItem {\n\tconfigurable_options: {\n\t\toption_label: string;\n\t\tvalue_label: string;\n\t}[];\n}\n","import { DaffCartItem, DaffCartItemInputType } from '@daffodil/cart';\nimport { MagentoProductStockStatusEnum } from '@daffodil/product';\n\nimport { MagentoCartItem } from '../../../models/public_api';\n\n/**\n * Transforms the magento MagentoCartItem from the magento cart query into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoSimpleCartItem(cartItem: MagentoCartItem): DaffCartItem {\n\treturn cartItem ? {\n\t\t...{magento_cart_item: cartItem},\n\n\t\t// base\n\t\ttype: DaffCartItemInputType.Simple,\n\t\titem_id: cartItem.id,\n\t\tsku: cartItem.product.sku,\n\t\tname: cartItem.product.name,\n\t\tqty: cartItem.quantity,\n\t\tprice: cartItem.prices.price.value,\n\t\trow_total: cartItem.prices.row_total.value,\n\t\tproduct_id: String(cartItem.product.id),\n\t\timage: {\n\t\t\tid: cartItem.product.thumbnail.label,\n\t\t\turl: cartItem.product.thumbnail.url,\n\t\t\tlabel: cartItem.product.thumbnail.label\n\t\t},\n\t\ttotal_discount: cartItem.prices.total_item_discount.value,\n\t\tin_stock: cartItem.product.stock_status === MagentoProductStockStatusEnum.InStock,\n\n\t\t// TODO: implement\n\t\tparent_item_id: 0\n\t} : null\n}\n","import { DaffCartItemInputType, DaffCompositeCartItem, DaffCompositeCartItemOption } from '@daffodil/cart';\n\nimport { MagentoBundleCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\n\n/**\n * Transforms a MagentoBundleCartItem into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoBundleCartItem(bundleCartItem: MagentoBundleCartItem): DaffCompositeCartItem {\n\treturn bundleCartItem ? {\n\t\t...transformMagentoSimpleCartItem(bundleCartItem),\n\t\ttype: DaffCartItemInputType.Composite,\n\t\toptions: bundleCartItem.bundle_options.map(transformBundleCartItemOption)\n\t} : null\n}\n\nfunction transformBundleCartItemOption(option: MagentoBundleCartItem['bundle_options'][0]): DaffCompositeCartItemOption {\n\treturn {\n\t\toption_id: option.values[0].id,\n\t\toption_label: option.label,\n\t\tvalue_label: option.values[0].label\n\t}\n}\n","import { DaffCartItemInputType, DaffConfigurableCartItem, DaffConfigurableCartItemAttribute } from '@daffodil/cart';\n\nimport { MagentoConfigurableCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\n\n/**\n * Transforms a MagentoConfigurableCartItem into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoConfigurableCartItem(configurableCartItem: MagentoConfigurableCartItem): DaffConfigurableCartItem {\n\treturn configurableCartItem ? {\n\t\t...transformMagentoSimpleCartItem(configurableCartItem),\n\t\ttype: DaffCartItemInputType.Configurable,\n\t\tattributes: configurableCartItem.configurable_options.map(transformConfigurableCartItemAttribute)\n\t} : null\n}\n\nfunction transformConfigurableCartItemAttribute(option: MagentoConfigurableCartItem['configurable_options'][0]): DaffConfigurableCartItemAttribute {\n\treturn {\n\t\tattribute_label: option.option_label,\n\t\tvalue_label: option.value_label\n\t}\n}\n","import { DaffCartItem } from '@daffodil/cart';\n\nimport { MagentoCartItem, MagentoCartItemTypeEnum, MagentoBundleCartItem, MagentoConfigurableCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\nimport { transformMagentoBundleCartItem } from './bundle-cart-item-transformer';\nimport { transformMagentoConfigurableCartItem } from './configurable-cart-item-transformer';\n\n/**\n * Transforms the MagentoCartItem into a DaffCartItem.\n * @param cartItem a MagentoCartItem\n */\nexport function transformMagentoCartItem(cartItem: MagentoCartItem): DaffCartItem {\n\tswitch(cartItem.__typename) {\n\t\tcase MagentoCartItemTypeEnum.Bundle:\n\t\t\treturn transformMagentoBundleCartItem(<MagentoBundleCartItem>cartItem);\n\t\tcase MagentoCartItemTypeEnum.Configurable:\n\t\t\treturn transformMagentoConfigurableCartItem(<MagentoConfigurableCartItem>cartItem);\n\t\tdefault:\n\t\t\treturn transformMagentoSimpleCartItem(cartItem);\n\t}\n}\n","import { daffAdd } from '@daffodil/core';\nimport { DaffCart, DaffCartTotalTypeEnum, DaffCartTotal } from '@daffodil/cart';\n\nimport { MagentoCart } from '../../models/responses/cart';\n\nexport function transformCartTotals(cart: Partial<MagentoCart>): {totals: DaffCart['totals']} {\n\tconst totalTax = cart.prices.applied_taxes ? cart.prices.applied_taxes.reduce((acc, tax) => (daffAdd(acc, tax.amount.value)), 0) : 0;\n\treturn {\n\t\ttotals: [\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.grandTotal,\n\t\t\t\tlabel: 'Grand Total',\n\t\t\t\tvalue: cart.prices.grand_total.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalExcludingTax,\n\t\t\t\tlabel: 'Subtotal Excluding Tax',\n\t\t\t\tvalue: cart.prices.subtotal_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalIncludingTax,\n\t\t\t\tlabel: 'Subtotal Including Tax',\n\t\t\t\tvalue: cart.prices.subtotal_including_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalWithDiscountExcludingTax,\n\t\t\t\tlabel: 'Subtotal with Discount Excluding Tax',\n\t\t\t\tvalue: cart.prices.subtotal_with_discount_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalWithDiscountIncludingTax,\n\t\t\t\tlabel: 'Subtotal with Discount Including Tax',\n\t\t\t\tvalue: cart.prices.subtotal_with_discount_excluding_tax.value ?\n\t\t\t\t\t\t\t\tdaffAdd(cart.prices.subtotal_with_discount_excluding_tax.value, totalTax) :\n\t\t\t\t\t\t\t\tcart.prices.subtotal_with_discount_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.tax,\n\t\t\t\tlabel: 'Tax',\n\t\t\t\tvalue: totalTax\n\t\t\t},\n\t\t\t...transformDiscounts(cart.prices.discounts),\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.shipping,\n\t\t\t\tlabel: 'Shipping',\n\t\t\t\tvalue: validateSelectedShippingAddress(cart) ? cart.shipping_addresses[0].selected_shipping_method.amount.value : null\n\t\t\t}\n\t\t],\n\t}\n}\n\nfunction transformDiscounts(discounts): DaffCartTotal[] {\n\treturn discounts ? discounts.map(discount => ({\n\t\tname: DaffCartTotalTypeEnum.discount,\n\t\tlabel: discount.label,\n\t\tvalue: discount.amount.value\n\t})) : [];\n}\n\nfunction validateSelectedShippingAddress(cart: Partial<MagentoCart>): boolean {\n  // TODO: optional chaining\n\treturn !!cart.shipping_addresses && !!cart.shipping_addresses[0] && !!cart.shipping_addresses[0].selected_shipping_method &&\n\t\t!!cart.shipping_addresses[0].selected_shipping_method.amount;\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCart } from '@daffodil/cart';\n\nimport { DaffMagentoCartPaymentTransformer } from './cart-payment.service';\nimport { DaffMagentoCartShippingInformationTransformer } from './cart-shipping-information.service';\nimport { DaffMagentoShippingAddressTransformer } from './shipping-address.service';\nimport { DaffMagentoBillingAddressTransformer } from './billing-address.service';\nimport { MagentoCart } from '../../models/responses/cart';\nimport { DaffMagentoCartShippingRateTransformer } from './cart-shipping-rate.service';\nimport { daffMagentoCouponTransform } from './cart-coupon';\nimport { transformMagentoCartItem } from './cart-item/cart-item-transformer';\nimport { transformCartTotals } from './cart-totals-transformer';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartTransformer {\n  constructor(\n    public shippingAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public billingAddressTransformer: DaffMagentoBillingAddressTransformer,\n    public paymentTransformer: DaffMagentoCartPaymentTransformer,\n    public shippingInformationTransformer: DaffMagentoCartShippingInformationTransformer,\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer\n  ) {}\n\n  private transformShippingAddress(cart: MagentoCart): {shipping_address: DaffCart['shipping_address']} {\n    return {\n      shipping_address: cart.shipping_addresses[0]\n        ? this.shippingAddressTransformer.transform({\n          ...cart.shipping_addresses[0],\n          email: cart.email\n        })\n        : null\n    }\n  }\n\n  private transformBillingAddress(cart: MagentoCart): {billing_address: DaffCart['billing_address']} {\n    return {\n      billing_address: cart.billing_address\n        ? this.billingAddressTransformer.transform({\n          ...cart.billing_address,\n          email: cart.email\n        })\n        : null\n    }\n  }\n\n  private transformCartItems(cart: MagentoCart): {items: DaffCart['items']} {\n    return {\n      items: cart.items.map(transformMagentoCartItem),\n    }\n  }\n\n  private transformTotals(cart: MagentoCart): {\n    grand_total: DaffCart['grand_total'],\n    subtotal: DaffCart['subtotal'],\n  } {\n    return {\n      grand_total: cart.prices.grand_total.value,\n      subtotal: cart.prices.subtotal_excluding_tax.value,\n    }\n  }\n\n  private transformCoupons(cart: MagentoCart): {coupons: DaffCart['coupons']} {\n    return {\n      coupons: cart.applied_coupons\n        ? cart.applied_coupons.map(daffMagentoCouponTransform)\n        : []\n    }\n  }\n\n  private transformPayment(cart: MagentoCart): {payment: DaffCart['payment']} {\n    return {\n      payment: this.paymentTransformer.transform(cart.selected_payment_method),\n    }\n  }\n\n  private transformShippingInformation(cart: MagentoCart): {shipping_information: DaffCart['shipping_information']} {\n    return {\n      shipping_information: cart.shipping_addresses[0]\n        ? this.shippingInformationTransformer.transform(cart.shipping_addresses[0].selected_shipping_method)\n        : null\n    }\n  }\n\n  private transformShippingMethods(cart: MagentoCart): {available_shipping_methods: DaffCart['available_shipping_methods']} {\n\t\treturn {\n      available_shipping_methods: cart.shipping_addresses[0] && cart.shipping_addresses[0].available_shipping_methods\n        ? cart.shipping_addresses[0].available_shipping_methods.map(method =>\n          this.shippingRateTransformer.transform(method)\n        )\n        : []\n    }\n  }\n\n  private transformPaymentMethods(cart: MagentoCart): {available_payment_methods: DaffCart['available_payment_methods']} {\n    return {\n      available_payment_methods: cart.available_payment_methods.map(method =>\n        this.paymentTransformer.transform(method)\n      )\n    }\n  }\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCart.\n   * @param cart the cart from a magento cart query.\n   */\n  transform(cart: MagentoCart): DaffCart {\n    return cart ? {\n      // add the magento cart in this way to avoid 'object literal may only specify known proerties'\n      extra_attributes: cart,\n\n      ...this.transformCartItems(cart),\n      ...this.transformBillingAddress(cart),\n      ...this.transformShippingAddress(cart),\n      ...this.transformCoupons(cart),\n      ...this.transformPayment(cart),\n      ...this.transformTotals(cart),\n      ...transformCartTotals(cart),\n      ...this.transformShippingInformation(cart),\n      ...this.transformShippingMethods(cart),\n      ...this.transformPaymentMethods(cart),\n\n      id: cart.id\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoCartAddressInput } from '../../models/requests/cart-address';\n\n@Injectable()\nexport class DaffMagentoCartAddressInputTransformer {\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoCartAddressInput {\n    return {\n      city: cartAddress.city,\n      country_code: cartAddress.country,\n      firstname: cartAddress.firstname,\n      lastname: cartAddress.lastname,\n      postcode: cartAddress.postcode,\n      region: String(cartAddress.region),\n      save_in_address_book: false,\n      street: [cartAddress.street],\n      telephone: cartAddress.telephone,\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoShippingAddressInput } from '../../models/requests/shipping-address';\nimport { DaffMagentoCartAddressInputTransformer } from './cart-address.service';\n\n@Injectable()\nexport class DaffMagentoShippingAddressInputTransformer {\n  constructor(private cartAddressTransformer: DaffMagentoCartAddressInputTransformer) {}\n\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoShippingAddressInput {\n    return cartAddress.address_id\n      ? {\n        address: null,\n        customer_address_id: cartAddress.address_id,\n      }\n      : {\n        address: this.cartAddressTransformer.transform(cartAddress),\n        customer_address_id: null,\n      }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoBillingAddressInput } from '../../models/requests/billing-address';\nimport { DaffMagentoCartAddressInputTransformer } from './cart-address.service';\n\n@Injectable()\nexport class DaffMagentoBillingAddressInputTransformer {\n  constructor(private cartAddressTransformer: DaffMagentoCartAddressInputTransformer) {}\n\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoBillingAddressInput {\n    return cartAddress.address_id\n      ? {\n        address: null,\n        customer_address_id: cartAddress.address_id,\n      }\n      : {\n        address: this.cartAddressTransformer.transform(cartAddress),\n        customer_address_id: null,\n      }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartItem } from '@daffodil/cart';\n\nimport { MagentoCartItemUpdateInput } from '../../models/requests/cart-item-update';\n\n@Injectable()\nexport class DaffMagentoCartItemUpdateInputTransformer {\n  transform(item: Partial<DaffCartItem>): MagentoCartItemUpdateInput {\n    return {\n      quantity: item.qty,\n      cart_item_id: Number(item.item_id)\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\n\nimport { MagentoPaymentMethodInput } from '../../models/requests/payment-method';\n\n@Injectable()\nexport class DaffMagentoPaymentMethodInputTransformer {\n  transform(payment: Partial<DaffCartPaymentMethod>): MagentoPaymentMethodInput {\n    return {\n\t\t\t...payment.payment_info\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\n\nimport { MagentoShippingMethodInput } from '../../models/requests/shipping-method';\n\n@Injectable()\nexport class DaffMagentoShippingMethodInputTransformer {\n  transform(method: Partial<DaffCartShippingRate>): MagentoShippingMethodInput {\n    return {\n      carrier_code: method.carrier,\n      method_code: method.method_code\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { DocumentNode } from 'graphql';\n\n/**\n * An multi-provider injection token for providing extra GraphQL fragments that will be spread into cart queries.\n * This can be used to retrieve additional data that is not covered by the standard Daffodil interfaces.\n * The data will appear in DaffCart#extra_attributes.\n *\n * Fragment structure is platform-specific and this feature should be used with care.\n */\nexport const DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS = new InjectionToken<DocumentNode[]>('DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS', {factory: () => []});\n","import gql from 'graphql-tag';\n\nexport const moneyFragment = gql`\n  fragment money on Money {\n    value\n    currency\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const cartCouponFragment = gql`\n  fragment cartCoupon on AppliedCoupon {\n    code\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const cartAddressFragment = gql`\n  fragment cartAddress on CartAddressInterface {\n    city\n    country {\n      code\n      label\n    }\n    firstname\n    lastname\n    postcode\n    region {\n      code\n      label\n    }\n    street\n    telephone\n    company\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { magentoProductFragment } from '@daffodil/product';\n\nimport { moneyFragment } from './money';\n\nexport const cartItemFragment = gql`\n  fragment cartItem on CartItemInterface {\n\t\t__typename\n    id\n    product {\n      ...product\n    }\n    quantity\n    prices {\n      price {\n        ...money\n      }\n      row_total {\n        ...money\n      }\n      row_total_including_tax {\n        ...money\n      }\n      total_item_discount {\n        ...money\n      }\n\t\t}\n\t\t...on ConfigurableCartItem {\n\t\t\tconfigurable_options {\n\t\t\t\toption_label\n\t\t\t\tvalue_label\n\t\t\t}\n\t\t}\n\t\t...on BundleCartItem {\n\t\t\tbundle_options {\n\t\t\t\tid\n\t\t\t\tlabel\n\t\t\t\ttype\n\t\t\t\tvalues {\n\t\t\t\t\tid\n\t\t\t\t\tlabel\n\t\t\t\t\tprice\n\t\t\t\t\tquantity\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  }\n  ${magentoProductFragment}\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const availablePaymentMethodFragment = gql`\n  fragment availablePaymentMethod on AvailablePaymentMethod {\n    code\n    title\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const selectedPaymentMethodFragment = gql`\n  fragment selectedPaymentMethod on SelectedPaymentMethod {\n    code\n    title\n    purchase_order_number\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { moneyFragment } from './money';\n\nexport const availableShippingMethodFragment = gql`\n  fragment availableShippingMethod on AvailableShippingMethod {\n    carrier_code\n    method_code\n    carrier_title\n    method_title\n    amount {\n      ...money\n    }\n  }\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { moneyFragment } from './money';\n\nexport const selectedShippingMethodFragment = gql`\n  fragment selectedShippingMethod on SelectedShippingMethod {\n    carrier_code\n    method_code\n    carrier_title\n    method_title\n    amount {\n      ...money\n    }\n  }\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\nimport { moneyFragment } from './money';\n\nexport const pricesFragment = gql`\n  fragment prices on CartPrices {\n\t\tgrand_total {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_excluding_tax {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_including_tax {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t...money\n\t\t}\n\t\tapplied_taxes {\n\t\t\tamount {\n\t\t\t\t...money\n\t\t\t}\n\t\t\tlabel\n\t\t}\n\t\tdiscounts {\n\t\t\tamount {\n\t\t\t\t...money\n\t\t\t}\n\t\t\tlabel\n\t\t}\n\t}\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { cartAddressFragment } from './cart-address';\nimport { availablePaymentMethodFragment } from './available-payment-method';\nimport { selectedPaymentMethodFragment } from './selected-payment-method';\nimport { cartItemFragment } from './cart-item';\nimport { cartCouponFragment } from './cart-coupon';\nimport { selectedShippingMethodFragment } from './selected-shipping-method';\nimport { pricesFragment } from './prices';\n\nexport const cartFragment = gql`\n  fragment cart on Cart {\n    id\n    email\n    billing_address {\n      ...cartAddress\n    }\n    shipping_addresses {\n      ...cartAddress\n      ... on ShippingCartAddress {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n    }\n    items {\n      ...cartItem\n    }\n    available_payment_methods {\n      ...availablePaymentMethod\n    }\n    selected_payment_method {\n      ...selectedPaymentMethod\n    }\n    applied_coupons {\n      ...cartCoupon\n    }\n    prices {\n      ...prices\n    }\n  }\n  ${cartAddressFragment}\n  ${availablePaymentMethodFragment}\n  ${selectedPaymentMethodFragment}\n  ${selectedShippingMethodFragment}\n  ${cartItemFragment}\n  ${pricesFragment}\n  ${cartCouponFragment}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/public_api';\n\nexport const listCartItems = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListCartItems($cartId: String!) {\n    cart(cart_id: $cartId) {\n      items {\n        ...cartItem\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartItemFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const addSimpleCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddSimpleCartItem($cartId: String!, $input: CartItemInput!) {\n    addSimpleProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n        data: $input\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n\nexport const addBundleCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddBundleCartItem($cartId: String!, $input: CartItemInput!, $options: [BundleOptionInput]!) {\n    addBundleProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n\t\t\t\tdata: $input,\n\t\t\t\tbundle_options: $options\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n\nexport const addConfigurableCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddConfigurableCartItem($cartId: String!, $parentSku: String, $data: CartItemInput!) {\n    addConfigurableProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n\t\t\t\tparent_sku: $parentSku\n\t\t\t\tdata: $data,\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const removeCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation RemoveCartItem($cartId: String!, $itemId: Int!) {\n    removeItemFromCart(input: {\n      cart_id: $cartId,\n      cart_item_id: $itemId\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateCartItem($cartId: String!, $input: CartItemUpdateInput!) {\n    updateCartItems(input: {\n      cart_id: $cartId\n      cart_items: [$input]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { availablePaymentMethodFragment } from './fragments/public_api';\n\nexport const listPaymentMethods = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListPaymentMethods($cartId: String!) {\n    cart(cart_id: $cartId) {\n      available_payment_methods {\n        ...availablePaymentMethod\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${availablePaymentMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { selectedPaymentMethodFragment } from './fragments/public_api';\n\nexport const getSelectedPaymentMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetSelectedPaymentMethod($cartId: String!) {\n    cart(cart_id: $cartId) {\n      selected_payment_method {\n        ...selectedPaymentMethod\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${selectedPaymentMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethod($cartId: String!, $payment: PaymentMethodInput!) {\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethodWithBilling = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethodWithBilling(\n    $cartId: String!,\n    $payment: PaymentMethodInput!,\n    $address: BillingAddressInput!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        id\n      }\n    }\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethodWithBillingAndEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethodWithBillingAndEmail(\n    $cartId: String!,\n    $payment: PaymentMethodInput!,\n    $address: BillingAddressInput!,\n    $email: String!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        id\n      }\n    }\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        id\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { availableShippingMethodFragment } from './fragments/public_api';\n\nexport const listShippingMethods = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListShippingMethods($cartId: String!) {\n    cart(cart_id: $cartId) {\n      id\n      shipping_addresses {\n        available_shipping_methods {\n          ...availableShippingMethod\n        }\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${availableShippingMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { selectedShippingMethodFragment } from './fragments/public_api';\n\nexport const getSelectedShippingMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetSelectedShippingMethod($cartId: String!) {\n    cart(cart_id: $cartId) {\n      shipping_addresses {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${selectedShippingMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedShippingMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedShippingMethod($cartId: String!, $method: ShippingMethodInput!) {\n    setShippingMethodsOnCart(input: {\n      cart_id: $cartId\n      shipping_methods: [$method]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartAddressFragment } from './fragments/public_api';\n\nexport const getBillingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetBillingAddress($cartId: String!) {\n    cart(cart_id: $cartId) {\n      billing_address {\n        ...cartAddress\n      }\n      email\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartAddressFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateBillingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateBillingAddress(\n    $cartId: String!,\n    $address: BillingAddressInput!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateBillingAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateBillingAddress(\n    $cartId: String!,\n    $address: BillingAddressInput!,\n    $email: String!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        email\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartAddressFragment } from './fragments/public_api';\n\nexport const getShippingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetShippingAddress($cartId: String!) {\n    cart(cart_id: $cartId) {\n      shipping_addresses {\n        ...cartAddress\n      }\n      email\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartAddressFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateShippingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateShippingAddress(\n    $cartId: String!,\n    $address: ShippingAddressInput!\n  ) {\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [$address]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateShippingAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateShippingAddress(\n    $cartId: String!,\n    $address: ShippingAddressInput!,\n    $email: String!\n  ) {\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [$address]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        email\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\n/**\n * Update the shipping and billing address of the cart.\n * At the time of writing, Magento 2 processes compound queries in the order they are defined.\n * We rely on this fact and only use the return of the last query.\n * This helps us keep query complexity down and save some server CPU cycles.\n * Driver behavior is not guaranteed if Magento no longer processes compound queries in the order they are defined.\n */\nexport const updateAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateAddress($cartId: String!, $address: CartAddressInput!) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: {\n        address: $address\n      }\n    }) {\n      cart {\n        id\n      }\n    }\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [{\n        address: $address\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\n/**\n * Update the shipping and billing address of the cart.\n * At the time of writing, Magento 2 processes compound queries in the order they are defined.\n * We rely on this fact and only use the return of the last query.\n * This helps us keep query complexity down and save some server CPU cycles.\n * Driver behavior is not guaranteed if Magento no longer processes compound queries in the order they are defined.\n */\nexport const updateAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateAddress($cartId: String!, $address: CartAddressInput!, $email: String!) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: {\n        address: $address\n      }\n    }) {\n      cart {\n        id\n      }\n    }\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [{\n        address: $address\n      }]\n    }) {\n      cart {\n        id\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const getCart = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetCart($cartId: String!) {\n    cart(cart_id: $cartId) {\n      ...cart\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import gql from 'graphql-tag';\n\nexport const createCart = gql`\n  mutation CreateCart {\n    createEmptyCart\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const placeOrder = gql`\n  mutation PlaceOrder($cartId: String!) {\n    placeOrder(\n      input: {\n        cart_id: $cartId\n      }\n    ) {\n      order {\n        order_number\n      }\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { cartAddressFragment } from './cart-address';\nimport { selectedShippingMethodFragment } from './selected-shipping-method';\nimport { pricesFragment } from './prices';\n\nexport const cartTotalsFragment = gql`\n  fragment cartTotals on Cart {\n    id\n    shipping_addresses {\n      ...cartAddress\n      ... on ShippingCartAddress {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n    }\n    prices {\n      ...prices\n    }\n  }\n  ${cartAddressFragment}\n  ${selectedShippingMethodFragment}\n  ${pricesFragment}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/cart-item';\nimport { cartCouponFragment } from './fragments/public_api';\nimport { cartTotalsFragment } from './fragments/cart-totals';\n\nexport const applyCoupon = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation ApplyCoupon($cartId: String!, $couponCode: String!) {\n    applyCouponToCart(\n      input: {\n        cart_id: $cartId,\n        coupon_code: $couponCode\n      }\n    ) {\n      cart {\n        id\n        items {\n          ...cartItem\n        }\n        applied_coupons {\n          ...cartCoupon\n\t\t\t\t}\n\t\t\t\t...cartTotals\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartItemFragment}\n\t${cartCouponFragment}\n\t${cartTotalsFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartCouponFragment } from './fragments/public_api';\n\nexport const listCartCoupons = (extraCartFragments: DocumentNode[] = []) => gql`\n  query listCartCoupons($cartId: String!) {\n    cart(cart_id: $cartId) {\n      applied_coupons {\n\t\t\t\t...cartCoupon\n\t\t\t}\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartCouponFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/cart-item';\nimport { cartCouponFragment } from './fragments/public_api';\nimport { cartTotalsFragment } from './fragments/cart-totals';\n\nexport const removeAllCoupons = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation RemoveAllCoupons($cartId: String!) {\n    removeCouponFromCart(\n      input: {\n        cart_id: $cartId\n      }\n    ) {\n      cart {\n        id\n        items {\n          ...cartItem\n        }\n        applied_coupons {\n          ...cartCoupon\n\t\t\t\t}\n\t\t\t\t...cartTotals\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartItemFragment}\n\t${cartCouponFragment}\n\t${cartTotalsFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","export enum MagentoCartGraphQlErrorCode {\n\tCART_NOT_FOUND = 'graphql-no-such-entity',\n\tBAD_INPUT = 'graphql-input',\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffBadInputError } from '@daffodil/driver';\nimport { DaffCartNotFoundError, DaffCartDriverErrorCodes } from '@daffodil/cart/driver';\n\nimport { MagentoCartGraphQlErrorCode } from './codes';\n\nexport const DaffCartMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoCartGraphQlErrorCode.CART_NOT_FOUND]: DaffCartNotFoundError,\n\t[MagentoCartGraphQlErrorCode.BAD_INPUT]: DaffBadInputError,\n};\n\nexport const DaffCartMagentoErrorMessageRegexMap = {\n  [DaffCartDriverErrorCodes.INVALID_COUPON_CODE]: /The coupon code isn\\'t valid/\n}\n","import { ApolloError } from 'apollo-client';\n\nimport { daffTransformMagentoError } from '@daffodil/driver/magento';\nimport { DaffCartDriverErrorMap } from '@daffodil/cart/driver';\n\nimport { DaffCartMagentoErrorMap, DaffCartMagentoErrorMessageRegexMap } from './map';\n\n\nfunction transformMagentoCartGraphQlError(error: ApolloError): Error {\n  // TODO: readdress this when we move to eslint\n  // tslint:disable-next-line\n  for (const code in DaffCartMagentoErrorMessageRegexMap) {\n    const matchIndex = error.graphQLErrors[0].message.search(DaffCartMagentoErrorMessageRegexMap[code]);\n\n    if (matchIndex > -1 && DaffCartDriverErrorMap[code]) {\n      return new DaffCartDriverErrorMap[code](error.message)\n    }\n  }\n\n  return daffTransformMagentoError(error, DaffCartMagentoErrorMap);\n};\n\nexport function transformCartMagentoError(error) {\n  // TODO: optional chaining\n  if (error.graphQLErrors && error.graphQLErrors.length) {\n\t\treturn transformMagentoCartGraphQlError(error);\n\t} else {\n\t\treturn daffTransformMagentoError(error, DaffCartMagentoErrorMap);\n\t}\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\n\nexport const DAFF_MAGENTO_CART_MUTATION_QUEUE = new InjectionToken('DAFF_MAGENTO_CART_MUTATION_QUEUE', {\n  providedIn: 'root',\n  factory: () => new DaffQueuedApollo(inject(Apollo))\n})\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartItem, DaffCartItemInput } from '@daffodil/cart';\nimport { DaffCartServiceInterface, DaffCartItemDriver, DaffCartItemServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { getCart, createCart } from './queries/public_api';\nimport { MagentoGetCartResponse } from './queries/responses/get-cart';\nimport { MagentoCreateCartResponse } from './queries/responses/create-cart';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartService implements DaffCartServiceInterface<DaffCart> {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n    @Inject(DaffCartItemDriver) private cartItemDriver: DaffCartItemServiceInterface<\n      DaffCartItem,\n      DaffCartItemInput,\n      DaffCart\n    >,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n  ) {}\n\n  get(cartId: string): Observable<DaffCart> {\n    return this.apollo.query<MagentoGetCartResponse>({\n      query: getCart(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      catchError((error: Error) => throwError(transformCartMagentoError(error))),\n      map(result => this.cartTransformer.transform(result.data.cart))\n    );\n  }\n\n  create(): Observable<{id: string}> {\n    return this.mutationQueue.mutate<MagentoCreateCartResponse>({mutation: createCart}).pipe(\n      map(result => ({id: result.data.createEmptyCart}))\n    )\n  }\n\n  addToCart(productId: string, qty: number): Observable<DaffCart> {\n    throw new Error('Method is deprecated. Use DaffCartItemServiceInterface#add instead.');\n  }\n\n  clear(cartId: string): Observable<Partial<DaffCart>> {\n    return this.cartItemDriver.list(cartId).pipe(\n      switchMap(items =>\n        forkJoin(...items.map(item =>\n          this.cartItemDriver.delete(cartId, item.item_id)\n        ))\n      ),\n\t\t\tswitchMap(() => this.get(cartId))\n    )\n\t}\n}\n","import { DaffCartItemInput, DaffCompositeCartItemInput, DaffCompositeCartItemInputOption, DaffConfigurableCartItemInput } from '@daffodil/cart';\n\nimport { MagentoCartItemInput, MagentoBundledCartItemInput, MagentoBundledCartItemOption, MagentoConfigurableCartItemInput } from '../../models/requests/cart-item';\n\nexport function transformCompositeCartItem(item: DaffCompositeCartItemInput): MagentoBundledCartItemInput {\n\treturn {\n\t\tinput: transformSimpleCartItem(item),\n\t\toptions: item.options ? item.options.map(transformCompositeCartItemOption) : []\n\t}\n}\n\nexport function transformSimpleCartItem(item: DaffCartItemInput): MagentoCartItemInput {\n\treturn {\n\t\tquantity: item.qty,\n\t\tsku: item.productId\n\t}\n}\n\nexport function transformConfigurableCartItem(item: DaffConfigurableCartItemInput): MagentoConfigurableCartItemInput {\n\treturn {\n\t\tparentSku: item.productId,\n\t\tdata: {\n\t\t\tquantity: item.qty,\n\t\t\tsku: String(item.variantId)\n\t\t},\n\t}\n}\n\nfunction transformCompositeCartItemOption(option: DaffCompositeCartItemInputOption): MagentoBundledCartItemOption {\n\treturn {\n\t\tid: Number(option.code),\n\t\tquantity: option.quantity,\n\t\tvalue: [option.value]\n\t}\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartItem, DaffCartItemInput, DaffCart, DaffCartItemInputType, DaffCompositeCartItemInput, DaffConfigurableCartItemInput } from '@daffodil/cart';\nimport { DaffCartItemServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport {\n\tlistCartItems,\n\taddConfigurableCartItem,\n\taddBundleCartItem,\n\taddSimpleCartItem,\n  removeCartItem,\n  updateCartItem\n} from './queries/public_api';\nimport { MagentoConfigurableCartItemInput } from './models/requests/cart-item';\nimport { transformCompositeCartItem, transformSimpleCartItem, transformConfigurableCartItem } from './transforms/inputs/cart-item-input-transformers';\nimport { MagentoListCartItemsResponse } from './queries/responses/list-cart-items';\nimport { MagentoAddSimpleCartItemResponse, MagentoAddBundleCartItemResponse, MagentoAddConfigurableCartItemResponse } from './queries/responses/add-cart-item';\nimport { MagentoRemoveCartItemResponse } from './queries/responses/remove-cart-item';\nimport { DaffMagentoCartItemUpdateInputTransformer } from './transforms/inputs/cart-item-update.service';\nimport { MagentoUpdateCartItemResponse } from './queries/responses/public_api';\nimport { transformMagentoCartItem } from './transforms/outputs/cart-item/cart-item-transformer';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartItemService implements DaffCartItemServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public cartItemUpdateInputTransformer: DaffMagentoCartItemUpdateInputTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartItem[]> {\n    return this.apollo.query<MagentoListCartItemsResponse>({\n      query: listCartItems(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.items.map(transformMagentoCartItem))\n    )\n  }\n\n  get(cartId: string, itemId: number): Observable<DaffCartItem> {\n    return this.list(cartId).pipe(\n      map(items => items.find(item => Number(item.item_id) === itemId))\n    )\n  }\n\n  add(cartId: string, cartItemInput: DaffCartItemInput): Observable<Partial<DaffCart>> {\n\t\tswitch(cartItemInput.type) {\n\t\t\tcase (DaffCartItemInputType.Composite):\n\t\t\t\treturn this.addBundledProduct(cartId, <DaffCompositeCartItemInput>cartItemInput);\n\t\t\tcase (DaffCartItemInputType.Configurable):\n\t\t\t\treturn this.addConfigurableProduct(cartId, <DaffConfigurableCartItemInput>cartItemInput);\n\t\t\tdefault:\n\t\t\t\treturn this.addSimpleProduct(cartId, cartItemInput);\n\t\t}\n  }\n\n  update(cartId: string, itemId: number, changes: Partial<DaffCartItem>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateCartItemResponse>({\n      mutation: updateCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        input: this.cartItemUpdateInputTransformer.transform({\n          ...changes,\n          item_id: itemId\n        })\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.updateCartItems.cart))\n    )\n  }\n\n  delete(cartId: string, itemId: number): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoRemoveCartItemResponse>({\n      mutation: removeCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        itemId\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.removeItemFromCart.cart))\n    )\n  }\n\n\tprivate addBundledProduct(cartId: string, cartItemInput: DaffCompositeCartItemInput): Observable<Partial<DaffCart>> {\n\t\tconst bundleInput = transformCompositeCartItem(cartItemInput);\n\t\treturn this.mutationQueue.mutate<MagentoAddBundleCartItemResponse>({\n      mutation: addBundleCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n\t\t\t\tinput: bundleInput.input,\n\t\t\t\toptions: bundleInput.options\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addBundleProductsToCart.cart))\n    )\n\t}\n\n\tprivate addConfigurableProduct(cartId: string, cartItemInput: DaffConfigurableCartItemInput): Observable<Partial<DaffCart>> {\n\t\tconst configurableInput: MagentoConfigurableCartItemInput = transformConfigurableCartItem(cartItemInput);\n\t\treturn this.mutationQueue.mutate<MagentoAddConfigurableCartItemResponse>({\n      mutation: addConfigurableCartItem(this.extraCartFragments),\n      variables: {\n\t\t\t\tcartId,\n\t\t\t\tparentSku: configurableInput.parentSku,\n\t\t\t\tdata: configurableInput.data\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addConfigurableProductsToCart.cart))\n    )\n\t}\n\n\tprivate addSimpleProduct(cartId: string, cartItemInput: DaffCartItemInput): Observable<Partial<DaffCart>> {\n\t\treturn this.mutationQueue.mutate<MagentoAddSimpleCartItemResponse>({\n      mutation: addSimpleCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        input: transformSimpleCartItem(cartItemInput)\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addSimpleProductsToCart.cart))\n    )\n\t}\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable, throwError } from 'rxjs';\nimport { map, mapTo, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartPaymentMethod, DaffCart, DaffCartAddress } from '@daffodil/cart';\nimport { DaffCartPaymentServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport {\n  getSelectedPaymentMethod,\n  setSelectedPaymentMethod,\n  setSelectedPaymentMethodWithBilling,\n  setSelectedPaymentMethodWithBillingAndEmail\n} from './queries/public_api';\nimport { DaffMagentoPaymentMethodInputTransformer } from './transforms/inputs/payment-method.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport {\n  MagentoGetSelectedPaymentMethodResponse,\n  MagentoSetSelectedPaymentMethodResponse,\n  MagentoSetSelectedPaymentMethodWithBillingResponse,\n  MagentoSetSelectedPaymentMethodWithBillingAndEmailResponse\n} from './queries/responses/public_api';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentService implements DaffCartPaymentServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n    public paymentTransformer: DaffMagentoCartPaymentTransformer,\n    public paymentInputTransformer: DaffMagentoPaymentMethodInputTransformer,\n    public cartAddressInputTransformer: DaffMagentoBillingAddressInputTransformer,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n  ) {}\n\n  get(cartId: string): Observable<DaffCartPaymentMethod> {\n    return this.apollo.query<MagentoGetSelectedPaymentMethodResponse>({\n      query: getSelectedPaymentMethod(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => this.paymentTransformer.transform(result.data.cart.selected_payment_method))\n    );\n  }\n\n  update(cartId: string, payment: Partial<DaffCartPaymentMethod>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodResponse>({\n      mutation: setSelectedPaymentMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: this.paymentInputTransformer.transform(payment)\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.setPaymentMethodOnCart.cart))\n    )\n  }\n\n  updateWithBilling(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email\n      ? this.updateWithBillingAddressAndEmail(cartId, payment, address)\n      : this.updateWithBillingAddress(cartId, payment, address)\n  }\n\n  remove(cartId: string): Observable<void> {\n    return this.mutationQueue.mutate({\n      mutation: setSelectedPaymentMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: {code: ''}\n      }\n    }).pipe(\n      mapTo(undefined)\n    )\n  }\n\n  private updateWithBillingAddress(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodWithBillingResponse>({\n      mutation: setSelectedPaymentMethodWithBilling(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: this.paymentInputTransformer.transform(payment),\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setPaymentMethodOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateWithBillingAddressAndEmail(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodWithBillingAndEmailResponse>({\n      mutation: setSelectedPaymentMethodWithBillingAndEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        payment: this.paymentInputTransformer.transform(payment),\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setGuestEmailOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\nimport { DaffCartPaymentMethodsServiceInterface } from '@daffodil/cart/driver';\n\nimport { listPaymentMethods } from './queries/public_api';\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport { MagentoListPaymentMethodsResponse } from './queries/responses/list-payment-methods';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentMethodsService implements DaffCartPaymentMethodsServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public paymentTransformer: DaffMagentoCartPaymentTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartPaymentMethod[]> {\n    return this.apollo.query<MagentoListPaymentMethodsResponse>({\n      query: listPaymentMethods(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.available_payment_methods.map(item => this.paymentTransformer.transform(item)))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartBillingAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  getBillingAddress,\n  updateBillingAddress,\n  updateBillingAddressWithEmail\n} from './queries/public_api';\nimport {\n  MagentoGetBillingAddressResponse,\n  MagentoUpdateBillingAddressResponse,\n  MagentoUpdateBillingAddressWithEmailResponse\n} from './queries/responses/public_api';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoBillingAddressTransformer } from './transforms/outputs/billing-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartBillingAddressService implements DaffCartBillingAddressServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public billingAddressTransformer: DaffMagentoBillingAddressTransformer,\n    public billingAddressInputTransformer: DaffMagentoBillingAddressInputTransformer\n  ) {}\n\n  get(cartId: string): Observable<DaffCartAddress> {\n    return this.apollo.query<MagentoGetBillingAddressResponse>({\n      query: getBillingAddress(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.billing_address\n        ? this.billingAddressTransformer.transform({\n          ...result.data.cart.billing_address,\n          email: result.data.cart.email\n        })\n        : null\n      )\n    )\n  }\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateBillingAddressResponse>({\n      mutation: updateBillingAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.billingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setBillingAddressOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateBillingAddressWithEmailResponse>({\n      mutation: updateBillingAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.billingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform({\n        ...resp.data.setBillingAddressOnCart.cart,\n        email: resp.data.setGuestEmailOnCart.cart.email\n      })),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartShippingAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  getShippingAddress,\n  updateShippingAddress,\n  updateShippingAddressWithEmail,\n} from './queries/public_api';\nimport { DaffMagentoShippingAddressInputTransformer } from './transforms/inputs/shipping-address.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport {\n  MagentoGetShippingAddressResponse,\n  MagentoUpdateShippingAddressResponse,\n  MagentoUpdateShippingAddressWithEmailResponse,\n} from './queries/responses/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for a cart's shipping address.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingAddressService implements DaffCartShippingAddressServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public shippingAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public shippingAddressInputTransformer: DaffMagentoShippingAddressInputTransformer\n  ) {}\n\n  get(cartId: string): Observable<DaffCartAddress> {\n    return this.apollo.query<MagentoGetShippingAddressResponse>({\n      query: getShippingAddress(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0]\n        ? this.shippingAddressTransformer.transform({\n          ...result.data.cart.shipping_addresses[0],\n          email: result.data.cart.email\n        })\n        : null\n      )\n    )\n  }\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateShippingAddressResponse>({\n      mutation: updateShippingAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.shippingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setShippingAddressesOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateShippingAddressWithEmailResponse>({\n      mutation: updateShippingAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.shippingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform({\n        ...resp.data.setShippingAddressesOnCart.cart,\n        email: resp.data.setGuestEmailOnCart.cart.email\n      })),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\nimport { DaffCartShippingMethodsServiceInterface } from '@daffodil/cart/driver';\n\nimport { listShippingMethods } from './queries/public_api';\nimport { MagentoListShippingMethodsResponse } from './queries/responses/list-shipping-methods';\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for carts' shipping methods.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingMethodsService implements DaffCartShippingMethodsServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartShippingRate[]> {\n    return this.apollo.query<MagentoListShippingMethodsResponse>({\n      query: listShippingMethods(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0].available_shipping_methods.map(item =>\n        this.shippingRateTransformer.transform(item)\n      ))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartShippingRate, DaffCart } from '@daffodil/cart';\nimport { DaffCartShippingInformationServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport {\n  getSelectedShippingMethod,\n  setSelectedShippingMethod,\n  listShippingMethods\n} from './queries/public_api';\nimport { DaffMagentoShippingMethodInputTransformer } from './transforms/inputs/shipping-method.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { MagentoGetSelectedShippingMethodResponse, MagentoSetSelectedShippingMethodResponse, MagentoListShippingMethodsResponse } from './queries/responses/public_api';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingInformationService implements DaffCartShippingInformationServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer,\n    public shippingMethodInputTransformer: DaffMagentoShippingMethodInputTransformer,\n  ) {}\n\n  get(cartId: string): Observable<DaffCartShippingRate> {\n    return this.apollo.query<MagentoGetSelectedShippingMethodResponse>({\n      query: getSelectedShippingMethod(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0]\n        ? this.shippingRateTransformer.transform(result.data.cart.shipping_addresses[0].selected_shipping_method)\n        : null\n      )\n    );\n  }\n\n  update(cartId: string, shippingInfo: Partial<DaffCartShippingRate>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedShippingMethodResponse>({\n      mutation: setSelectedShippingMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        method: this.shippingMethodInputTransformer.transform(shippingInfo)\n      }\n    }).pipe(\n      switchMap(result =>\n        // because Magento only returns the selected shipping method for the mutation\n        // we have to manually refetch the available shipping methods\n        // with fetchPolicy: 'network-only' in order to skip the cache\n        this.apollo.query<MagentoListShippingMethodsResponse>({\n          query: listShippingMethods(this.extraCartFragments),\n          variables: {cartId},\n          fetchPolicy: 'network-only'\n        }).pipe(\n          map(shippingMethods => ({\n            ...this.cartTransformer.transform(result.data.setShippingMethodsOnCart.cart),\n            available_shipping_methods: shippingMethods.data.cart.shipping_addresses[0].available_shipping_methods.map(item =>\n              this.shippingRateTransformer.transform(item)\n            )\n          }))\n        )\n      )\n    )\n  }\n\n  delete(cartId: string, id?: string | number): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedShippingMethodResponse>({\n      mutation: setSelectedShippingMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        method: {\n          carrier_code: '',\n          method_code: ''\n        }\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.setShippingMethodsOnCart.cart))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  updateAddress,\n  updateAddressWithEmail,\n} from './queries/public_api';\nimport {\n  MagentoUpdateAddressResponse,\n  MagentoUpdateAddressWithEmailResponse,\n} from './queries/responses/public_api';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DaffMagentoCartAddressInputTransformer } from './transforms/inputs/cart-address.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartAddressService implements DaffCartAddressServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public cartAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public cartAddressInputTransformer: DaffMagentoCartAddressInputTransformer,\n  ) {}\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateAddressResponse>({\n      mutation: updateAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setShippingAddressesOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateAddressWithEmailResponse>({\n      mutation: updateAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setGuestEmailOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartOrderResult } from '@daffodil/cart';\nimport { DaffCartOrderServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { placeOrder } from './queries/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport { MagentoPlaceOrderResponse } from './queries/responses/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartOrderService implements DaffCartOrderServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n  ) {}\n\n  placeOrder(cartId: DaffCart['id'], payment?: any): Observable<DaffCartOrderResult> {\n    return this.mutationQueue.mutate<MagentoPlaceOrderResponse>({\n      mutation: placeOrder,\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => ({\n        id: result.data.placeOrder.order.order_number,\n        orderId: result.data.placeOrder.order.order_number,\n        cartId\n      })),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCart } from '@daffodil/cart';\n\nimport { MagentoCart } from '../../models/responses/cart';\nimport { daffMagentoCouponTransform } from './cart-coupon';\nimport { transformMagentoCartItem } from './cart-item/cart-item-transformer';\nimport { transformCartTotals } from './cart-totals-transformer';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartCouponResponseTransformer {\n\n  private transformCartItems(cart: Partial<MagentoCart>): {items: DaffCart['items']} {\n    return {\n      items: cart.items.map(transformMagentoCartItem),\n    }\n  }\n\n  private transformTotals(cart: Partial<MagentoCart>): {\n    grand_total: DaffCart['grand_total'],\n    subtotal: DaffCart['subtotal'],\n  } {\n    return {\n      grand_total: cart.prices.grand_total.value,\n      subtotal: cart.prices.subtotal_excluding_tax.value,\n    }\n  }\n\n  private transformCoupons(cart: Partial<MagentoCart>): {coupons: DaffCart['coupons']} {\n    return {\n      coupons: cart.applied_coupons\n        ? cart.applied_coupons.map(daffMagentoCouponTransform)\n        : []\n    }\n  }\n\n  /**\n   * Transforms the MagentoCart from the cart coupon operations into a DaffCart partial.\n   * @param cart the cart from a magento cart query.\n   */\n  transform(cart: Partial<MagentoCart>): Partial<DaffCart> {\n    return cart ? {\n      ...this.transformCartItems(cart),\n      ...this.transformCoupons(cart),\n      ...this.transformTotals(cart),\n      ...transformCartTotals(cart),\n\n      id: cart.id\n    } : null\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { DocumentNode } from 'graphql';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartCoupon } from '@daffodil/cart';\nimport { DaffCartCouponServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  listCartCoupons,\n  applyCoupon,\n  removeAllCoupons\n} from './queries/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport {\n  MagentoListCartCouponsResponse,\n  MagentoApplyCouponResponse,\n  MagentoRemoveAllCouponsResponse\n} from './queries/responses/public_api';\nimport { daffMagentoCouponTransform } from './transforms/outputs/cart-coupon';\nimport { DaffMagentoCartCouponResponseTransformer } from './transforms/outputs/cart-coupon-response.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartCouponService implements DaffCartCouponServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartCouponResponseTransformer,\n  ) {}\n\n  apply(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoApplyCouponResponse>({\n      mutation: applyCoupon(this.extraCartFragments),\n      variables: {\n        cartId,\n        couponCode: coupon.code\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.applyCouponToCart.cart)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n\n  list(cartId: DaffCart['id']): Observable<DaffCartCoupon[]> {\n    return this.mutationQueue.mutate<MagentoListCartCouponsResponse>({\n      mutation: listCartCoupons(this.extraCartFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => result.data.cart.applied_coupons.map(daffMagentoCouponTransform)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n\n  remove(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return this.removeAll(cartId)\n  }\n\n  removeAll(cartId: DaffCart['id']): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoRemoveAllCouponsResponse>({\n      mutation: removeAllCoupons(this.extraCartFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.removeCouponFromCart.cart)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffCartDriver, DaffCartItemDriver, DaffCartAddressDriver, DaffCartBillingAddressDriver, DaffCartShippingAddressDriver, DaffCartShippingMethodsDriver, DaffCartShippingInformationDriver, DaffCartPaymentDriver, DaffCartPaymentMethodsDriver, DaffCartOrderDriver, DaffCartCouponDriver } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartService } from './cart.service';\nimport { DaffMagentoCartItemService } from './cart-item.service';\nimport { DaffMagentoCartAddressService } from './cart-address.service';\nimport { DaffMagentoCartBillingAddressService } from './cart-billing-address.service';\nimport { DaffMagentoCartShippingAddressService } from './cart-shipping-address.service';\nimport { DaffMagentoCartShippingMethodsService } from './cart-shipping-methods.service';\nimport { DaffMagentoCartPaymentMethodsService } from './cart-payment-methods.service';\nimport { DaffMagentoCartPaymentService } from './cart-payment.service';\nimport { DaffMagentoCartShippingInformationService } from './cart-shipping-information.service';\nimport { DaffMagentoCartOrderService } from './cart-order.service';\nimport { DaffMagentoCartCouponService } from './cart-coupon.service';\n\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport { DaffMagentoBillingAddressTransformer } from './transforms/outputs/billing-address.service';\nimport { DaffMagentoCartAddressTransformer } from './transforms/outputs/cart-address.service';\nimport { DaffMagentoCartShippingInformationTransformer } from './transforms/outputs/cart-shipping-information.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport { DaffMagentoCartCouponResponseTransformer } from './transforms/outputs/cart-coupon-response.service';\n\nimport { DaffMagentoCartAddressInputTransformer } from './transforms/inputs/cart-address.service';\nimport { DaffMagentoShippingAddressInputTransformer } from './transforms/inputs/shipping-address.service';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { DaffMagentoCartItemUpdateInputTransformer } from './transforms/inputs/cart-item-update.service';\nimport { DaffMagentoPaymentMethodInputTransformer } from './transforms/inputs/payment-method.service';\nimport { DaffMagentoShippingMethodInputTransformer } from './transforms/inputs/shipping-method.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffCartMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffCartMagentoDriverModule> {\n    return {\n      ngModule: DaffCartMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffCartDriver,\n          useExisting: DaffMagentoCartService\n        },\n        {\n          provide: DaffCartItemDriver,\n          useExisting: DaffMagentoCartItemService\n        },\n        {\n          provide: DaffCartAddressDriver,\n          useExisting: DaffMagentoCartAddressService\n        },\n        {\n          provide: DaffCartBillingAddressDriver,\n          useExisting: DaffMagentoCartBillingAddressService\n        },\n        {\n          provide: DaffCartShippingAddressDriver,\n          useExisting: DaffMagentoCartShippingAddressService\n        },\n        {\n          provide: DaffCartShippingMethodsDriver,\n          useExisting: DaffMagentoCartShippingMethodsService\n        },\n        {\n          provide: DaffCartShippingInformationDriver,\n          useExisting: DaffMagentoCartShippingInformationService\n        },\n        {\n          provide: DaffCartPaymentDriver,\n          useExisting: DaffMagentoCartPaymentService\n        },\n        {\n          provide: DaffCartPaymentMethodsDriver,\n          useExisting: DaffMagentoCartPaymentMethodsService\n        },\n        {\n          provide: DaffCartOrderDriver,\n          useExisting: DaffMagentoCartOrderService\n        },\n        {\n          provide: DaffCartCouponDriver,\n          useExisting: DaffMagentoCartCouponService\n        },\n\n        // output transformers\n        DaffMagentoBillingAddressTransformer,\n        DaffMagentoCartAddressTransformer,\n        DaffMagentoCartPaymentTransformer,\n        DaffMagentoCartShippingInformationTransformer,\n        DaffMagentoCartShippingRateTransformer,\n        DaffMagentoCartTransformer,\n        DaffMagentoShippingAddressTransformer,\n        DaffMagentoCartCouponResponseTransformer,\n\n        // input transformers\n        DaffMagentoCartAddressInputTransformer,\n        DaffMagentoShippingAddressInputTransformer,\n        DaffMagentoBillingAddressInputTransformer,\n        DaffMagentoCartItemUpdateInputTransformer,\n        DaffMagentoPaymentMethodInputTransformer,\n        DaffMagentoShippingMethodInputTransformer,\n      ]\n    };\n  }\n}\n"]}