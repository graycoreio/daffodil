{"version":3,"sources":["ng://@daffodil/cart/driver/testing/drivers/cart/cart.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-item/cart-item.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-address/cart-address.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-billing-address/cart-billing-address.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-payment/cart-payment.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-payment-methods/cart-payment-methods.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-shipping-address/cart-shipping-address.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-shipping-information/cart-shipping-information.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-shipping-methods/cart-shipping-methods.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-order/cart-order.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-coupon/cart-coupon.service.ts","ng://@daffodil/cart/driver/testing/drivers/cart-driver.module.ts"],"names":["DaffTestingCartService","cartFactory","this","prototype","get","id","of","create","addToCart","productId","qty","clear","Injectable","args","providedIn","DaffCartFactory","DaffTestingCartItemService","cartItemFactory","list","cartId","createMany","itemId","add","input","update","item","delete","DaffCartItemFactory","DaffTestingCartAddressService","addressFactory","address","DaffCartAddressFactory","DaffTestingCartBillingAddressService","DaffTestingCartPaymentService","paymentFactory","payment","updateWithBilling","remove","undefined","DaffCartPaymentFactory","DaffTestingCartPaymentMethodsService","DaffTestingCartShippingAddressService","DaffTestingCartShippingInformationService","shippingInfoFactory","info","DaffCartShippingRateFactory","DaffTestingCartShippingMethodsService","DaffTestingCartOrderService","placeOrder","faker.random","number","orderId","DaffTestingCartCouponService","couponFactory","apply","coupon","removeAll","DaffCartCouponFactory","DaffTestingCartDriverModule","forRoot","ngModule","providers","provide","DaffCartDriver","useExisting","DaffCartItemDriver","DaffCartAddressDriver","DaffCartBillingAddressDriver","DaffCartShippingAddressDriver","DaffCartCouponDriver","DaffCartOrderDriver","DaffCartPaymentDriver","DaffCartShippingInformationDriver","DaffCartShippingMethodsDriver","DaffCartPaymentMethodsDriver","NgModule","imports","CommonModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart } from '@daffodil/cart';\nimport { DaffCartServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffCartFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartService implements DaffCartServiceInterface {\n  constructor(\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  get(id: number | string): Observable<DaffCart> {\n    return of(this.cartFactory.create());\n  }\n\n  addToCart(productId: string, qty: number): Observable<DaffCart> {\n    return of(this.cartFactory.create());\n  }\n\n  clear(id: number | string): Observable<DaffCart> {\n    return of(this.cartFactory.create());\n  }\n\n  create() {\n    return of({\n      id: this.cartFactory.create().id\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartItem, DaffCartItemInput } from '@daffodil/cart';\nimport {\n  DaffCartItemServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartFactory, DaffCartItemFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartItemService implements DaffCartItemServiceInterface {\n  constructor(\n    private cartItemFactory: DaffCartItemFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  list(cartId: DaffCart['id']): Observable<DaffCartItem[]> {\n    return of(this.cartItemFactory.createMany(3));\n  }\n\n  get(cartId: DaffCart['id'], itemId: DaffCartItem['item_id']): Observable<DaffCartItem> {\n    return of(this.cartItemFactory.create());\n  }\n\n  add(cartId: DaffCart['id'], input: DaffCartItemInput): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  update(\n    cartId: DaffCart['id'],\n    itemId: DaffCartItem['item_id'],\n    item: Partial<DaffCartItem>\n  ): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  delete(cartId: string, itemId: string): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartAddress } from '@daffodil/cart';\nimport {\n  DaffCartAddressServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartAddressFactory, DaffCartFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartAddressService implements DaffCartAddressServiceInterface {\n  constructor(\n    private addressFactory: DaffCartAddressFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  update(cartId: DaffCart['id'], address: DaffCartAddress): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartAddress } from '@daffodil/cart';\nimport {\n  DaffCartBillingAddressServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartAddressFactory, DaffCartFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartBillingAddressService implements DaffCartBillingAddressServiceInterface {\n  constructor(\n    private addressFactory: DaffCartAddressFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  get(cartId: DaffCart['id']): Observable<DaffCartAddress> {\n    return of(this.addressFactory.create());\n  }\n\n  update(cartId: DaffCart['id'], address: DaffCartAddress): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartPaymentMethod, DaffCartAddress } from '@daffodil/cart';\nimport {\n  DaffCartPaymentServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartFactory, DaffCartPaymentFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartPaymentService implements DaffCartPaymentServiceInterface {\n  constructor(\n    private paymentFactory: DaffCartPaymentFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  get(cartId: DaffCart['id']): Observable<DaffCartPaymentMethod> {\n    return of(this.paymentFactory.create());\n  }\n\n  update(cartId: DaffCart['id'], payment: Partial<DaffCartPaymentMethod>): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  updateWithBilling(cartId: DaffCart['id'], payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  remove(cartId: DaffCart['id']): Observable<void> {\n    return of(undefined);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartPaymentMethod } from '@daffodil/cart';\nimport {\n  DaffCartPaymentMethodsServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartPaymentFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartPaymentMethodsService implements DaffCartPaymentMethodsServiceInterface {\n  constructor(\n    private paymentFactory: DaffCartPaymentFactory,\n  ) {}\n\n  list(cartId: DaffCart['id']): Observable<DaffCartPaymentMethod[]> {\n    return of(this.paymentFactory.createMany(3));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartAddress } from '@daffodil/cart';\nimport {\n  DaffCartShippingAddressServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartAddressFactory, DaffCartFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartShippingAddressService implements DaffCartShippingAddressServiceInterface {\n  constructor(\n    private addressFactory: DaffCartAddressFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  get(cartId: DaffCart['id']): Observable<DaffCartAddress> {\n    return of(this.addressFactory.create());\n  }\n\n  update(cartId: DaffCart['id'], address: DaffCartAddress): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartShippingRate } from '@daffodil/cart';\nimport {\n  DaffCartShippingInformationServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartFactory, DaffCartShippingRateFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartShippingInformationService implements DaffCartShippingInformationServiceInterface {\n  constructor(\n    private shippingInfoFactory: DaffCartShippingRateFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  get(cartId: DaffCart['id']): Observable<DaffCartShippingRate> {\n    return of(this.shippingInfoFactory.create());\n  }\n\n  update(cartId: DaffCart['id'], info: Partial<DaffCartShippingRate>): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  delete(cartId: DaffCart['id']): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartShippingRate } from '@daffodil/cart';\nimport {\n  DaffCartShippingMethodsServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartShippingRateFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartShippingMethodsService implements DaffCartShippingMethodsServiceInterface {\n  constructor(\n    private shippingInfoFactory: DaffCartShippingRateFactory,\n  ) {}\n\n  list(cartId: DaffCart['id']): Observable<DaffCartShippingRate[]> {\n    return of(this.shippingInfoFactory.createMany(3));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCart, DaffCartPaymentMethod, DaffCartOrderResult } from '@daffodil/cart';\nimport {\n  DaffCartOrderServiceInterface,\n} from '@daffodil/cart/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartOrderService implements DaffCartOrderServiceInterface {\n  placeOrder(cartId: DaffCart['id'], payment?: DaffCartPaymentMethod): Observable<DaffCartOrderResult> {\n    return of({\n      id: faker.random.number(999999),\n      orderId: faker.random.number(999999),\n      cartId,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffCart, DaffCartCoupon } from '@daffodil/cart';\nimport {\n  DaffCartCouponServiceInterface,\n} from '@daffodil/cart/driver';\n\nimport { DaffCartFactory, DaffCartCouponFactory } from '@daffodil/cart/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCartCouponService implements DaffCartCouponServiceInterface {\n  constructor(\n    private couponFactory: DaffCartCouponFactory,\n    private cartFactory: DaffCartFactory\n  ) {}\n\n  list(cartId: DaffCart['id']): Observable<DaffCartCoupon[]> {\n    return of(this.couponFactory.createMany(3))\n  }\n\n  apply(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  remove(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n\n  removeAll(cartId: DaffCart['id']): Observable<Partial<DaffCart>> {\n    return of(this.cartFactory.create());\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffCartDriver,\n  DaffCartAddressDriver,\n  DaffCartBillingAddressDriver,\n  DaffCartShippingAddressDriver,\n  DaffCartCouponDriver,\n  DaffCartOrderDriver,\n  DaffCartPaymentDriver,\n  DaffCartShippingInformationDriver,\n  DaffCartShippingMethodsDriver,\n  DaffCartPaymentMethodsDriver,\n  DaffCartItemDriver\n} from '@daffodil/cart/driver';\n\nimport { DaffTestingCartService } from './cart/cart.service';\nimport { DaffTestingCartAddressService } from './cart-address/cart-address.service';\nimport { DaffTestingCartBillingAddressService } from './cart-billing-address/cart-billing-address.service';\nimport { DaffTestingCartShippingAddressService } from './cart-shipping-address/cart-shipping-address.service';\nimport { DaffTestingCartCouponService } from './cart-coupon/cart-coupon.service';\nimport { DaffTestingCartOrderService } from './cart-order/cart-order.service';\nimport { DaffTestingCartPaymentService } from './cart-payment/cart-payment.service';\nimport { DaffTestingCartShippingInformationService } from './cart-shipping-information/cart-shipping-information.service';\nimport { DaffTestingCartShippingMethodsService } from './cart-shipping-methods/cart-shipping-methods.service';\nimport { DaffTestingCartPaymentMethodsService } from './cart-payment-methods/cart-payment-methods.service';\nimport { DaffTestingCartItemService } from './cart-item/cart-item.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffTestingCartDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffTestingCartDriverModule,\n      providers: [\n        {\n          provide: DaffCartDriver,\n          useExisting: DaffTestingCartService\n        },\n        {\n          provide: DaffCartItemDriver,\n          useExisting: DaffTestingCartItemService\n        },\n        {\n          provide: DaffCartAddressDriver,\n          useExisting: DaffTestingCartAddressService\n        },\n        {\n          provide: DaffCartBillingAddressDriver,\n          useExisting: DaffTestingCartBillingAddressService\n        },\n        {\n          provide: DaffCartShippingAddressDriver,\n          useExisting: DaffTestingCartShippingAddressService\n        },\n        {\n          provide: DaffCartCouponDriver,\n          useExisting: DaffTestingCartCouponService\n        },\n        {\n          provide: DaffCartOrderDriver,\n          useExisting: DaffTestingCartOrderService\n        },\n        {\n          provide: DaffCartPaymentDriver,\n          useExisting: DaffTestingCartPaymentService\n        },\n        {\n          provide: DaffCartShippingInformationDriver,\n          useExisting: DaffTestingCartShippingInformationService\n        },\n        {\n          provide: DaffCartShippingMethodsDriver,\n          useExisting: DaffTestingCartShippingMethodsService\n        },\n        {\n          provide: DaffCartPaymentMethodsDriver,\n          useExisting: DaffTestingCartPaymentMethodsService\n        },\n      ]\n    };\n  }\n}\n"]}