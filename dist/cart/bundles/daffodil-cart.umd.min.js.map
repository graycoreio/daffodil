{"version":3,"sources":["ng://@daffodil/cart/injection-tokens/payment-method-map.ts","ng://@daffodil/cart/injection-tokens/error-matcher.token.ts","ng://@daffodil/cart/storage/cart-storage.service.ts","ng://@daffodil/cart/models/cart-item-input.ts","ng://@daffodil/cart/models/cart-total.ts"],"names":["DaffCartPaymentMethodIdMap","InjectionToken","factory","DAFF_CART_ERROR_MATCHER","daffTransformErrorToStateError","DaffCartStorageService","storageService","this","CART_STORAGE_ID","prototype","getCartId","getItem","setCartId","value","setItem","removeCartId","removeItem","Injectable","args","providedIn","useFactory","daffCartStorageServiceFactory","deps","PLATFORM_ID","DaffPersistenceServiceToken","DaffServerErrorStorageService","platformId","persistenceService","serverStorage","isPlatformBrowser","Simple","Composite","Configurable","grandTotal","subtotalExcludingTax","subtotalIncludingTax","subtotalWithDiscountExcludingTax","subtotalWithDiscountIncludingTax","discount","tax","shipping"],"mappings":"8dASA,IAAaA,EAA6B,IAAIC,EAAAA,eAAwC,6BAA8B,CAClHC,QAAO,WAAQ,MAAA,MCFJC,EAA0B,IAAIF,EAAAA,eAAsD,0BAA2B,CAACC,QAAO,WAAQ,OAAAE,EAAAA,kCCQ5IC,EAAA,WAYC,SAAAA,EAAoBC,GAAAC,KAAAD,eAAAA,EAFHC,KAAAC,gBAAkB,sBAInCH,EAAAI,UAAAC,UAAA,WACC,OAAOH,KAAKD,eAAeK,QAAQJ,KAAKC,kBAGzCH,EAAAI,UAAAG,UAAA,SAAUC,GACTN,KAAKD,eAAeQ,QAAQP,KAAKC,gBAAiBK,IAGnDR,EAAAI,UAAAM,aAAA,WACCR,KAAKD,eAAeU,WAAWT,KAAKC,sCAvBrCS,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,OACZC,WAAYC,EACZC,KAAM,CACLC,EAAAA,YACAC,EAAAA,4BACAC,EAAAA,0SANF,GA8BA,SAAgBJ,EACfK,EACAC,EACAC,GACA,OAAOC,EAAAA,kBAAkBH,GACrB,IAAIrB,EAAuBsB,GAC3B,IAAItB,EAAuBuB,wDCjD/BE,OAAS,SACTC,UAAY,YACZC,aAAe,mGCJfC,WAAa,cACbC,qBAAuB,yBACvBC,qBAAuB,yBACvBC,iCAAmC,uCACnCC,iCAAmC,uCACnCC,SAAW,WACXC,IAAM,MACNC,SAAW","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * An injection token for a mapping from the platform-specific cart payment method\n * to a user-defined platform-agnostic payment ID.\n * It should be an object whose keys are the cart payment's method and whose values are strings.\n * Defaults to an empty object.\n */\n// TODO: refactor to upper snake case\nexport const DaffCartPaymentMethodIdMap = new InjectionToken<{[key: string]: string}>('DaffCartPaymentMethodIdMap', {\n  factory: () => ({})\n});\n","import { InjectionToken } from '@angular/core';\n\nimport { daffTransformErrorToStateError } from '@daffodil/core/state';\n\n/**\n * Transforms `DaffError`s into `DaffStateError`s before they are serialized into state.\n * Can be used to further refine Daffodil errors into more specific app errors.\n */\nexport const DAFF_CART_ERROR_MATCHER = new InjectionToken<typeof daffTransformErrorToStateError>('DAFF_CART_ERROR_MATCHER', {factory: () => daffTransformErrorToStateError});\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport {\n\tDaffPersistenceService,\n\tDaffPersistenceServiceToken,\n\tDaffServerErrorStorageService,\n} from '@daffodil/core';\nimport { isPlatformBrowser } from '@angular/common';  \n\n/**\n * The DaffCartStorageService is responsible for storing the cart id of a customer\n * in storage when necessary. For some ecommerce platforms, where cart information\n * is stored in a cookie instead of storage accessible via javsacript, this service\n * isn't explicitly necessary, so be sure to use this service only in the driver\n * layer for platforms that require it.\n */\n@Injectable({\n\tprovidedIn: 'root',\n\tuseFactory: daffCartStorageServiceFactory,\n\tdeps: [\n\t\tPLATFORM_ID,\n\t\tDaffPersistenceServiceToken,\n\t\tDaffServerErrorStorageService\n\t]\n})\nexport class DaffCartStorageService {\n\tprivate readonly CART_STORAGE_ID = 'DAFF_CART_ID';\n\n\tconstructor(private storageService: DaffPersistenceService) {}\n\n\tgetCartId(): string {\n\t\treturn this.storageService.getItem(this.CART_STORAGE_ID);\n\t}\n\n\tsetCartId(value: string): void {\n\t\tthis.storageService.setItem(this.CART_STORAGE_ID, value);\n\t}\n\n\tremoveCartId(): void {\n\t\tthis.storageService.removeItem(this.CART_STORAGE_ID);\n\t}\n}\n\n/**\n * The factory that describe construction of a DaffCartStorageService\n */\nexport function daffCartStorageServiceFactory(\n\tplatformId: string, \n\tpersistenceService: DaffPersistenceService, \n\tserverStorage: DaffServerErrorStorageService) {\n\treturn isPlatformBrowser(platformId) \n\t\t\t? new DaffCartStorageService(persistenceService) \n\t\t\t: new DaffCartStorageService(serverStorage)\n}","import { DaffProduct } from '@daffodil/product';\n\nexport enum DaffCartItemInputType {\n\tSimple = 'simple',\n\tComposite = 'composite',\n\tConfigurable = 'configurable'\n}\n\nexport interface DaffCartItemInput {\n\ttype: DaffCartItemInputType;\n  productId: DaffProduct['id'];\n\tqty: number;\n}\n\nexport interface DaffSimpleCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Simple;\n}\n\nexport interface DaffCompositeCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Composite;\n\toptions: DaffCompositeCartItemInputOption[];\n}\n\nexport interface DaffCompositeCartItemInputOption {\n\tcode: string | number;\n\tquantity: number;\n\tvalue: string;\n}\n\nexport interface DaffConfigurableCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Configurable;\n\tvariantId: string | number;\n}\n","export enum DaffCartTotalTypeEnum {\n\tgrandTotal = 'grand_total',\n\tsubtotalExcludingTax = 'subtotal_excluding_tax',\n\tsubtotalIncludingTax = 'subtotal_including_tax',\n\tsubtotalWithDiscountExcludingTax = 'subtotal_with_discount_excluding_tax',\n\tsubtotalWithDiscountIncludingTax = 'subtotal_with_discount_including_tax',\n\tdiscount = 'discount',\n\ttax = 'tax',\n\tshipping = 'shipping'\n}\n\n/**\n * Since some cart totals might not have a value defined at all times, like shipping, the values of these totals\n * can be null. Allowing their values to be null differentiates a non-existent value from a zero value. In the case of\n * shipping, this would mean the difference between a cart with no selected shipping method and a cart with a selected shipping\n * method that costs zero.\n */\nexport interface DaffCartTotal {\n  value: number;\n  label: string;\n  name: DaffCartTotalTypeEnum;\n}"]}