{"version":3,"file":"daffodil-cart.umd.js","sources":["ng://@daffodil/cart/models/cart.ts","ng://@daffodil/cart/models/cart-item.ts","ng://@daffodil/cart/models/composite-cart-item.ts","ng://@daffodil/cart/models/configurable-cart-item.ts","ng://@daffodil/cart/models/cart-item-input.ts","ng://@daffodil/cart/models/cart-total.ts","ng://@daffodil/cart/injection-tokens/payment-method-map.ts","ng://@daffodil/cart/injection-tokens/error-matcher.token.ts","ng://@daffodil/cart/storage/cart-storage.service.ts"],"sourcesContent":["import { DaffCartItem } from './cart-item';\nimport { DaffCartAddress } from './cart-address';\nimport { DaffCartPaymentMethod } from './cart-payment';\nimport { DaffCartShippingInformation } from './cart-shipping-info';\nimport { DaffCartCoupon } from './cart-coupon';\nimport { DaffCartTotal } from './cart-total';\nimport { DaffCartShippingRate } from './cart-shipping-rate';\n\nexport interface DaffCart {\n\tid: number | string;\n\t/**\n\t * @deprecated use totals instead\n\t */\n\tsubtotal: number;\n\t/**\n\t * @deprecated use totals instead\n\t */\n  grand_total: number;\n  coupons: DaffCartCoupon[];\n  items?: DaffCartItem[];\n  billing_address: DaffCartAddress | null;\n  shipping_address: DaffCartAddress | null;\n  payment?: DaffCartPaymentMethod;\n  totals: DaffCartTotal[];\n  shipping_information: DaffCartShippingInformation | null;\n  available_shipping_methods: DaffCartShippingRate[];\n  available_payment_methods: DaffCartPaymentMethod[];\n  /**\n   * The field is set to the platform cart object returned by the most recent driver call.\n   * No fields are guaranteed here.\n   */\n  extra_attributes?: any;\n}\n","import {\n  DaffProductImage,\n  DaffProduct\n} from '@daffodil/product';\nimport { DaffCartItemInputType } from './cart-item-input';\n\nexport interface DaffCartItem {\n\titem_id: number | string;\n\ttype: DaffCartItemInputType;\n  image?: DaffProductImage;\n  product_id: DaffProduct['id'];\n  parent_item_id: number;\n  sku: string;\n  name: string;\n  qty: number;\n  price: number;\n  row_total: number;\n\ttotal_discount: number;\n\tin_stock: boolean;\n}\n","import { ID } from '@daffodil/core';\n\nimport { DaffCartItem } from './cart-item';\n\nexport interface DaffCompositeCartItem extends DaffCartItem {\n\toptions: DaffCompositeCartItemOption[];\n}\n\nexport interface DaffCompositeCartItemOption {\n\toption_id: ID;\n\toption_label: string;\n\tvalue_label: string;\n}\n","import { DaffCartItem } from './cart-item';\nimport { DaffCartItemInputType } from './cart-item-input';\n\nexport interface DaffConfigurableCartItem extends DaffCartItem {\n\tattributes: DaffConfigurableCartItemAttribute[];\n}\n\nexport interface DaffConfigurableCartItemAttribute {\n\tattribute_label: string;\n\tvalue_label: string;\n}\n","import { DaffProduct } from '@daffodil/product';\n\nexport enum DaffCartItemInputType {\n\tSimple = 'simple',\n\tComposite = 'composite',\n\tConfigurable = 'configurable'\n}\n\nexport interface DaffCartItemInput {\n\ttype: DaffCartItemInputType;\n  productId: DaffProduct['id'];\n\tqty: number;\n}\n\nexport interface DaffSimpleCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Simple;\n}\n\nexport interface DaffCompositeCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Composite;\n\toptions: DaffCompositeCartItemInputOption[];\n}\n\nexport interface DaffCompositeCartItemInputOption {\n\tcode: string | number;\n\tquantity: number;\n\tvalue: string;\n}\n\nexport interface DaffConfigurableCartItemInput extends DaffCartItemInput {\n\ttype: DaffCartItemInputType.Configurable;\n\tvariantId: string | number;\n}\n","export enum DaffCartTotalTypeEnum {\n\tgrandTotal = 'grand_total',\n\tsubtotalExcludingTax = 'subtotal_excluding_tax',\n\tsubtotalIncludingTax = 'subtotal_including_tax',\n\tsubtotalWithDiscountExcludingTax = 'subtotal_with_discount_excluding_tax',\n\tsubtotalWithDiscountIncludingTax = 'subtotal_with_discount_including_tax',\n\tdiscount = 'discount',\n\ttax = 'tax',\n\tshipping = 'shipping'\n}\n\n/**\n * Since some cart totals might not have a value defined at all times, like shipping, the values of these totals\n * can be null. Allowing their values to be null differentiates a non-existent value from a zero value. In the case of\n * shipping, this would mean the difference between a cart with no selected shipping method and a cart with a selected shipping\n * method that costs zero.\n */\nexport interface DaffCartTotal {\n  value: number;\n  label: string;\n  name: DaffCartTotalTypeEnum;\n}","import { InjectionToken } from '@angular/core';\n\n/**\n * An injection token for a mapping from the platform-specific cart payment method\n * to a user-defined platform-agnostic payment ID.\n * It should be an object whose keys are the cart payment's method and whose values are strings.\n * Defaults to an empty object.\n */\n// TODO: refactor to upper snake case\nexport const DaffCartPaymentMethodIdMap = new InjectionToken<{[key: string]: string}>('DaffCartPaymentMethodIdMap', {\n  factory: () => ({})\n});\n","import { InjectionToken } from '@angular/core';\n\nimport { daffTransformErrorToStateError } from '@daffodil/core/state';\n\n/**\n * Transforms `DaffError`s into `DaffStateError`s before they are serialized into state.\n * Can be used to further refine Daffodil errors into more specific app errors.\n */\nexport const DAFF_CART_ERROR_MATCHER = new InjectionToken<typeof daffTransformErrorToStateError>('DAFF_CART_ERROR_MATCHER', {factory: () => daffTransformErrorToStateError});\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport {\n\tDaffPersistenceService,\n\tDaffPersistenceServiceToken,\n\tDaffServerErrorStorageService,\n} from '@daffodil/core';\nimport { isPlatformBrowser } from '@angular/common';  \n\n/**\n * The DaffCartStorageService is responsible for storing the cart id of a customer\n * in storage when necessary. For some ecommerce platforms, where cart information\n * is stored in a cookie instead of storage accessible via javsacript, this service\n * isn't explicitly necessary, so be sure to use this service only in the driver\n * layer for platforms that require it.\n */\n@Injectable({\n\tprovidedIn: 'root',\n\tuseFactory: daffCartStorageServiceFactory,\n\tdeps: [\n\t\tPLATFORM_ID,\n\t\tDaffPersistenceServiceToken,\n\t\tDaffServerErrorStorageService\n\t]\n})\nexport class DaffCartStorageService {\n\tprivate readonly CART_STORAGE_ID = 'DAFF_CART_ID';\n\n\tconstructor(private storageService: DaffPersistenceService) {}\n\n\tgetCartId(): string {\n\t\treturn this.storageService.getItem(this.CART_STORAGE_ID);\n\t}\n\n\tsetCartId(value: string): void {\n\t\tthis.storageService.setItem(this.CART_STORAGE_ID, value);\n\t}\n\n\tremoveCartId(): void {\n\t\tthis.storageService.removeItem(this.CART_STORAGE_ID);\n\t}\n}\n\n/**\n * The factory that describe construction of a DaffCartStorageService\n */\nexport function daffCartStorageServiceFactory(\n\tplatformId: string, \n\tpersistenceService: DaffPersistenceService, \n\tserverStorage: DaffServerErrorStorageService) {\n\treturn isPlatformBrowser(platformId) \n\t\t\t? new DaffCartStorageService(persistenceService) \n\t\t\t: new DaffCartStorageService(serverStorage)\n}"],"names":["InjectionToken","daffTransformErrorToStateError","Injectable","PLATFORM_ID","DaffPersistenceServiceToken","DaffServerErrorStorageService","isPlatformBrowser"],"mappings":"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"}