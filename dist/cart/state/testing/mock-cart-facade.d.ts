import { BehaviorSubject } from 'rxjs';
import { Action } from '@ngrx/store';
import { Dictionary } from '@ngrx/entity';
import { DaffStateError } from '@daffodil/core/state';
import { DaffCart, DaffCartTotal, DaffCartItem, DaffCartOrderResult, DaffConfigurableCartItemAttribute, DaffCompositeCartItemOption } from '@daffodil/cart';
import { DaffCartFacadeInterface, DaffCartErrors, DaffCartOperationType, DaffCartLoading, DaffCartItemStateEnum, DaffStatefulCartItem, DaffCartResolveState } from '@daffodil/cart/state';
export declare class MockDaffCartFacade implements DaffCartFacadeInterface {
    cart$: BehaviorSubject<DaffCart>;
    resolved$: BehaviorSubject<DaffCartResolveState>;
    loadingObject$: BehaviorSubject<DaffCartLoading>;
    featureLoading$: BehaviorSubject<boolean>;
    featureResolving$: BehaviorSubject<boolean>;
    featureMutating$: BehaviorSubject<boolean>;
    loading$: BehaviorSubject<boolean>;
    resolving$: BehaviorSubject<boolean>;
    mutating$: BehaviorSubject<boolean>;
    billingAddressLoading$: BehaviorSubject<boolean>;
    billingAddressResolving$: BehaviorSubject<boolean>;
    billingAddressMutating$: BehaviorSubject<boolean>;
    shippingAddressLoading$: BehaviorSubject<boolean>;
    shippingAddressResolving$: BehaviorSubject<boolean>;
    shippingAddressMutating$: BehaviorSubject<boolean>;
    shippingInformationLoading$: BehaviorSubject<boolean>;
    shippingInformationResolving$: BehaviorSubject<boolean>;
    shippingInformationMutating$: BehaviorSubject<boolean>;
    shippingMethodsLoading$: BehaviorSubject<boolean>;
    shippingMethodsResolving$: BehaviorSubject<boolean>;
    paymentLoading$: BehaviorSubject<boolean>;
    paymentResolving$: BehaviorSubject<boolean>;
    paymentMutating$: BehaviorSubject<boolean>;
    paymentMethodsLoading$: BehaviorSubject<boolean>;
    paymentMethodsResolving$: BehaviorSubject<boolean>;
    couponLoading$: BehaviorSubject<boolean>;
    couponResolving$: BehaviorSubject<boolean>;
    couponMutating$: BehaviorSubject<boolean>;
    itemLoading$: BehaviorSubject<boolean>;
    itemAdding$: BehaviorSubject<boolean>;
    itemResolving$: BehaviorSubject<boolean>;
    itemMutating$: BehaviorSubject<boolean>;
    errors$: BehaviorSubject<DaffCartErrors>;
    cartErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.Cart]>;
    itemErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.Item]>;
    billingAddressErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.BillingAddress]>;
    shippingAddressErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.ShippingAddress]>;
    shippingInformationErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.ShippingInformation]>;
    shippingMethodsErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.ShippingMethods]>;
    paymentErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.Payment]>;
    paymentMethodsErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.PaymentMethods]>;
    couponErrors$: BehaviorSubject<DaffCartErrors[DaffCartOperationType.Coupon]>;
    id$: BehaviorSubject<DaffCart['id']>;
    subtotal$: BehaviorSubject<DaffCartTotal['value']>;
    grandTotal$: BehaviorSubject<DaffCartTotal['value']>;
    subtotalExcludingTax$: BehaviorSubject<DaffCartTotal['value']>;
    subtotalIncludingTax$: BehaviorSubject<DaffCartTotal['value']>;
    subtotalWithDiscountExcludingTax$: BehaviorSubject<DaffCartTotal['value']>;
    subtotalWithDiscountIncludingTax$: BehaviorSubject<DaffCartTotal['value']>;
    discountTotals$: BehaviorSubject<DaffCartTotal[]>;
    totalTax$: BehaviorSubject<DaffCartTotal['value']>;
    shippingTotal$: BehaviorSubject<DaffCartTotal['value']>;
    coupons$: BehaviorSubject<DaffCart['coupons']>;
    items$: BehaviorSubject<DaffCart['items']>;
    totalItems$: BehaviorSubject<number>;
    hasOutOfStockItems$: BehaviorSubject<boolean>;
    itemDictionary$: BehaviorSubject<Dictionary<DaffStatefulCartItem>>;
    billingAddress$: BehaviorSubject<DaffCart['billing_address']>;
    shippingAddress$: BehaviorSubject<DaffCart['shipping_address']>;
    payment$: BehaviorSubject<DaffCart['payment']>;
    totals$: BehaviorSubject<DaffCart['totals']>;
    shippingInformation$: BehaviorSubject<DaffCart['shipping_information']>;
    availableShippingMethods$: BehaviorSubject<DaffCart['available_shipping_methods']>;
    availablePaymentMethods$: BehaviorSubject<DaffCart['available_payment_methods']>;
    paymentId$: BehaviorSubject<any>;
    isCartEmpty$: BehaviorSubject<boolean>;
    isBillingSameAsShipping$: BehaviorSubject<boolean>;
    hasBillingAddress$: BehaviorSubject<boolean>;
    hasShippingAddress$: BehaviorSubject<boolean>;
    hasShippingMethod$: BehaviorSubject<boolean>;
    hasPaymentMethod$: BehaviorSubject<boolean>;
    canPlaceOrder$: BehaviorSubject<boolean>;
    orderResultLoading$: BehaviorSubject<boolean>;
    orderResultErrors$: BehaviorSubject<DaffStateError[]>;
    orderResult$: BehaviorSubject<DaffCartOrderResult>;
    orderResultId$: BehaviorSubject<string | number>;
    orderResultCartId$: BehaviorSubject<string | number>;
    hasOrderResult$: BehaviorSubject<boolean>;
    getCartItemDiscountedTotal(itemId: string | number): BehaviorSubject<number>;
    getConfiguredCartItemAttributes(itemId: string | number): BehaviorSubject<DaffConfigurableCartItemAttribute[]>;
    getCompositeCartItemOptions(itemId: string | number): BehaviorSubject<DaffCompositeCartItemOption[]>;
    isCartItemOutOfStock(itemId: DaffCartItem['item_id']): BehaviorSubject<boolean>;
    getCartItemState(itemId: DaffCartItem['item_id']): BehaviorSubject<DaffCartItemStateEnum>;
    dispatch(action: Action): void;
}
