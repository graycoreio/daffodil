import { Observable } from 'rxjs';
import { Action, Store } from '@ngrx/store';
import { Dictionary } from '@ngrx/entity';
import { DaffStateError } from '@daffodil/core/state';
import { DaffCart, DaffCartOrderResult, DaffCartTotal, DaffConfigurableCartItemAttribute, DaffCompositeCartItemOption } from '@daffodil/cart';
import { DaffCartReducersState, DaffCartResolveState } from '../../reducers/public_api';
import { DaffCartErrors } from '../../reducers/errors/cart-errors.type';
import { DaffCartOperationType } from '../../reducers/cart-operation-type.enum';
import { DaffCartFacadeInterface } from './cart-facade.interface';
import { DaffCartLoading } from '../../reducers/loading/cart-loading.type';
import { DaffCartItemStateEnum, DaffStatefulCartItem } from '../../models/stateful-cart-item';
export declare class DaffCartFacade<T extends DaffCart = DaffCart, V extends DaffCartOrderResult = DaffCartOrderResult, U extends DaffStatefulCartItem = DaffStatefulCartItem> implements DaffCartFacadeInterface<T, V, U> {
    private store;
    private paymentMethodMap;
    cart$: Observable<T>;
    resolved$: Observable<DaffCartResolveState>;
    loadingObject$: Observable<DaffCartLoading>;
    featureLoading$: Observable<boolean>;
    featureResolving$: Observable<boolean>;
    featureMutating$: Observable<boolean>;
    loading$: Observable<boolean>;
    resolving$: Observable<boolean>;
    mutating$: Observable<boolean>;
    billingAddressLoading$: Observable<boolean>;
    billingAddressResolving$: Observable<boolean>;
    billingAddressMutating$: Observable<boolean>;
    shippingAddressLoading$: Observable<boolean>;
    shippingAddressResolving$: Observable<boolean>;
    shippingAddressMutating$: Observable<boolean>;
    shippingInformationLoading$: Observable<boolean>;
    shippingInformationResolving$: Observable<boolean>;
    shippingInformationMutating$: Observable<boolean>;
    shippingMethodsLoading$: Observable<boolean>;
    shippingMethodsResolving$: Observable<boolean>;
    paymentLoading$: Observable<boolean>;
    paymentResolving$: Observable<boolean>;
    paymentMutating$: Observable<boolean>;
    paymentMethodsLoading$: Observable<boolean>;
    paymentMethodsResolving$: Observable<boolean>;
    couponLoading$: Observable<boolean>;
    couponResolving$: Observable<boolean>;
    couponMutating$: Observable<boolean>;
    itemLoading$: Observable<boolean>;
    itemAdding$: Observable<boolean>;
    itemResolving$: Observable<boolean>;
    itemMutating$: Observable<boolean>;
    errors$: Observable<DaffCartErrors>;
    cartErrors$: Observable<DaffCartErrors[DaffCartOperationType.Cart]>;
    itemErrors$: Observable<DaffCartErrors[DaffCartOperationType.Item]>;
    billingAddressErrors$: Observable<DaffCartErrors[DaffCartOperationType.BillingAddress]>;
    shippingAddressErrors$: Observable<DaffCartErrors[DaffCartOperationType.ShippingAddress]>;
    shippingInformationErrors$: Observable<DaffCartErrors[DaffCartOperationType.ShippingInformation]>;
    shippingMethodsErrors$: Observable<DaffCartErrors[DaffCartOperationType.ShippingMethods]>;
    paymentErrors$: Observable<DaffCartErrors[DaffCartOperationType.Payment]>;
    paymentMethodsErrors$: Observable<DaffCartErrors[DaffCartOperationType.PaymentMethods]>;
    couponErrors$: Observable<DaffCartErrors[DaffCartOperationType.Coupon]>;
    id$: Observable<DaffCart['id']>;
    subtotal$: Observable<DaffCartTotal['value']>;
    grandTotal$: Observable<DaffCartTotal['value']>;
    subtotalExcludingTax$: Observable<DaffCartTotal['value']>;
    subtotalIncludingTax$: Observable<DaffCartTotal['value']>;
    subtotalWithDiscountExcludingTax$: Observable<DaffCartTotal['value']>;
    subtotalWithDiscountIncludingTax$: Observable<DaffCartTotal['value']>;
    discountTotals$: Observable<DaffCartTotal[]>;
    totalTax$: Observable<DaffCartTotal['value']>;
    shippingTotal$: Observable<DaffCartTotal['value']>;
    coupons$: Observable<DaffCart['coupons']>;
    items$: Observable<DaffCart['items']>;
    totalItems$: Observable<number>;
    hasOutOfStockItems$: Observable<boolean>;
    itemDictionary$: Observable<Dictionary<U>>;
    billingAddress$: Observable<DaffCart['billing_address']>;
    shippingAddress$: Observable<DaffCart['shipping_address']>;
    payment$: Observable<DaffCart['payment']>;
    totals$: Observable<DaffCart['totals']>;
    shippingInformation$: Observable<DaffCart['shipping_information']>;
    availableShippingMethods$: Observable<DaffCart['available_shipping_methods']>;
    availablePaymentMethods$: Observable<DaffCart['available_payment_methods']>;
    paymentId$: Observable<any>;
    isCartEmpty$: Observable<boolean>;
    isBillingSameAsShipping$: Observable<boolean>;
    hasBillingAddress$: Observable<boolean>;
    hasShippingAddress$: Observable<boolean>;
    hasShippingMethod$: Observable<boolean>;
    hasPaymentMethod$: Observable<boolean>;
    canPlaceOrder$: Observable<boolean>;
    orderResultLoading$: Observable<boolean>;
    orderResultErrors$: Observable<DaffStateError[]>;
    orderResult$: Observable<V>;
    orderResultId$: Observable<V['orderId']>;
    orderResultCartId$: Observable<V['cartId']>;
    hasOrderResult$: Observable<boolean>;
    private _selectCartItemDiscountedRowTotal;
    private _selectCartItemConfiguredAttributes;
    private _selectCartItemCompositeOptions;
    private _selectIsCartItemOutOfStock;
    private _selectCartItemState;
    constructor(store: Store<DaffCartReducersState<T, V, U>>, paymentMethodMap: Object);
    getConfiguredCartItemAttributes(itemId: U['item_id']): Observable<DaffConfigurableCartItemAttribute[]>;
    getCompositeCartItemOptions(itemId: U['item_id']): Observable<DaffCompositeCartItemOption[]>;
    getCartItemDiscountedTotal(itemId: U['item_id']): Observable<number>;
    isCartItemOutOfStock(itemId: U['item_id']): Observable<boolean>;
    getCartItemState(itemId: U['item_id']): Observable<DaffCartItemStateEnum>;
    dispatch(action: Action): void;
}
