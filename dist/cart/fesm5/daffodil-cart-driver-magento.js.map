{"version":3,"file":"daffodil-cart-driver-magento.js","sources":["ng://@daffodil/cart/driver/magento/transforms/outputs/cart-payment.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-shipping-rate.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-shipping-information.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/shipping-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/billing-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-coupon.ts","ng://@daffodil/cart/driver/magento/models/responses/cart-item.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/simple-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/bundle-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/configurable-cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-item/cart-item-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-totals-transformer.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/shipping-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/billing-address.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-item-update.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/payment-method.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/shipping-method.service.ts","ng://@daffodil/cart/driver/magento/models/requests/cart-item.ts","ng://@daffodil/cart/driver/magento/injection-tokens/fragments/cart.ts","ng://@daffodil/cart/driver/magento/queries/fragments/money.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-coupon.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-address.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-item.ts","ng://@daffodil/cart/driver/magento/queries/fragments/available-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/available-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/fragments/prices.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart.ts","ng://@daffodil/cart/driver/magento/queries/responses/add-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/list-cart-items.ts","ng://@daffodil/cart/driver/magento/queries/add-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/remove-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/update-cart-item.ts","ng://@daffodil/cart/driver/magento/queries/list-payment-methods.ts","ng://@daffodil/cart/driver/magento/queries/get-selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method-with-billing.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-payment-method-with-billing-and-email.ts","ng://@daffodil/cart/driver/magento/queries/list-shipping-methods.ts","ng://@daffodil/cart/driver/magento/queries/get-selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/set-selected-shipping-method.ts","ng://@daffodil/cart/driver/magento/queries/get-billing-address.ts","ng://@daffodil/cart/driver/magento/queries/update-billing-address.ts","ng://@daffodil/cart/driver/magento/queries/update-billing-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/get-shipping-address.ts","ng://@daffodil/cart/driver/magento/queries/update-shipping-address.ts","ng://@daffodil/cart/driver/magento/queries/update-shipping-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/update-address.ts","ng://@daffodil/cart/driver/magento/queries/update-address-with-email.ts","ng://@daffodil/cart/driver/magento/queries/get-cart.ts","ng://@daffodil/cart/driver/magento/queries/create-cart.ts","ng://@daffodil/cart/driver/magento/queries/place-order.ts","ng://@daffodil/cart/driver/magento/queries/fragments/cart-totals.ts","ng://@daffodil/cart/driver/magento/queries/apply-coupon.ts","ng://@daffodil/cart/driver/magento/queries/list-cart-coupons.ts","ng://@daffodil/cart/driver/magento/queries/remove-all-coupons.ts","ng://@daffodil/cart/driver/magento/errors/codes.ts","ng://@daffodil/cart/driver/magento/errors/map.ts","ng://@daffodil/cart/driver/magento/errors/transform.ts","ng://@daffodil/cart/driver/magento/injection-tokens/cart-mutation-queue.token.ts","ng://@daffodil/cart/driver/magento/cart.service.ts","ng://@daffodil/cart/driver/magento/transforms/inputs/cart-item-input-transformers.ts","ng://@daffodil/cart/driver/magento/cart-item.service.ts","ng://@daffodil/cart/driver/magento/cart-payment.service.ts","ng://@daffodil/cart/driver/magento/cart-payment-methods.service.ts","ng://@daffodil/cart/driver/magento/cart-billing-address.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-address.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-methods.service.ts","ng://@daffodil/cart/driver/magento/cart-shipping-information.service.ts","ng://@daffodil/cart/driver/magento/cart-address.service.ts","ng://@daffodil/cart/driver/magento/cart-order.service.ts","ng://@daffodil/cart/driver/magento/transforms/outputs/cart-coupon-response.service.ts","ng://@daffodil/cart/driver/magento/cart-coupon.service.ts","ng://@daffodil/cart/driver/magento/cart-driver.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\n\nimport { MagentoCartPaymentMethod } from '../../models/responses/cart-payment-method';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentTransformer {\n\n  /**\n   * Transforms the magento CartPayment from the magento cart query into a DaffCartPaymentMethod.\n   * @param response the response from a magento cart query.\n   */\n  transform(responsePayment: MagentoCartPaymentMethod): DaffCartPaymentMethod {\n    return responsePayment ? {\n      ...{magento_payment_method: responsePayment},\n\n      method: responsePayment.code\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\n\nimport { MagentoCartShippingMethod } from '../../models/responses/cart-shipping-method';\n\n/**\n * Transforms magento cart shipping methods into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingRateTransformer {\n  /**\n   * Transforms the magento shipping method from the magento cart query into a DaffCartShippingRate.\n   * @param shippingMethod the shippingMethod from a magento cart query.\n   */\n  transform(shippingMethod: MagentoCartShippingMethod): DaffCartShippingRate {\n    return shippingMethod ? {\n      ...{magento_shipping_method: shippingMethod},\n\n      carrier: shippingMethod.carrier_code,\n      carrier_title: shippingMethod.carrier_title,\n      price: shippingMethod.amount.value,\n      method_code: shippingMethod.method_code,\n      method_title: shippingMethod.method_title,\n\n      // TODO: implement\n      id: null,\n      method_description: null\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingInformation } from '@daffodil/cart';\n\nimport { MagentoCartShippingMethod } from '../../models/responses/cart-shipping-method';\nimport { DaffMagentoCartShippingRateTransformer } from './cart-shipping-rate.service';\n\n/**\n * Transforms magento cart shipping methods into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingInformationTransformer {\n  constructor(public shippingRateTransformer: DaffMagentoCartShippingRateTransformer) {}\n  /**\n   * Transforms the magento shipping method from the magento cart query into a DaffCartShippingInformation.\n   * @param shippingMethod the shippingMethod from a magento cart query.\n   */\n  transform(shippingMethod: MagentoCartShippingMethod): DaffCartShippingInformation {\n    return shippingMethod ? {\n      ...this.shippingRateTransformer.transform(shippingMethod),\n      // TODO: implement\n      address_id: 0\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoCartAddress } from '../../models/responses/cart-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartAddressTransformer {\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoCartAddress): DaffCartAddress {\n    return address ? {\n      ...{magento_address: address},\n\n      // address\n      street: address.street[0],\n      city: address.city,\n      region: address.region.code,\n      country: address.country.label,\n      country_id: address.country.code,\n      postcode: address.postcode,\n\n      // personal address\n      firstname: address.firstname,\n      lastname: address.lastname,\n      telephone: address.telephone,\n      email: address.email,\n\n      // TODO: implement\n      address_id: null,\n      suffix: null,\n      middlename: null,\n      prefix: null,\n      address_type: null,\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { DaffMagentoCartAddressTransformer } from './cart-address.service';\nimport { MagentoShippingAddress } from '../../models/responses/shipping-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoShippingAddressTransformer {\n  constructor (public addressTransformer: DaffMagentoCartAddressTransformer) {}\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoShippingAddress): DaffCartAddress {\n    return address ? {\n      ...this.addressTransformer.transform(address),\n      address_type: 'shipping',\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { DaffMagentoCartAddressTransformer } from './cart-address.service';\nimport { MagentoCartAddress } from '../../models/responses/cart-address';\n\n/**\n * Transforms magento addresses into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoBillingAddressTransformer {\n  constructor (\n    public addressTransformer: DaffMagentoCartAddressTransformer\n  ) {}\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCartAddress.\n   * @param address the address from a magento cart query.\n   */\n  transform(address: MagentoCartAddress): DaffCartAddress {\n    return address ? {\n      ...this.addressTransformer.transform(address),\n      address_type: 'billing',\n    } : null\n  }\n}\n","import { DaffCartCoupon } from '@daffodil/cart';\n\nimport { MagentoCartCoupon } from '../../models/responses/public_api';\n\nexport function daffMagentoCouponTransform(coupon: MagentoCartCoupon): DaffCartCoupon {\n  return {\n    ...{magento_coupon: coupon},\n    code: coupon.code\n  }\n}\n","import { MagentoProduct } from '@daffodil/product';\nimport { MagentoMoney } from '@daffodil/driver/magento'\n\nexport enum MagentoCartItemTypeEnum {\n\tSimple = 'SimpleCartItem',\n\tBundle = 'BundleCartItem',\n\tConfigurable = 'ConfigurableCartItem'\n}\n\n/**\n * An object for defining what the cart service requests and retrieves from a magento backend.\n */\nexport interface MagentoCartItem {\n\t__typename: MagentoCartItemTypeEnum;\n  id: string;\n  prices: {\n    price: MagentoMoney;\n    row_total: MagentoMoney;\n    row_total_including_tax: MagentoMoney;\n    total_item_discount: MagentoMoney;\n  };\n  product: MagentoProduct;\n  quantity: number;\n}\n\n/**\n * An interface for magento bundled cart items.\n */\nexport interface MagentoBundleCartItem extends MagentoCartItem {\n\tbundle_options: {\n\t\tid: number;\n\t\tlabel: string;\n\t\ttype: string;\n\t\tvalues: {\n\t\t\tid: number;\n\t\t\tlabel: string;\n\t\t\tprice: number;\n\t\t\tquantity: number;\n\t\t}[];\n\t}[];\n}\n\n/**\n * An interface for magento configurable cart items.\n */\nexport interface MagentoConfigurableCartItem extends MagentoCartItem {\n\tconfigurable_options: {\n\t\toption_label: string;\n\t\tvalue_label: string;\n\t}[];\n}\n","import { DaffCartItem, DaffCartItemInputType } from '@daffodil/cart';\nimport { MagentoProductStockStatusEnum } from '@daffodil/product';\n\nimport { MagentoCartItem } from '../../../models/public_api';\n\n/**\n * Transforms the magento MagentoCartItem from the magento cart query into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoSimpleCartItem(cartItem: MagentoCartItem): DaffCartItem {\n\treturn cartItem ? {\n\t\t...{magento_cart_item: cartItem},\n\n\t\t// base\n\t\ttype: DaffCartItemInputType.Simple,\n\t\titem_id: cartItem.id,\n\t\tsku: cartItem.product.sku,\n\t\tname: cartItem.product.name,\n\t\tqty: cartItem.quantity,\n\t\tprice: cartItem.prices.price.value,\n\t\trow_total: cartItem.prices.row_total.value,\n\t\tproduct_id: String(cartItem.product.id),\n\t\timage: {\n\t\t\tid: cartItem.product.thumbnail.label,\n\t\t\turl: cartItem.product.thumbnail.url,\n\t\t\tlabel: cartItem.product.thumbnail.label\n\t\t},\n\t\ttotal_discount: cartItem.prices.total_item_discount.value,\n\t\tin_stock: cartItem.product.stock_status === MagentoProductStockStatusEnum.InStock,\n\n\t\t// TODO: implement\n\t\tparent_item_id: 0\n\t} : null\n}\n","import { DaffCartItemInputType, DaffCompositeCartItem, DaffCompositeCartItemOption } from '@daffodil/cart';\n\nimport { MagentoBundleCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\n\n/**\n * Transforms a MagentoBundleCartItem into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoBundleCartItem(bundleCartItem: MagentoBundleCartItem): DaffCompositeCartItem {\n\treturn bundleCartItem ? {\n\t\t...transformMagentoSimpleCartItem(bundleCartItem),\n\t\ttype: DaffCartItemInputType.Composite,\n\t\toptions: bundleCartItem.bundle_options.map(transformBundleCartItemOption)\n\t} : null\n}\n\nfunction transformBundleCartItemOption(option: MagentoBundleCartItem['bundle_options'][0]): DaffCompositeCartItemOption {\n\treturn {\n\t\toption_id: option.values[0].id,\n\t\toption_label: option.label,\n\t\tvalue_label: option.values[0].label\n\t}\n}\n","import { DaffCartItemInputType, DaffConfigurableCartItem, DaffConfigurableCartItemAttribute } from '@daffodil/cart';\n\nimport { MagentoConfigurableCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\n\n/**\n * Transforms a MagentoConfigurableCartItem into a DaffCartItem.\n * @param response the response from a magento cart query.\n */\nexport function transformMagentoConfigurableCartItem(configurableCartItem: MagentoConfigurableCartItem): DaffConfigurableCartItem {\n\treturn configurableCartItem ? {\n\t\t...transformMagentoSimpleCartItem(configurableCartItem),\n\t\ttype: DaffCartItemInputType.Configurable,\n\t\tattributes: configurableCartItem.configurable_options.map(transformConfigurableCartItemAttribute)\n\t} : null\n}\n\nfunction transformConfigurableCartItemAttribute(option: MagentoConfigurableCartItem['configurable_options'][0]): DaffConfigurableCartItemAttribute {\n\treturn {\n\t\tattribute_label: option.option_label,\n\t\tvalue_label: option.value_label\n\t}\n}\n","import { DaffCartItem } from '@daffodil/cart';\n\nimport { MagentoCartItem, MagentoCartItemTypeEnum, MagentoBundleCartItem, MagentoConfigurableCartItem } from '../../../models/responses/cart-item';\nimport { transformMagentoSimpleCartItem } from './simple-cart-item-transformer';\nimport { transformMagentoBundleCartItem } from './bundle-cart-item-transformer';\nimport { transformMagentoConfigurableCartItem } from './configurable-cart-item-transformer';\n\n/**\n * Transforms the MagentoCartItem into a DaffCartItem.\n * @param cartItem a MagentoCartItem\n */\nexport function transformMagentoCartItem(cartItem: MagentoCartItem): DaffCartItem {\n\tswitch(cartItem.__typename) {\n\t\tcase MagentoCartItemTypeEnum.Bundle:\n\t\t\treturn transformMagentoBundleCartItem(<MagentoBundleCartItem>cartItem);\n\t\tcase MagentoCartItemTypeEnum.Configurable:\n\t\t\treturn transformMagentoConfigurableCartItem(<MagentoConfigurableCartItem>cartItem);\n\t\tdefault:\n\t\t\treturn transformMagentoSimpleCartItem(cartItem);\n\t}\n}\n","import { daffAdd } from '@daffodil/core';\nimport { DaffCart, DaffCartTotalTypeEnum, DaffCartTotal } from '@daffodil/cart';\n\nimport { MagentoCart } from '../../models/responses/cart';\n\nexport function transformCartTotals(cart: Partial<MagentoCart>): {totals: DaffCart['totals']} {\n\tconst totalTax = cart.prices.applied_taxes ? cart.prices.applied_taxes.reduce((acc, tax) => (daffAdd(acc, tax.amount.value)), 0) : 0;\n\treturn {\n\t\ttotals: [\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.grandTotal,\n\t\t\t\tlabel: 'Grand Total',\n\t\t\t\tvalue: cart.prices.grand_total.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalExcludingTax,\n\t\t\t\tlabel: 'Subtotal Excluding Tax',\n\t\t\t\tvalue: cart.prices.subtotal_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalIncludingTax,\n\t\t\t\tlabel: 'Subtotal Including Tax',\n\t\t\t\tvalue: cart.prices.subtotal_including_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalWithDiscountExcludingTax,\n\t\t\t\tlabel: 'Subtotal with Discount Excluding Tax',\n\t\t\t\tvalue: cart.prices.subtotal_with_discount_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.subtotalWithDiscountIncludingTax,\n\t\t\t\tlabel: 'Subtotal with Discount Including Tax',\n\t\t\t\tvalue: cart.prices.subtotal_with_discount_excluding_tax.value ?\n\t\t\t\t\t\t\t\tdaffAdd(cart.prices.subtotal_with_discount_excluding_tax.value, totalTax) :\n\t\t\t\t\t\t\t\tcart.prices.subtotal_with_discount_excluding_tax.value\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.tax,\n\t\t\t\tlabel: 'Tax',\n\t\t\t\tvalue: totalTax\n\t\t\t},\n\t\t\t...transformDiscounts(cart.prices.discounts),\n\t\t\t{\n\t\t\t\tname: DaffCartTotalTypeEnum.shipping,\n\t\t\t\tlabel: 'Shipping',\n\t\t\t\tvalue: validateSelectedShippingAddress(cart) ? cart.shipping_addresses[0].selected_shipping_method.amount.value : null\n\t\t\t}\n\t\t],\n\t}\n}\n\nfunction transformDiscounts(discounts): DaffCartTotal[] {\n\treturn discounts ? discounts.map(discount => ({\n\t\tname: DaffCartTotalTypeEnum.discount,\n\t\tlabel: discount.label,\n\t\tvalue: discount.amount.value\n\t})) : [];\n}\n\nfunction validateSelectedShippingAddress(cart: Partial<MagentoCart>): boolean {\n  // TODO: optional chaining\n\treturn !!cart.shipping_addresses && !!cart.shipping_addresses[0] && !!cart.shipping_addresses[0].selected_shipping_method &&\n\t\t!!cart.shipping_addresses[0].selected_shipping_method.amount;\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCart } from '@daffodil/cart';\n\nimport { DaffMagentoCartPaymentTransformer } from './cart-payment.service';\nimport { DaffMagentoCartShippingInformationTransformer } from './cart-shipping-information.service';\nimport { DaffMagentoShippingAddressTransformer } from './shipping-address.service';\nimport { DaffMagentoBillingAddressTransformer } from './billing-address.service';\nimport { MagentoCart } from '../../models/responses/cart';\nimport { DaffMagentoCartShippingRateTransformer } from './cart-shipping-rate.service';\nimport { daffMagentoCouponTransform } from './cart-coupon';\nimport { transformMagentoCartItem } from './cart-item/cart-item-transformer';\nimport { transformCartTotals } from './cart-totals-transformer';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartTransformer {\n  constructor(\n    public shippingAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public billingAddressTransformer: DaffMagentoBillingAddressTransformer,\n    public paymentTransformer: DaffMagentoCartPaymentTransformer,\n    public shippingInformationTransformer: DaffMagentoCartShippingInformationTransformer,\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer\n  ) {}\n\n  private transformShippingAddress(cart: MagentoCart): {shipping_address: DaffCart['shipping_address']} {\n    return {\n      shipping_address: cart.shipping_addresses[0]\n        ? this.shippingAddressTransformer.transform({\n          ...cart.shipping_addresses[0],\n          email: cart.email\n        })\n        : null\n    }\n  }\n\n  private transformBillingAddress(cart: MagentoCart): {billing_address: DaffCart['billing_address']} {\n    return {\n      billing_address: cart.billing_address\n        ? this.billingAddressTransformer.transform({\n          ...cart.billing_address,\n          email: cart.email\n        })\n        : null\n    }\n  }\n\n  private transformCartItems(cart: MagentoCart): {items: DaffCart['items']} {\n    return {\n      items: cart.items.map(transformMagentoCartItem),\n    }\n  }\n\n  private transformTotals(cart: MagentoCart): {\n    grand_total: DaffCart['grand_total'],\n    subtotal: DaffCart['subtotal'],\n  } {\n    return {\n      grand_total: cart.prices.grand_total.value,\n      subtotal: cart.prices.subtotal_excluding_tax.value,\n    }\n  }\n\n  private transformCoupons(cart: MagentoCart): {coupons: DaffCart['coupons']} {\n    return {\n      coupons: cart.applied_coupons\n        ? cart.applied_coupons.map(daffMagentoCouponTransform)\n        : []\n    }\n  }\n\n  private transformPayment(cart: MagentoCart): {payment: DaffCart['payment']} {\n    return {\n      payment: this.paymentTransformer.transform(cart.selected_payment_method),\n    }\n  }\n\n  private transformShippingInformation(cart: MagentoCart): {shipping_information: DaffCart['shipping_information']} {\n    return {\n      shipping_information: cart.shipping_addresses[0]\n        ? this.shippingInformationTransformer.transform(cart.shipping_addresses[0].selected_shipping_method)\n        : null\n    }\n  }\n\n  private transformShippingMethods(cart: MagentoCart): {available_shipping_methods: DaffCart['available_shipping_methods']} {\n\t\treturn {\n      available_shipping_methods: cart.shipping_addresses[0] && cart.shipping_addresses[0].available_shipping_methods\n        ? cart.shipping_addresses[0].available_shipping_methods.map(method =>\n          this.shippingRateTransformer.transform(method)\n        )\n        : []\n    }\n  }\n\n  private transformPaymentMethods(cart: MagentoCart): {available_payment_methods: DaffCart['available_payment_methods']} {\n    return {\n      available_payment_methods: cart.available_payment_methods.map(method =>\n        this.paymentTransformer.transform(method)\n      )\n    }\n  }\n\n  /**\n   * Transforms the magento MagentoCart from the magento cart query into a DaffCart.\n   * @param cart the cart from a magento cart query.\n   */\n  transform(cart: MagentoCart): DaffCart {\n    return cart ? {\n      // add the magento cart in this way to avoid 'object literal may only specify known proerties'\n      extra_attributes: cart,\n\n      ...this.transformCartItems(cart),\n      ...this.transformBillingAddress(cart),\n      ...this.transformShippingAddress(cart),\n      ...this.transformCoupons(cart),\n      ...this.transformPayment(cart),\n      ...this.transformTotals(cart),\n      ...transformCartTotals(cart),\n      ...this.transformShippingInformation(cart),\n      ...this.transformShippingMethods(cart),\n      ...this.transformPaymentMethods(cart),\n\n      id: cart.id\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoCartAddressInput } from '../../models/requests/cart-address';\n\n@Injectable()\nexport class DaffMagentoCartAddressInputTransformer {\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoCartAddressInput {\n    return {\n      city: cartAddress.city,\n      country_code: cartAddress.country,\n      firstname: cartAddress.firstname,\n      lastname: cartAddress.lastname,\n      postcode: cartAddress.postcode,\n      region: String(cartAddress.region),\n      save_in_address_book: false,\n      street: [cartAddress.street],\n      telephone: cartAddress.telephone,\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoShippingAddressInput } from '../../models/requests/shipping-address';\nimport { DaffMagentoCartAddressInputTransformer } from './cart-address.service';\n\n@Injectable()\nexport class DaffMagentoShippingAddressInputTransformer {\n  constructor(private cartAddressTransformer: DaffMagentoCartAddressInputTransformer) {}\n\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoShippingAddressInput {\n    return cartAddress.address_id\n      ? {\n        address: null,\n        customer_address_id: cartAddress.address_id,\n      }\n      : {\n        address: this.cartAddressTransformer.transform(cartAddress),\n        customer_address_id: null,\n      }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartAddress } from '@daffodil/cart';\n\nimport { MagentoBillingAddressInput } from '../../models/requests/billing-address';\nimport { DaffMagentoCartAddressInputTransformer } from './cart-address.service';\n\n@Injectable()\nexport class DaffMagentoBillingAddressInputTransformer {\n  constructor(private cartAddressTransformer: DaffMagentoCartAddressInputTransformer) {}\n\n  transform(cartAddress: Partial<DaffCartAddress>): MagentoBillingAddressInput {\n    return cartAddress.address_id\n      ? {\n        address: null,\n        customer_address_id: cartAddress.address_id,\n      }\n      : {\n        address: this.cartAddressTransformer.transform(cartAddress),\n        customer_address_id: null,\n      }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartItem } from '@daffodil/cart';\n\nimport { MagentoCartItemUpdateInput } from '../../models/requests/cart-item-update';\n\n@Injectable()\nexport class DaffMagentoCartItemUpdateInputTransformer {\n  transform(item: Partial<DaffCartItem>): MagentoCartItemUpdateInput {\n    return {\n      quantity: item.qty,\n      cart_item_id: Number(item.item_id)\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\n\nimport { MagentoPaymentMethodInput } from '../../models/requests/payment-method';\n\n@Injectable()\nexport class DaffMagentoPaymentMethodInputTransformer {\n  transform(payment: Partial<DaffCartPaymentMethod>): MagentoPaymentMethodInput {\n    return {\n\t\t\t...payment.payment_info\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\n\nimport { MagentoShippingMethodInput } from '../../models/requests/shipping-method';\n\n@Injectable()\nexport class DaffMagentoShippingMethodInputTransformer {\n  transform(method: Partial<DaffCartShippingRate>): MagentoShippingMethodInput {\n    return {\n      carrier_code: method.carrier,\n      method_code: method.method_code\n    }\n  }\n}\n","export interface MagentoCartItemInput {\n  quantity: number;\n  sku: string;\n}\n\nexport interface MagentoBundledCartItemInput {\n\tinput: MagentoCartItemInput,\n\toptions: MagentoBundledCartItemOption[];\n}\n\nexport interface MagentoBundledCartItemOption {\n\tid: number;\n\tquantity: number;\n\tvalue: string[];\n}\n\nexport interface MagentoConfigurableCartItemInput {\n\tparentSku: string;\n\tdata: MagentoCartItemInput;\n}\n","import { InjectionToken } from '@angular/core';\nimport { DocumentNode } from 'graphql';\n\n/**\n * An multi-provider injection token for providing extra GraphQL fragments that will be spread into cart queries.\n * This can be used to retrieve additional data that is not covered by the standard Daffodil interfaces.\n * The data will appear in DaffCart#extra_attributes.\n *\n * Fragment structure is platform-specific and this feature should be used with care.\n */\nexport const DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS = new InjectionToken<DocumentNode[]>('DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS', {factory: () => []});\n","import gql from 'graphql-tag';\n\nexport const moneyFragment = gql`\n  fragment money on Money {\n    value\n    currency\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const cartCouponFragment = gql`\n  fragment cartCoupon on AppliedCoupon {\n    code\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const cartAddressFragment = gql`\n  fragment cartAddress on CartAddressInterface {\n    city\n    country {\n      code\n      label\n    }\n    firstname\n    lastname\n    postcode\n    region {\n      code\n      label\n    }\n    street\n    telephone\n    company\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { magentoProductFragment } from '@daffodil/product';\n\nimport { moneyFragment } from './money';\n\nexport const cartItemFragment = gql`\n  fragment cartItem on CartItemInterface {\n\t\t__typename\n    id\n    product {\n      ...product\n    }\n    quantity\n    prices {\n      price {\n        ...money\n      }\n      row_total {\n        ...money\n      }\n      row_total_including_tax {\n        ...money\n      }\n      total_item_discount {\n        ...money\n      }\n\t\t}\n\t\t...on ConfigurableCartItem {\n\t\t\tconfigurable_options {\n\t\t\t\toption_label\n\t\t\t\tvalue_label\n\t\t\t}\n\t\t}\n\t\t...on BundleCartItem {\n\t\t\tbundle_options {\n\t\t\t\tid\n\t\t\t\tlabel\n\t\t\t\ttype\n\t\t\t\tvalues {\n\t\t\t\t\tid\n\t\t\t\t\tlabel\n\t\t\t\t\tprice\n\t\t\t\t\tquantity\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  }\n  ${magentoProductFragment}\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const availablePaymentMethodFragment = gql`\n  fragment availablePaymentMethod on AvailablePaymentMethod {\n    code\n    title\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const selectedPaymentMethodFragment = gql`\n  fragment selectedPaymentMethod on SelectedPaymentMethod {\n    code\n    title\n    purchase_order_number\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { moneyFragment } from './money';\n\nexport const availableShippingMethodFragment = gql`\n  fragment availableShippingMethod on AvailableShippingMethod {\n    carrier_code\n    method_code\n    carrier_title\n    method_title\n    amount {\n      ...money\n    }\n  }\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { moneyFragment } from './money';\n\nexport const selectedShippingMethodFragment = gql`\n  fragment selectedShippingMethod on SelectedShippingMethod {\n    carrier_code\n    method_code\n    carrier_title\n    method_title\n    amount {\n      ...money\n    }\n  }\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\nimport { moneyFragment } from './money';\n\nexport const pricesFragment = gql`\n  fragment prices on CartPrices {\n\t\tgrand_total {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_excluding_tax {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_including_tax {\n\t\t\t...money\n\t\t}\n\t\tsubtotal_with_discount_excluding_tax {\n\t\t\t...money\n\t\t}\n\t\tapplied_taxes {\n\t\t\tamount {\n\t\t\t\t...money\n\t\t\t}\n\t\t\tlabel\n\t\t}\n\t\tdiscounts {\n\t\t\tamount {\n\t\t\t\t...money\n\t\t\t}\n\t\t\tlabel\n\t\t}\n\t}\n  ${moneyFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { cartAddressFragment } from './cart-address';\nimport { availablePaymentMethodFragment } from './available-payment-method';\nimport { selectedPaymentMethodFragment } from './selected-payment-method';\nimport { cartItemFragment } from './cart-item';\nimport { cartCouponFragment } from './cart-coupon';\nimport { selectedShippingMethodFragment } from './selected-shipping-method';\nimport { pricesFragment } from './prices';\n\nexport const cartFragment = gql`\n  fragment cart on Cart {\n    id\n    email\n    billing_address {\n      ...cartAddress\n    }\n    shipping_addresses {\n      ...cartAddress\n      ... on ShippingCartAddress {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n    }\n    items {\n      ...cartItem\n    }\n    available_payment_methods {\n      ...availablePaymentMethod\n    }\n    selected_payment_method {\n      ...selectedPaymentMethod\n    }\n    applied_coupons {\n      ...cartCoupon\n    }\n    prices {\n      ...prices\n    }\n  }\n  ${cartAddressFragment}\n  ${availablePaymentMethodFragment}\n  ${selectedPaymentMethodFragment}\n  ${selectedShippingMethodFragment}\n  ${cartItemFragment}\n  ${pricesFragment}\n  ${cartCouponFragment}\n`;\n","import { MagentoGetCartResponse } from './get-cart';\n\nexport interface MagentoAddSimpleCartItemResponse {\n  addSimpleProductsToCart: MagentoGetCartResponse;\n}\n\nexport interface MagentoAddBundleCartItemResponse {\n  addBundleProductsToCart: MagentoGetCartResponse;\n}\n\nexport interface MagentoAddConfigurableCartItemResponse {\n  addConfigurableProductsToCart: MagentoGetCartResponse;\n}\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/public_api';\n\nexport const listCartItems = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListCartItems($cartId: String!) {\n    cart(cart_id: $cartId) {\n      items {\n        ...cartItem\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartItemFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const addSimpleCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddSimpleCartItem($cartId: String!, $input: CartItemInput!) {\n    addSimpleProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n        data: $input\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n\nexport const addBundleCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddBundleCartItem($cartId: String!, $input: CartItemInput!, $options: [BundleOptionInput]!) {\n    addBundleProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n\t\t\t\tdata: $input,\n\t\t\t\tbundle_options: $options\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n\nexport const addConfigurableCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation AddConfigurableCartItem($cartId: String!, $parentSku: String, $data: CartItemInput!) {\n    addConfigurableProductsToCart(input: {\n      cart_id: $cartId,\n      cart_items: [{\n\t\t\t\tparent_sku: $parentSku\n\t\t\t\tdata: $data,\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const removeCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation RemoveCartItem($cartId: String!, $itemId: Int!) {\n    removeItemFromCart(input: {\n      cart_id: $cartId,\n      cart_item_id: $itemId\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateCartItem = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateCartItem($cartId: String!, $input: CartItemUpdateInput!) {\n    updateCartItems(input: {\n      cart_id: $cartId\n      cart_items: [$input]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { availablePaymentMethodFragment } from './fragments/public_api';\n\nexport const listPaymentMethods = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListPaymentMethods($cartId: String!) {\n    cart(cart_id: $cartId) {\n      available_payment_methods {\n        ...availablePaymentMethod\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${availablePaymentMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { selectedPaymentMethodFragment } from './fragments/public_api';\n\nexport const getSelectedPaymentMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetSelectedPaymentMethod($cartId: String!) {\n    cart(cart_id: $cartId) {\n      selected_payment_method {\n        ...selectedPaymentMethod\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${selectedPaymentMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethod($cartId: String!, $payment: PaymentMethodInput!) {\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethodWithBilling = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethodWithBilling(\n    $cartId: String!,\n    $payment: PaymentMethodInput!,\n    $address: BillingAddressInput!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        id\n      }\n    }\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedPaymentMethodWithBillingAndEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedPaymentMethodWithBillingAndEmail(\n    $cartId: String!,\n    $payment: PaymentMethodInput!,\n    $address: BillingAddressInput!,\n    $email: String!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        id\n      }\n    }\n    setPaymentMethodOnCart(input: {\n      cart_id: $cartId\n      payment_method: $payment\n    }) {\n      cart {\n        id\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { availableShippingMethodFragment } from './fragments/public_api';\n\nexport const listShippingMethods = (extraCartFragments: DocumentNode[] = []) => gql`\n  query ListShippingMethods($cartId: String!) {\n    cart(cart_id: $cartId) {\n      id\n      shipping_addresses {\n        available_shipping_methods {\n          ...availableShippingMethod\n        }\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${availableShippingMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { selectedShippingMethodFragment } from './fragments/public_api';\n\nexport const getSelectedShippingMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetSelectedShippingMethod($cartId: String!) {\n    cart(cart_id: $cartId) {\n      shipping_addresses {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${selectedShippingMethodFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const setSelectedShippingMethod = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation SetSelectedShippingMethod($cartId: String!, $method: ShippingMethodInput!) {\n    setShippingMethodsOnCart(input: {\n      cart_id: $cartId\n      shipping_methods: [$method]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartAddressFragment } from './fragments/public_api';\n\nexport const getBillingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetBillingAddress($cartId: String!) {\n    cart(cart_id: $cartId) {\n      billing_address {\n        ...cartAddress\n      }\n      email\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartAddressFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateBillingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateBillingAddress(\n    $cartId: String!,\n    $address: BillingAddressInput!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateBillingAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateBillingAddress(\n    $cartId: String!,\n    $address: BillingAddressInput!,\n    $email: String!\n  ) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: $address\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        email\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartAddressFragment } from './fragments/public_api';\n\nexport const getShippingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetShippingAddress($cartId: String!) {\n    cart(cart_id: $cartId) {\n      shipping_addresses {\n        ...cartAddress\n      }\n      email\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartAddressFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateShippingAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateShippingAddress(\n    $cartId: String!,\n    $address: ShippingAddressInput!\n  ) {\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [$address]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const updateShippingAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateShippingAddress(\n    $cartId: String!,\n    $address: ShippingAddressInput!,\n    $email: String!\n  ) {\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [$address]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        email\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\n/**\n * Update the shipping and billing address of the cart.\n * At the time of writing, Magento 2 processes compound queries in the order they are defined.\n * We rely on this fact and only use the return of the last query.\n * This helps us keep query complexity down and save some server CPU cycles.\n * Driver behavior is not guaranteed if Magento no longer processes compound queries in the order they are defined.\n */\nexport const updateAddress = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateAddress($cartId: String!, $address: CartAddressInput!) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: {\n        address: $address\n      }\n    }) {\n      cart {\n        id\n      }\n    }\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [{\n        address: $address\n      }]\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\n/**\n * Update the shipping and billing address of the cart.\n * At the time of writing, Magento 2 processes compound queries in the order they are defined.\n * We rely on this fact and only use the return of the last query.\n * This helps us keep query complexity down and save some server CPU cycles.\n * Driver behavior is not guaranteed if Magento no longer processes compound queries in the order they are defined.\n */\nexport const updateAddressWithEmail = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation UpdateAddress($cartId: String!, $address: CartAddressInput!, $email: String!) {\n    setBillingAddressOnCart(input: {\n      cart_id: $cartId\n      billing_address: {\n        address: $address\n      }\n    }) {\n      cart {\n        id\n      }\n    }\n    setShippingAddressesOnCart(input: {\n      cart_id: $cartId\n      shipping_addresses: [{\n        address: $address\n      }]\n    }) {\n      cart {\n        id\n      }\n    }\n    setGuestEmailOnCart(input: {\n      cart_id: $cartId,\n      email: $email\n    }) {\n      cart {\n        ...cart\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartFragment } from './fragments/public_api';\n\nexport const getCart = (extraCartFragments: DocumentNode[] = []) => gql`\n  query GetCart($cartId: String!) {\n    cart(cart_id: $cartId) {\n      ...cart\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import gql from 'graphql-tag';\n\nexport const createCart = gql`\n  mutation CreateCart {\n    createEmptyCart\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const placeOrder = gql`\n  mutation PlaceOrder($cartId: String!) {\n    placeOrder(\n      input: {\n        cart_id: $cartId\n      }\n    ) {\n      order {\n        order_number\n      }\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { cartAddressFragment } from './cart-address';\nimport { selectedShippingMethodFragment } from './selected-shipping-method';\nimport { pricesFragment } from './prices';\n\nexport const cartTotalsFragment = gql`\n  fragment cartTotals on Cart {\n    id\n    shipping_addresses {\n      ...cartAddress\n      ... on ShippingCartAddress {\n        selected_shipping_method {\n          ...selectedShippingMethod\n        }\n      }\n    }\n    prices {\n      ...prices\n    }\n  }\n  ${cartAddressFragment}\n  ${selectedShippingMethodFragment}\n  ${pricesFragment}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/cart-item';\nimport { cartCouponFragment } from './fragments/public_api';\nimport { cartTotalsFragment } from './fragments/cart-totals';\n\nexport const applyCoupon = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation ApplyCoupon($cartId: String!, $couponCode: String!) {\n    applyCouponToCart(\n      input: {\n        cart_id: $cartId,\n        coupon_code: $couponCode\n      }\n    ) {\n      cart {\n        id\n        items {\n          ...cartItem\n        }\n        applied_coupons {\n          ...cartCoupon\n\t\t\t\t}\n\t\t\t\t...cartTotals\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartItemFragment}\n\t${cartCouponFragment}\n\t${cartTotalsFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartCouponFragment } from './fragments/public_api';\n\nexport const listCartCoupons = (extraCartFragments: DocumentNode[] = []) => gql`\n  query listCartCoupons($cartId: String!) {\n    cart(cart_id: $cartId) {\n      applied_coupons {\n\t\t\t\t...cartCoupon\n\t\t\t}\n      ${daffBuildFragmentNameSpread(...extraCartFragments)}\n    }\n  }\n  ${cartCouponFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { cartItemFragment } from './fragments/cart-item';\nimport { cartCouponFragment } from './fragments/public_api';\nimport { cartTotalsFragment } from './fragments/cart-totals';\n\nexport const removeAllCoupons = (extraCartFragments: DocumentNode[] = []) => gql`\n  mutation RemoveAllCoupons($cartId: String!) {\n    removeCouponFromCart(\n      input: {\n        cart_id: $cartId\n      }\n    ) {\n      cart {\n        id\n        items {\n          ...cartItem\n        }\n        applied_coupons {\n          ...cartCoupon\n\t\t\t\t}\n\t\t\t\t...cartTotals\n        ${daffBuildFragmentNameSpread(...extraCartFragments)}\n      }\n    }\n  }\n  ${cartItemFragment}\n\t${cartCouponFragment}\n\t${cartTotalsFragment}\n  ${daffBuildFragmentDefinition(...extraCartFragments)}\n`;\n","export enum MagentoCartGraphQlErrorCode {\n\tCART_NOT_FOUND = 'graphql-no-such-entity',\n\tBAD_INPUT = 'graphql-input',\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffBadInputError } from '@daffodil/driver';\nimport { DaffCartNotFoundError, DaffCartDriverErrorCodes } from '@daffodil/cart/driver';\n\nimport { MagentoCartGraphQlErrorCode } from './codes';\n\nexport const DaffCartMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoCartGraphQlErrorCode.CART_NOT_FOUND]: DaffCartNotFoundError,\n\t[MagentoCartGraphQlErrorCode.BAD_INPUT]: DaffBadInputError,\n};\n\nexport const DaffCartMagentoErrorMessageRegexMap = {\n  [DaffCartDriverErrorCodes.INVALID_COUPON_CODE]: /The coupon code isn\\'t valid/\n}\n","import { ApolloError } from 'apollo-client';\n\nimport { daffTransformMagentoError } from '@daffodil/driver/magento';\nimport { DaffCartDriverErrorMap } from '@daffodil/cart/driver';\n\nimport { DaffCartMagentoErrorMap, DaffCartMagentoErrorMessageRegexMap } from './map';\n\n\nfunction transformMagentoCartGraphQlError(error: ApolloError): Error {\n  // TODO: readdress this when we move to eslint\n  // tslint:disable-next-line\n  for (const code in DaffCartMagentoErrorMessageRegexMap) {\n    const matchIndex = error.graphQLErrors[0].message.search(DaffCartMagentoErrorMessageRegexMap[code]);\n\n    if (matchIndex > -1 && DaffCartDriverErrorMap[code]) {\n      return new DaffCartDriverErrorMap[code](error.message)\n    }\n  }\n\n  return daffTransformMagentoError(error, DaffCartMagentoErrorMap);\n};\n\nexport function transformCartMagentoError(error) {\n  // TODO: optional chaining\n  if (error.graphQLErrors && error.graphQLErrors.length) {\n\t\treturn transformMagentoCartGraphQlError(error);\n\t} else {\n\t\treturn daffTransformMagentoError(error, DaffCartMagentoErrorMap);\n\t}\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\n\nexport const DAFF_MAGENTO_CART_MUTATION_QUEUE = new InjectionToken('DAFF_MAGENTO_CART_MUTATION_QUEUE', {\n  providedIn: 'root',\n  factory: () => new DaffQueuedApollo(inject(Apollo))\n})\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartItem, DaffCartItemInput } from '@daffodil/cart';\nimport { DaffCartServiceInterface, DaffCartItemDriver, DaffCartItemServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { getCart, createCart } from './queries/public_api';\nimport { MagentoGetCartResponse } from './queries/responses/get-cart';\nimport { MagentoCreateCartResponse } from './queries/responses/create-cart';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartService implements DaffCartServiceInterface<DaffCart> {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n    @Inject(DaffCartItemDriver) private cartItemDriver: DaffCartItemServiceInterface<\n      DaffCartItem,\n      DaffCartItemInput,\n      DaffCart\n    >,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n  ) {}\n\n  get(cartId: string): Observable<DaffCart> {\n    return this.apollo.query<MagentoGetCartResponse>({\n      query: getCart(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      catchError((error: Error) => throwError(transformCartMagentoError(error))),\n      map(result => this.cartTransformer.transform(result.data.cart))\n    );\n  }\n\n  create(): Observable<{id: string}> {\n    return this.mutationQueue.mutate<MagentoCreateCartResponse>({mutation: createCart}).pipe(\n      map(result => ({id: result.data.createEmptyCart}))\n    )\n  }\n\n  addToCart(productId: string, qty: number): Observable<DaffCart> {\n    throw new Error('Method is deprecated. Use DaffCartItemServiceInterface#add instead.');\n  }\n\n  clear(cartId: string): Observable<Partial<DaffCart>> {\n    return this.cartItemDriver.list(cartId).pipe(\n      switchMap(items =>\n        forkJoin(...items.map(item =>\n          this.cartItemDriver.delete(cartId, item.item_id)\n        ))\n      ),\n\t\t\tswitchMap(() => this.get(cartId))\n    )\n\t}\n}\n","import { DaffCartItemInput, DaffCompositeCartItemInput, DaffCompositeCartItemInputOption, DaffConfigurableCartItemInput } from '@daffodil/cart';\n\nimport { MagentoCartItemInput, MagentoBundledCartItemInput, MagentoBundledCartItemOption, MagentoConfigurableCartItemInput } from '../../models/requests/cart-item';\n\nexport function transformCompositeCartItem(item: DaffCompositeCartItemInput): MagentoBundledCartItemInput {\n\treturn {\n\t\tinput: transformSimpleCartItem(item),\n\t\toptions: item.options ? item.options.map(transformCompositeCartItemOption) : []\n\t}\n}\n\nexport function transformSimpleCartItem(item: DaffCartItemInput): MagentoCartItemInput {\n\treturn {\n\t\tquantity: item.qty,\n\t\tsku: item.productId\n\t}\n}\n\nexport function transformConfigurableCartItem(item: DaffConfigurableCartItemInput): MagentoConfigurableCartItemInput {\n\treturn {\n\t\tparentSku: item.productId,\n\t\tdata: {\n\t\t\tquantity: item.qty,\n\t\t\tsku: String(item.variantId)\n\t\t},\n\t}\n}\n\nfunction transformCompositeCartItemOption(option: DaffCompositeCartItemInputOption): MagentoBundledCartItemOption {\n\treturn {\n\t\tid: Number(option.code),\n\t\tquantity: option.quantity,\n\t\tvalue: [option.value]\n\t}\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartItem, DaffCartItemInput, DaffCart, DaffCartItemInputType, DaffCompositeCartItemInput, DaffConfigurableCartItemInput } from '@daffodil/cart';\nimport { DaffCartItemServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport {\n\tlistCartItems,\n\taddConfigurableCartItem,\n\taddBundleCartItem,\n\taddSimpleCartItem,\n  removeCartItem,\n  updateCartItem\n} from './queries/public_api';\nimport { MagentoConfigurableCartItemInput } from './models/requests/cart-item';\nimport { transformCompositeCartItem, transformSimpleCartItem, transformConfigurableCartItem } from './transforms/inputs/cart-item-input-transformers';\nimport { MagentoListCartItemsResponse } from './queries/responses/list-cart-items';\nimport { MagentoAddSimpleCartItemResponse, MagentoAddBundleCartItemResponse, MagentoAddConfigurableCartItemResponse } from './queries/responses/add-cart-item';\nimport { MagentoRemoveCartItemResponse } from './queries/responses/remove-cart-item';\nimport { DaffMagentoCartItemUpdateInputTransformer } from './transforms/inputs/cart-item-update.service';\nimport { MagentoUpdateCartItemResponse } from './queries/responses/public_api';\nimport { transformMagentoCartItem } from './transforms/outputs/cart-item/cart-item-transformer';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartItemService implements DaffCartItemServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public cartItemUpdateInputTransformer: DaffMagentoCartItemUpdateInputTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartItem[]> {\n    return this.apollo.query<MagentoListCartItemsResponse>({\n      query: listCartItems(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.items.map(transformMagentoCartItem))\n    )\n  }\n\n  get(cartId: string, itemId: number): Observable<DaffCartItem> {\n    return this.list(cartId).pipe(\n      map(items => items.find(item => Number(item.item_id) === itemId))\n    )\n  }\n\n  add(cartId: string, cartItemInput: DaffCartItemInput): Observable<Partial<DaffCart>> {\n\t\tswitch(cartItemInput.type) {\n\t\t\tcase (DaffCartItemInputType.Composite):\n\t\t\t\treturn this.addBundledProduct(cartId, <DaffCompositeCartItemInput>cartItemInput);\n\t\t\tcase (DaffCartItemInputType.Configurable):\n\t\t\t\treturn this.addConfigurableProduct(cartId, <DaffConfigurableCartItemInput>cartItemInput);\n\t\t\tdefault:\n\t\t\t\treturn this.addSimpleProduct(cartId, cartItemInput);\n\t\t}\n  }\n\n  update(cartId: string, itemId: number, changes: Partial<DaffCartItem>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateCartItemResponse>({\n      mutation: updateCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        input: this.cartItemUpdateInputTransformer.transform({\n          ...changes,\n          item_id: itemId\n        })\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.updateCartItems.cart))\n    )\n  }\n\n  delete(cartId: string, itemId: number): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoRemoveCartItemResponse>({\n      mutation: removeCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        itemId\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.removeItemFromCart.cart))\n    )\n  }\n\n\tprivate addBundledProduct(cartId: string, cartItemInput: DaffCompositeCartItemInput): Observable<Partial<DaffCart>> {\n\t\tconst bundleInput = transformCompositeCartItem(cartItemInput);\n\t\treturn this.mutationQueue.mutate<MagentoAddBundleCartItemResponse>({\n      mutation: addBundleCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n\t\t\t\tinput: bundleInput.input,\n\t\t\t\toptions: bundleInput.options\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addBundleProductsToCart.cart))\n    )\n\t}\n\n\tprivate addConfigurableProduct(cartId: string, cartItemInput: DaffConfigurableCartItemInput): Observable<Partial<DaffCart>> {\n\t\tconst configurableInput: MagentoConfigurableCartItemInput = transformConfigurableCartItem(cartItemInput);\n\t\treturn this.mutationQueue.mutate<MagentoAddConfigurableCartItemResponse>({\n      mutation: addConfigurableCartItem(this.extraCartFragments),\n      variables: {\n\t\t\t\tcartId,\n\t\t\t\tparentSku: configurableInput.parentSku,\n\t\t\t\tdata: configurableInput.data\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addConfigurableProductsToCart.cart))\n    )\n\t}\n\n\tprivate addSimpleProduct(cartId: string, cartItemInput: DaffCartItemInput): Observable<Partial<DaffCart>> {\n\t\treturn this.mutationQueue.mutate<MagentoAddSimpleCartItemResponse>({\n      mutation: addSimpleCartItem(this.extraCartFragments),\n      variables: {\n        cartId,\n        input: transformSimpleCartItem(cartItemInput)\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.addSimpleProductsToCart.cart))\n    )\n\t}\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable, throwError } from 'rxjs';\nimport { map, mapTo, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartPaymentMethod, DaffCart, DaffCartAddress } from '@daffodil/cart';\nimport { DaffCartPaymentServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport {\n  getSelectedPaymentMethod,\n  setSelectedPaymentMethod,\n  setSelectedPaymentMethodWithBilling,\n  setSelectedPaymentMethodWithBillingAndEmail\n} from './queries/public_api';\nimport { DaffMagentoPaymentMethodInputTransformer } from './transforms/inputs/payment-method.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport {\n  MagentoGetSelectedPaymentMethodResponse,\n  MagentoSetSelectedPaymentMethodResponse,\n  MagentoSetSelectedPaymentMethodWithBillingResponse,\n  MagentoSetSelectedPaymentMethodWithBillingAndEmailResponse\n} from './queries/responses/public_api';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentService implements DaffCartPaymentServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n    public paymentTransformer: DaffMagentoCartPaymentTransformer,\n    public paymentInputTransformer: DaffMagentoPaymentMethodInputTransformer,\n    public cartAddressInputTransformer: DaffMagentoBillingAddressInputTransformer,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n  ) {}\n\n  get(cartId: string): Observable<DaffCartPaymentMethod> {\n    return this.apollo.query<MagentoGetSelectedPaymentMethodResponse>({\n      query: getSelectedPaymentMethod(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => this.paymentTransformer.transform(result.data.cart.selected_payment_method))\n    );\n  }\n\n  update(cartId: string, payment: Partial<DaffCartPaymentMethod>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodResponse>({\n      mutation: setSelectedPaymentMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: this.paymentInputTransformer.transform(payment)\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.setPaymentMethodOnCart.cart))\n    )\n  }\n\n  updateWithBilling(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email\n      ? this.updateWithBillingAddressAndEmail(cartId, payment, address)\n      : this.updateWithBillingAddress(cartId, payment, address)\n  }\n\n  remove(cartId: string): Observable<void> {\n    return this.mutationQueue.mutate({\n      mutation: setSelectedPaymentMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: {code: ''}\n      }\n    }).pipe(\n      mapTo(undefined)\n    )\n  }\n\n  private updateWithBillingAddress(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodWithBillingResponse>({\n      mutation: setSelectedPaymentMethodWithBilling(this.extraCartFragments),\n      variables: {\n        cartId,\n        payment: this.paymentInputTransformer.transform(payment),\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setPaymentMethodOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateWithBillingAddressAndEmail(cartId: string, payment: Partial<DaffCartPaymentMethod>, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedPaymentMethodWithBillingAndEmailResponse>({\n      mutation: setSelectedPaymentMethodWithBillingAndEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        payment: this.paymentInputTransformer.transform(payment),\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setGuestEmailOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffCartPaymentMethod } from '@daffodil/cart';\nimport { DaffCartPaymentMethodsServiceInterface } from '@daffodil/cart/driver';\n\nimport { listPaymentMethods } from './queries/public_api';\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport { MagentoListPaymentMethodsResponse } from './queries/responses/list-payment-methods';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartPaymentMethodsService implements DaffCartPaymentMethodsServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public paymentTransformer: DaffMagentoCartPaymentTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartPaymentMethod[]> {\n    return this.apollo.query<MagentoListPaymentMethodsResponse>({\n      query: listPaymentMethods(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.available_payment_methods.map(item => this.paymentTransformer.transform(item)))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartBillingAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  getBillingAddress,\n  updateBillingAddress,\n  updateBillingAddressWithEmail\n} from './queries/public_api';\nimport {\n  MagentoGetBillingAddressResponse,\n  MagentoUpdateBillingAddressResponse,\n  MagentoUpdateBillingAddressWithEmailResponse\n} from './queries/responses/public_api';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoBillingAddressTransformer } from './transforms/outputs/billing-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartBillingAddressService implements DaffCartBillingAddressServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public billingAddressTransformer: DaffMagentoBillingAddressTransformer,\n    public billingAddressInputTransformer: DaffMagentoBillingAddressInputTransformer\n  ) {}\n\n  get(cartId: string): Observable<DaffCartAddress> {\n    return this.apollo.query<MagentoGetBillingAddressResponse>({\n      query: getBillingAddress(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.billing_address\n        ? this.billingAddressTransformer.transform({\n          ...result.data.cart.billing_address,\n          email: result.data.cart.email\n        })\n        : null\n      )\n    )\n  }\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateBillingAddressResponse>({\n      mutation: updateBillingAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.billingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setBillingAddressOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateBillingAddressWithEmailResponse>({\n      mutation: updateBillingAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.billingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform({\n        ...resp.data.setBillingAddressOnCart.cart,\n        email: resp.data.setGuestEmailOnCart.cart.email\n      })),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartShippingAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  getShippingAddress,\n  updateShippingAddress,\n  updateShippingAddressWithEmail,\n} from './queries/public_api';\nimport { DaffMagentoShippingAddressInputTransformer } from './transforms/inputs/shipping-address.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport {\n  MagentoGetShippingAddressResponse,\n  MagentoUpdateShippingAddressResponse,\n  MagentoUpdateShippingAddressWithEmailResponse,\n} from './queries/responses/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for a cart's shipping address.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingAddressService implements DaffCartShippingAddressServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public shippingAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public shippingAddressInputTransformer: DaffMagentoShippingAddressInputTransformer\n  ) {}\n\n  get(cartId: string): Observable<DaffCartAddress> {\n    return this.apollo.query<MagentoGetShippingAddressResponse>({\n      query: getShippingAddress(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0]\n        ? this.shippingAddressTransformer.transform({\n          ...result.data.cart.shipping_addresses[0],\n          email: result.data.cart.email\n        })\n        : null\n      )\n    )\n  }\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateShippingAddressResponse>({\n      mutation: updateShippingAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.shippingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setShippingAddressesOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateShippingAddressWithEmailResponse>({\n      mutation: updateShippingAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.shippingAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform({\n        ...resp.data.setShippingAddressesOnCart.cart,\n        email: resp.data.setGuestEmailOnCart.cart.email\n      })),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DaffCartShippingRate } from '@daffodil/cart';\nimport { DaffCartShippingMethodsServiceInterface } from '@daffodil/cart/driver';\n\nimport { listShippingMethods } from './queries/public_api';\nimport { MagentoListShippingMethodsResponse } from './queries/responses/list-shipping-methods';\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for carts' shipping methods.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingMethodsService implements DaffCartShippingMethodsServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer\n  ) {}\n\n  list(cartId: string): Observable<DaffCartShippingRate[]> {\n    return this.apollo.query<MagentoListShippingMethodsResponse>({\n      query: listShippingMethods(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0].available_shipping_methods.map(item =>\n        this.shippingRateTransformer.transform(item)\n      ))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { DocumentNode } from 'graphql';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartShippingRate, DaffCart } from '@daffodil/cart';\nimport { DaffCartShippingInformationServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport {\n  getSelectedShippingMethod,\n  setSelectedShippingMethod,\n  listShippingMethods\n} from './queries/public_api';\nimport { DaffMagentoShippingMethodInputTransformer } from './transforms/inputs/shipping-method.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { MagentoGetSelectedShippingMethodResponse, MagentoSetSelectedShippingMethodResponse, MagentoListShippingMethodsResponse } from './queries/responses/public_api';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartShippingInformationService implements DaffCartShippingInformationServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public shippingRateTransformer: DaffMagentoCartShippingRateTransformer,\n    public shippingMethodInputTransformer: DaffMagentoShippingMethodInputTransformer,\n  ) {}\n\n  get(cartId: string): Observable<DaffCartShippingRate> {\n    return this.apollo.query<MagentoGetSelectedShippingMethodResponse>({\n      query: getSelectedShippingMethod(this.extraCartFragments),\n      variables: {cartId}\n    }).pipe(\n      map(result => result.data.cart.shipping_addresses[0]\n        ? this.shippingRateTransformer.transform(result.data.cart.shipping_addresses[0].selected_shipping_method)\n        : null\n      )\n    );\n  }\n\n  update(cartId: string, shippingInfo: Partial<DaffCartShippingRate>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedShippingMethodResponse>({\n      mutation: setSelectedShippingMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        method: this.shippingMethodInputTransformer.transform(shippingInfo)\n      }\n    }).pipe(\n      switchMap(result =>\n        // because Magento only returns the selected shipping method for the mutation\n        // we have to manually refetch the available shipping methods\n        // with fetchPolicy: 'network-only' in order to skip the cache\n        this.apollo.query<MagentoListShippingMethodsResponse>({\n          query: listShippingMethods(this.extraCartFragments),\n          variables: {cartId},\n          fetchPolicy: 'network-only'\n        }).pipe(\n          map(shippingMethods => ({\n            ...this.cartTransformer.transform(result.data.setShippingMethodsOnCart.cart),\n            available_shipping_methods: shippingMethods.data.cart.shipping_addresses[0].available_shipping_methods.map(item =>\n              this.shippingRateTransformer.transform(item)\n            )\n          }))\n        )\n      )\n    )\n  }\n\n  delete(cartId: string, id?: string | number): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoSetSelectedShippingMethodResponse>({\n      mutation: setSelectedShippingMethod(this.extraCartFragments),\n      variables: {\n        cartId,\n        method: {\n          carrier_code: '',\n          method_code: ''\n        }\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.setShippingMethodsOnCart.cart))\n    )\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { DocumentNode } from 'graphql';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCartAddress, DaffCart } from '@daffodil/cart';\nimport { DaffCartAddressServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  updateAddress,\n  updateAddressWithEmail,\n} from './queries/public_api';\nimport {\n  MagentoUpdateAddressResponse,\n  MagentoUpdateAddressWithEmailResponse,\n} from './queries/responses/public_api';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport { transformCartMagentoError } from './errors/transform';\nimport { DaffMagentoCartAddressInputTransformer } from './transforms/inputs/cart-address.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartAddressService implements DaffCartAddressServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartTransformer,\n    public cartAddressTransformer: DaffMagentoShippingAddressTransformer,\n    public cartAddressInputTransformer: DaffMagentoCartAddressInputTransformer,\n  ) {}\n\n  update(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return address.email ? this.updateAddressWithEmail(cartId, address) : this.updateAddress(cartId, address)\n  }\n\n  private updateAddress(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateAddressResponse>({\n      mutation: updateAddress(this.extraCartFragments),\n      variables: {\n        cartId,\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setShippingAddressesOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n\n  private updateAddressWithEmail(cartId: string, address: Partial<DaffCartAddress>): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoUpdateAddressWithEmailResponse>({\n      mutation: updateAddressWithEmail(this.extraCartFragments),\n      variables: {\n        cartId,\n        email: address.email,\n        address: this.cartAddressInputTransformer.transform(address)\n      }\n    }).pipe(\n      map(resp => this.cartTransformer.transform(resp.data.setGuestEmailOnCart.cart)),\n      catchError(error => throwError(transformCartMagentoError(error))),\n    )\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartOrderResult } from '@daffodil/cart';\nimport { DaffCartOrderServiceInterface } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { placeOrder } from './queries/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport { MagentoPlaceOrderResponse } from './queries/responses/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartOrderService implements DaffCartOrderServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    public cartTransformer: DaffMagentoCartTransformer,\n  ) {}\n\n  placeOrder(cartId: DaffCart['id'], payment?: any): Observable<DaffCartOrderResult> {\n    return this.mutationQueue.mutate<MagentoPlaceOrderResponse>({\n      mutation: placeOrder,\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => ({\n        id: result.data.placeOrder.order.order_number,\n        orderId: result.data.placeOrder.order.order_number,\n        cartId\n      })),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCart } from '@daffodil/cart';\n\nimport { MagentoCart } from '../../models/responses/cart';\nimport { daffMagentoCouponTransform } from './cart-coupon';\nimport { transformMagentoCartItem } from './cart-item/cart-item-transformer';\nimport { transformCartTotals } from './cart-totals-transformer';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartCouponResponseTransformer {\n\n  private transformCartItems(cart: Partial<MagentoCart>): {items: DaffCart['items']} {\n    return {\n      items: cart.items.map(transformMagentoCartItem),\n    }\n  }\n\n  private transformTotals(cart: Partial<MagentoCart>): {\n    grand_total: DaffCart['grand_total'],\n    subtotal: DaffCart['subtotal'],\n  } {\n    return {\n      grand_total: cart.prices.grand_total.value,\n      subtotal: cart.prices.subtotal_excluding_tax.value,\n    }\n  }\n\n  private transformCoupons(cart: Partial<MagentoCart>): {coupons: DaffCart['coupons']} {\n    return {\n      coupons: cart.applied_coupons\n        ? cart.applied_coupons.map(daffMagentoCouponTransform)\n        : []\n    }\n  }\n\n  /**\n   * Transforms the MagentoCart from the cart coupon operations into a DaffCart partial.\n   * @param cart the cart from a magento cart query.\n   */\n  transform(cart: Partial<MagentoCart>): Partial<DaffCart> {\n    return cart ? {\n      ...this.transformCartItems(cart),\n      ...this.transformCoupons(cart),\n      ...this.transformTotals(cart),\n      ...transformCartTotals(cart),\n\n      id: cart.id\n    } : null\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { DocumentNode } from 'graphql';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffQueuedApollo } from '@daffodil/core/graphql'\nimport { DaffCart, DaffCartCoupon } from '@daffodil/cart';\nimport { DaffCartCouponServiceInterface } from '@daffodil/cart/driver';\n\nimport {\n  listCartCoupons,\n  applyCoupon,\n  removeAllCoupons\n} from './queries/public_api';\nimport { transformCartMagentoError } from './errors/transform';\nimport {\n  MagentoListCartCouponsResponse,\n  MagentoApplyCouponResponse,\n  MagentoRemoveAllCouponsResponse\n} from './queries/responses/public_api';\nimport { daffMagentoCouponTransform } from './transforms/outputs/cart-coupon';\nimport { DaffMagentoCartCouponResponseTransformer } from './transforms/outputs/cart-coupon-response.service';\nimport { DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS } from './injection-tokens/public_api';\nimport { DAFF_MAGENTO_CART_MUTATION_QUEUE } from './injection-tokens/cart-mutation-queue.token';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCartCouponService implements DaffCartCouponServiceInterface {\n  constructor(\n    @Inject(DAFF_MAGENTO_CART_MUTATION_QUEUE) private mutationQueue: DaffQueuedApollo,\n    @Inject(DAFF_CART_MAGENTO_EXTRA_CART_FRAGMENTS) public extraCartFragments: DocumentNode[],\n    public cartTransformer: DaffMagentoCartCouponResponseTransformer,\n  ) {}\n\n  apply(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoApplyCouponResponse>({\n      mutation: applyCoupon(this.extraCartFragments),\n      variables: {\n        cartId,\n        couponCode: coupon.code\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.applyCouponToCart.cart)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n\n  list(cartId: DaffCart['id']): Observable<DaffCartCoupon[]> {\n    return this.mutationQueue.mutate<MagentoListCartCouponsResponse>({\n      mutation: listCartCoupons(this.extraCartFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => result.data.cart.applied_coupons.map(daffMagentoCouponTransform)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n\n  remove(cartId: DaffCart['id'], coupon: DaffCartCoupon): Observable<Partial<DaffCart>> {\n    return this.removeAll(cartId)\n  }\n\n  removeAll(cartId: DaffCart['id']): Observable<Partial<DaffCart>> {\n    return this.mutationQueue.mutate<MagentoRemoveAllCouponsResponse>({\n      mutation: removeAllCoupons(this.extraCartFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(result => this.cartTransformer.transform(result.data.removeCouponFromCart.cart)),\n      catchError(err => throwError(transformCartMagentoError(err))),\n    )\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffCartDriver, DaffCartItemDriver, DaffCartAddressDriver, DaffCartBillingAddressDriver, DaffCartShippingAddressDriver, DaffCartShippingMethodsDriver, DaffCartShippingInformationDriver, DaffCartPaymentDriver, DaffCartPaymentMethodsDriver, DaffCartOrderDriver, DaffCartCouponDriver } from '@daffodil/cart/driver';\n\nimport { DaffMagentoCartService } from './cart.service';\nimport { DaffMagentoCartItemService } from './cart-item.service';\nimport { DaffMagentoCartAddressService } from './cart-address.service';\nimport { DaffMagentoCartBillingAddressService } from './cart-billing-address.service';\nimport { DaffMagentoCartShippingAddressService } from './cart-shipping-address.service';\nimport { DaffMagentoCartShippingMethodsService } from './cart-shipping-methods.service';\nimport { DaffMagentoCartPaymentMethodsService } from './cart-payment-methods.service';\nimport { DaffMagentoCartPaymentService } from './cart-payment.service';\nimport { DaffMagentoCartShippingInformationService } from './cart-shipping-information.service';\nimport { DaffMagentoCartOrderService } from './cart-order.service';\nimport { DaffMagentoCartCouponService } from './cart-coupon.service';\n\nimport { DaffMagentoCartShippingRateTransformer } from './transforms/outputs/cart-shipping-rate.service';\nimport { DaffMagentoCartPaymentTransformer } from './transforms/outputs/cart-payment.service';\nimport { DaffMagentoBillingAddressTransformer } from './transforms/outputs/billing-address.service';\nimport { DaffMagentoCartAddressTransformer } from './transforms/outputs/cart-address.service';\nimport { DaffMagentoCartShippingInformationTransformer } from './transforms/outputs/cart-shipping-information.service';\nimport { DaffMagentoCartTransformer } from './transforms/outputs/cart.service';\nimport { DaffMagentoShippingAddressTransformer } from './transforms/outputs/shipping-address.service';\nimport { DaffMagentoCartCouponResponseTransformer } from './transforms/outputs/cart-coupon-response.service';\n\nimport { DaffMagentoCartAddressInputTransformer } from './transforms/inputs/cart-address.service';\nimport { DaffMagentoShippingAddressInputTransformer } from './transforms/inputs/shipping-address.service';\nimport { DaffMagentoBillingAddressInputTransformer } from './transforms/inputs/billing-address.service';\nimport { DaffMagentoCartItemUpdateInputTransformer } from './transforms/inputs/cart-item-update.service';\nimport { DaffMagentoPaymentMethodInputTransformer } from './transforms/inputs/payment-method.service';\nimport { DaffMagentoShippingMethodInputTransformer } from './transforms/inputs/shipping-method.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffCartMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffCartMagentoDriverModule> {\n    return {\n      ngModule: DaffCartMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffCartDriver,\n          useExisting: DaffMagentoCartService\n        },\n        {\n          provide: DaffCartItemDriver,\n          useExisting: DaffMagentoCartItemService\n        },\n        {\n          provide: DaffCartAddressDriver,\n          useExisting: DaffMagentoCartAddressService\n        },\n        {\n          provide: DaffCartBillingAddressDriver,\n          useExisting: DaffMagentoCartBillingAddressService\n        },\n        {\n          provide: DaffCartShippingAddressDriver,\n          useExisting: DaffMagentoCartShippingAddressService\n        },\n        {\n          provide: DaffCartShippingMethodsDriver,\n          useExisting: DaffMagentoCartShippingMethodsService\n        },\n        {\n          provide: DaffCartShippingInformationDriver,\n          useExisting: DaffMagentoCartShippingInformationService\n        },\n        {\n          provide: DaffCartPaymentDriver,\n          useExisting: DaffMagentoCartPaymentService\n        },\n        {\n          provide: DaffCartPaymentMethodsDriver,\n          useExisting: DaffMagentoCartPaymentMethodsService\n        },\n        {\n          provide: DaffCartOrderDriver,\n          useExisting: DaffMagentoCartOrderService\n        },\n        {\n          provide: DaffCartCouponDriver,\n          useExisting: DaffMagentoCartCouponService\n        },\n\n        // output transformers\n        DaffMagentoBillingAddressTransformer,\n        DaffMagentoCartAddressTransformer,\n        DaffMagentoCartPaymentTransformer,\n        DaffMagentoCartShippingInformationTransformer,\n        DaffMagentoCartShippingRateTransformer,\n        DaffMagentoCartTransformer,\n        DaffMagentoShippingAddressTransformer,\n        DaffMagentoCartCouponResponseTransformer,\n\n        // input transformers\n        DaffMagentoCartAddressInputTransformer,\n        DaffMagentoShippingAddressInputTransformer,\n        DaffMagentoBillingAddressInputTransformer,\n        DaffMagentoCartItemUpdateInputTransformer,\n        DaffMagentoPaymentMethodInputTransformer,\n        DaffMagentoShippingMethodInputTransformer,\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}