/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartShippingAddressActionTypes, DaffCartAddressActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
var addError = initializeErrorAdder(DaffCartOperationType.ShippingAddress);
/** @type {?} */
var resetErrors = initializeErrorResetter(DaffCartOperationType.ShippingAddress);
/** @type {?} */
var setLoading = initializeLoadingSetter(DaffCartOperationType.ShippingAddress);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartShippingAddressReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case DaffCartShippingAddressActionTypes.CartShippingAddressLoadAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartShippingAddressActionTypes.CartShippingAddressUpdateAction:
        case DaffCartAddressActionTypes.CartAddressUpdateAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartShippingAddressActionTypes.CartShippingAddressLoadSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, { shipping_address: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingAddressActionTypes.CartShippingAddressUpdateSuccessAction:
        case DaffCartAddressActionTypes.CartAddressUpdateSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingAddressActionTypes.CartShippingAddressLoadFailureAction:
        case DaffCartShippingAddressActionTypes.CartShippingAddressUpdateFailureAction:
        case DaffCartAddressActionTypes.CartAddressUpdateFailureAction:
            return tslib_1.__assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaGlwcGluZy1hZGRyZXNzLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGFmZm9kaWwvY2FydC9zdGF0ZS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhcnQtc2hpcHBpbmctYWRkcmVzcy9jYXJ0LXNoaXBwaW5nLWFkZHJlc3MucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR3hELE9BQU8sRUFDTCxrQ0FBa0MsRUFDbEMsMEJBQTBCLEdBQzNCLE1BQU0sMEJBQTBCLENBQUM7QUFDbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztJQUVqRSxRQUFRLEdBQUcsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDOztJQUN0RSxXQUFXLEdBQUcsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDOztJQUM1RSxVQUFVLEdBQUcsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDOzs7Ozs7O0FBRWpGLE1BQU0sVUFBVSwwQkFBMEIsQ0FDeEMsS0FBb0IsRUFDcEIsTUFBbUI7SUFEbkIsc0JBQUEsRUFBQSxvQkFBb0I7SUFHcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssa0NBQWtDLENBQUMsNkJBQTZCO1lBQ25FLDRCQUNLLEtBQUssRUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFDeEQ7UUFFSixLQUFLLGtDQUFrQyxDQUFDLCtCQUErQixDQUFDO1FBQ3hFLEtBQUssMEJBQTBCLENBQUMsdUJBQXVCO1lBQ3JELDRCQUNLLEtBQUssRUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLGtDQUFrQyxDQUFDLG9DQUFvQztZQUMxRSw0QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSx1QkFDQyxLQUFLLENBQUMsSUFBSSxJQUNiLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxPQUFPLE9BRS9CLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKLEtBQUssa0NBQWtDLENBQUMsc0NBQXNDLENBQUM7UUFDL0UsS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEI7WUFDNUQsNEJBQ0ssS0FBSyxFQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQzVCLElBQUksdUJBQ0MsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLENBQUMsT0FBTyxLQUVoQixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLGtDQUFrQyxDQUFDLG9DQUFvQyxDQUFDO1FBQzdFLEtBQUssa0NBQWtDLENBQUMsc0NBQXNDLENBQUM7UUFDL0UsS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEI7WUFDNUQsNEJBQ0ssS0FBSyxFQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmTG9hZGluZ1N0YXRlIH0gZnJvbSAnQGRhZmZvZGlsL2NvcmUvc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnQgfSBmcm9tICdAZGFmZm9kaWwvY2FydCc7XG5cbmltcG9ydCB7XG4gIERhZmZDYXJ0U2hpcHBpbmdBZGRyZXNzQWN0aW9uVHlwZXMsXG4gIERhZmZDYXJ0QWRkcmVzc0FjdGlvblR5cGVzLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlIH0gZnJvbSAnLi4vY2FydC1pbml0aWFsLXN0YXRlJztcbmltcG9ydCB7IERhZmZDYXJ0UmVkdWNlclN0YXRlIH0gZnJvbSAnLi4vY2FydC1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb24tdHlwZXMudHlwZSc7XG5pbXBvcnQgeyBEYWZmQ2FydE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi9jYXJ0LW9wZXJhdGlvbi10eXBlLmVudW0nO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUVycm9yQWRkZXIsIGluaXRpYWxpemVFcnJvclJlc2V0dGVyIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9yLXN0YXRlLWhlbHBlcnMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIgfSBmcm9tICcuLi9sb2FkaW5nL2NhcnQtbG9hZGluZy50eXBlJztcblxuY29uc3QgYWRkRXJyb3IgPSBpbml0aWFsaXplRXJyb3JBZGRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdBZGRyZXNzKTtcbmNvbnN0IHJlc2V0RXJyb3JzID0gaW5pdGlhbGl6ZUVycm9yUmVzZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLlNoaXBwaW5nQWRkcmVzcyk7XG5jb25zdCBzZXRMb2FkaW5nID0gaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLlNoaXBwaW5nQWRkcmVzcyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0U2hpcHBpbmdBZGRyZXNzUmVkdWNlcjxUIGV4dGVuZHMgRGFmZkNhcnQ+KFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBBY3Rpb25UeXBlc1xuKTogRGFmZkNhcnRSZWR1Y2VyU3RhdGU8VD4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0FkZHJlc3NMb2FkQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5SZXNvbHZpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0FkZHJlc3NVcGRhdGVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFkZHJlc3NBY3Rpb25UeXBlcy5DYXJ0QWRkcmVzc1VwZGF0ZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuTXV0YXRpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0FkZHJlc3NMb2FkU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICBzaGlwcGluZ19hZGRyZXNzOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0FkZHJlc3NBY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdBZGRyZXNzVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0QWRkcmVzc0FjdGlvblR5cGVzLkNhcnRBZGRyZXNzVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0FkZHJlc3NBY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdBZGRyZXNzTG9hZEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0FkZHJlc3NVcGRhdGVGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRBZGRyZXNzQWN0aW9uVHlwZXMuQ2FydEFkZHJlc3NVcGRhdGVGYWlsdXJlQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLmFkZEVycm9yKHN0YXRlLmVycm9ycywgYWN0aW9uLnBheWxvYWQpLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==