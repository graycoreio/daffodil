/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
var addError = initializeErrorAdder(DaffCartOperationType.Cart);
/** @type {?} */
var resetErrors = initializeErrorResetter(DaffCartOperationType.Cart);
/** @type {?} */
var setLoading = initializeLoadingSetter(DaffCartOperationType.Cart);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case DaffCartActionTypes.ResolveCartAction:
        case DaffCartActionTypes.CartLoadAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartActionTypes.CartClearAction:
        case DaffCartActionTypes.AddToCartAction:
        case DaffCartActionTypes.CartCreateAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartActionTypes.CartLoadSuccessAction:
        case DaffCartActionTypes.CartClearSuccessAction:
        case DaffCartActionTypes.AddToCartSuccessAction:
        case DaffCartActionTypes.CartCreateSuccessAction:
        case DaffCartActionTypes.ResolveCartSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartActionTypes.CartCreateSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, initialState.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartActionTypes.CartLoadFailureAction:
        case DaffCartActionTypes.CartClearFailureAction:
        case DaffCartActionTypes.AddToCartFailureAction:
        case DaffCartActionTypes.CartCreateFailureAction:
        case DaffCartActionTypes.CartStorageFailureAction:
        case DaffCartActionTypes.ResolveCartFailureAction:
            return tslib_1.__assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhZmZvZGlsL2NhcnQvc3RhdGUvIiwic291cmNlcyI6WyJyZWR1Y2Vycy9jYXJ0L2NhcnQucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR3hELE9BQU8sRUFDTCxtQkFBbUIsR0FDcEIsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0lBRWpFLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7O0lBQzNELFdBQVcsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7O0lBQ2pFLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7QUFFdEUsTUFBTSxVQUFVLFdBQVcsQ0FDekIsS0FBb0IsRUFDcEIsTUFBbUI7SUFEbkIsc0JBQUEsRUFBQSxvQkFBb0I7SUFHcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssbUJBQW1CLENBQUMsaUJBQWlCLENBQUM7UUFDM0MsS0FBSyxtQkFBbUIsQ0FBQyxjQUFjO1lBQ3JDLDRCQUNLLEtBQUssRUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFDeEQ7UUFFSixLQUFLLG1CQUFtQixDQUFDLGVBQWUsQ0FBQztRQUN6QyxLQUFLLG1CQUFtQixDQUFDLGVBQWUsQ0FBQztRQUN6QyxLQUFLLG1CQUFtQixDQUFDLGdCQUFnQjtZQUN2Qyw0QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUMvQyxLQUFLLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDO1FBQ2hELEtBQUssbUJBQW1CLENBQUMsc0JBQXNCLENBQUM7UUFDaEQsS0FBSyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQztRQUNqRCxLQUFLLG1CQUFtQixDQUFDLHdCQUF3QjtZQUMvQyw0QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSx1QkFDQyxLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sQ0FBQyxPQUFPLEtBRWhCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVOLEtBQUssbUJBQW1CLENBQUMsdUJBQXVCO1lBQy9DLDRCQUNRLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLHVCQUNDLFlBQVksQ0FBQyxJQUFJLEVBQ2pCLE1BQU0sQ0FBQyxPQUFPLEtBRWhCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUNOLEtBQUssbUJBQW1CLENBQUMscUJBQXFCLENBQUM7UUFDN0MsS0FBSyxtQkFBbUIsQ0FBQyxzQkFBc0IsQ0FBQztRQUNoRCxLQUFLLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDO1FBQ2hELEtBQUssbUJBQW1CLENBQUMsdUJBQXVCLENBQUM7UUFDakQsS0FBSyxtQkFBbUIsQ0FBQyx3QkFBd0IsQ0FBQztRQUNsRCxLQUFLLG1CQUFtQixDQUFDLHdCQUF3QjtZQUMvQyw0QkFDSyxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUN0QyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSjtZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhZmZMb2FkaW5nU3RhdGUgfSBmcm9tICdAZGFmZm9kaWwvY29yZS9zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydCB9IGZyb20gJ0BkYWZmb2RpbC9jYXJ0JztcblxuaW1wb3J0IHtcbiAgRGFmZkNhcnRBY3Rpb25UeXBlcyxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSB9IGZyb20gJy4uL2NhcnQtaW5pdGlhbC1zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydFJlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL2NhcnQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9uLXR5cGVzLnR5cGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vY2FydC1vcGVyYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IGluaXRpYWxpemVFcnJvckFkZGVyLCBpbml0aWFsaXplRXJyb3JSZXNldHRlciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvci1zdGF0ZS1oZWxwZXJzJztcbmltcG9ydCB7IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkNhcnQpO1xuY29uc3QgcmVzZXRFcnJvcnMgPSBpbml0aWFsaXplRXJyb3JSZXNldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuQ2FydCk7XG5jb25zdCBzZXRMb2FkaW5nID0gaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkNhcnQpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydFJlZHVjZXI8VCBleHRlbmRzIERhZmZDYXJ0PihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uVHlwZXNcbik6IERhZmZDYXJ0UmVkdWNlclN0YXRlPFQ+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5SZXNvbHZlQ2FydEFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0QWN0aW9uVHlwZXMuQ2FydExvYWRBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLlJlc29sdmluZylcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0QWN0aW9uVHlwZXMuQ2FydENsZWFyQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5BZGRUb0NhcnRBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkNhcnRDcmVhdGVBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLk11dGF0aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5DYXJ0TG9hZFN1Y2Nlc3NBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkNhcnRDbGVhclN1Y2Nlc3NBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkFkZFRvQ2FydFN1Y2Nlc3NBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkNhcnRDcmVhdGVTdWNjZXNzQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5SZXNvbHZlQ2FydFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWRcbiAgICAgICAgfSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cblx0XHRjYXNlIERhZmZDYXJ0QWN0aW9uVHlwZXMuQ2FydENyZWF0ZVN1Y2Nlc3NBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLmluaXRpYWxTdGF0ZS5jYXJ0LFxuICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXHRcdGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5DYXJ0TG9hZEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkNhcnRDbGVhckZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkFkZFRvQ2FydEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLkNhcnRDcmVhdGVGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRBY3Rpb25UeXBlcy5DYXJ0U3RvcmFnZUZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFjdGlvblR5cGVzLlJlc29sdmVDYXJ0RmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5hZGRFcnJvcihzdGF0ZS5lcnJvcnMsIGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXX0=