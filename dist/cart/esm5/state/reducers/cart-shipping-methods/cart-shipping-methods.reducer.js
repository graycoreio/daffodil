/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartShippingMethodsActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
var addError = initializeErrorAdder(DaffCartOperationType.ShippingMethods);
/** @type {?} */
var resetErrors = initializeErrorResetter(DaffCartOperationType.ShippingMethods);
/** @type {?} */
var setLoading = initializeLoadingSetter(DaffCartOperationType.ShippingMethods);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartShippingMethodsReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, { available_shipping_methods: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadFailureAction:
            return tslib_1.__assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaGlwcGluZy1tZXRob2RzLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGFmZm9kaWwvY2FydC9zdGF0ZS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhcnQtc2hpcHBpbmctbWV0aG9kcy9jYXJ0LXNoaXBwaW5nLW1ldGhvZHMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR3hELE9BQU8sRUFDTCxrQ0FBa0MsR0FDbkMsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0lBRWpFLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7O0lBQ3RFLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7O0lBQzVFLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7Ozs7Ozs7QUFFakYsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxLQUFvQixFQUNwQixNQUFtQjtJQURuQixzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxrQ0FBa0MsQ0FBQyw2QkFBNkI7WUFDbkUsNEJBQ0ssS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUN4RDtRQUVKLEtBQUssa0NBQWtDLENBQUMsb0NBQW9DO1lBQzFFLDRCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLHVCQUNDLEtBQUssQ0FBQyxJQUFJLElBQ2IsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLE9BQU8sT0FFekMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSyxrQ0FBa0MsQ0FBQyxvQ0FBb0M7WUFDMUUsNEJBQ0ssS0FBSyxFQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmTG9hZGluZ1N0YXRlIH0gZnJvbSAnQGRhZmZvZGlsL2NvcmUvc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnQgfSBmcm9tICdAZGFmZm9kaWwvY2FydCc7XG5cbmltcG9ydCB7XG4gIERhZmZDYXJ0U2hpcHBpbmdNZXRob2RzQWN0aW9uVHlwZXMsXG59IGZyb20gJy4uLy4uL2FjdGlvbnMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBpbml0aWFsU3RhdGUgfSBmcm9tICcuLi9jYXJ0LWluaXRpYWwtc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRSZWR1Y2VyU3RhdGUgfSBmcm9tICcuLi9jYXJ0LXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbi10eXBlcy50eXBlJztcbmltcG9ydCB7IERhZmZDYXJ0T3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uL2NhcnQtb3BlcmF0aW9uLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBpbml0aWFsaXplRXJyb3JBZGRlciwgaW5pdGlhbGl6ZUVycm9yUmVzZXR0ZXIgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3Itc3RhdGUtaGVscGVycyc7XG5pbXBvcnQgeyBpbml0aWFsaXplTG9hZGluZ1NldHRlciB9IGZyb20gJy4uL2xvYWRpbmcvY2FydC1sb2FkaW5nLnR5cGUnO1xuXG5jb25zdCBhZGRFcnJvciA9IGluaXRpYWxpemVFcnJvckFkZGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5TaGlwcGluZ01ldGhvZHMpO1xuY29uc3QgcmVzZXRFcnJvcnMgPSBpbml0aWFsaXplRXJyb3JSZXNldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdNZXRob2RzKTtcbmNvbnN0IHNldExvYWRpbmcgPSBpbml0aWFsaXplTG9hZGluZ1NldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdNZXRob2RzKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRTaGlwcGluZ01ldGhvZHNSZWR1Y2VyPFQgZXh0ZW5kcyBEYWZmQ2FydD4oXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IEFjdGlvblR5cGVzXG4pOiBEYWZmQ2FydFJlZHVjZXJTdGF0ZTxUPiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdNZXRob2RzQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nTWV0aG9kc0xvYWRBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLlJlc29sdmluZylcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdNZXRob2RzQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nTWV0aG9kc0xvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIGF2YWlsYWJsZV9zaGlwcGluZ19tZXRob2RzOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ01ldGhvZHNBY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdNZXRob2RzTG9hZEZhaWx1cmVBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uYWRkRXJyb3Ioc3RhdGUuZXJyb3JzLCBhY3Rpb24ucGF5bG9hZCksXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIl19