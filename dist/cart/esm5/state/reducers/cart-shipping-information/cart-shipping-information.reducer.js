/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartShippingInformationActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
var addError = initializeErrorAdder(DaffCartOperationType.ShippingInformation);
/** @type {?} */
var resetErrors = initializeErrorResetter(DaffCartOperationType.ShippingInformation);
/** @type {?} */
var setLoading = initializeLoadingSetter(DaffCartOperationType.ShippingInformation);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartShippingInformationReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteAction:
            return tslib_1.__assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, { shipping_information: tslib_1.__assign({}, action.payload, { address_id: null }) }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateSuccessAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteSuccessAction:
            return tslib_1.__assign({}, state, resetErrors(state.errors), { cart: tslib_1.__assign({}, state.cart, { shipping_information: null }, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadFailureAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateFailureAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteFailureAction:
            return tslib_1.__assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaGlwcGluZy1pbmZvcm1hdGlvbi5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhZmZvZGlsL2NhcnQvc3RhdGUvIiwic291cmNlcyI6WyJyZWR1Y2Vycy9jYXJ0LXNoaXBwaW5nLWluZm9ybWF0aW9uL2NhcnQtc2hpcHBpbmctaW5mb3JtYXRpb24ucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR3hELE9BQU8sRUFDTCxzQ0FBc0MsR0FDdkMsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0lBRWpFLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQzs7SUFDMUUsV0FBVyxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDOztJQUNoRixVQUFVLEdBQUcsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUM7Ozs7Ozs7QUFFckYsTUFBTSxVQUFVLDhCQUE4QixDQUM1QyxLQUFvQixFQUNwQixNQUFtQjtJQURuQixzQkFBQSxFQUFBLG9CQUFvQjtJQUdwQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxzQ0FBc0MsQ0FBQyxpQ0FBaUM7WUFDM0UsNEJBQ0ssS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUN4RDtRQUVKLEtBQUssc0NBQXNDLENBQUMsbUNBQW1DLENBQUM7UUFDaEYsS0FBSyxzQ0FBc0MsQ0FBQyxtQ0FBbUM7WUFDN0UsNEJBQ0ssS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKLEtBQUssc0NBQXNDLENBQUMsd0NBQXdDO1lBQ2xGLDRCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLHVCQUNDLEtBQUssQ0FBQyxJQUFJLElBRWIsb0JBQW9CLHVCQUFNLE1BQU0sQ0FBQyxPQUFPLElBQUUsVUFBVSxFQUFFLElBQUksVUFFekQsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSyxzQ0FBc0MsQ0FBQywwQ0FBMEMsQ0FBQztRQUN2RixLQUFLLHNDQUFzQyxDQUFDLDBDQUEwQztZQUNwRiw0QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSx1QkFDQyxLQUFLLENBQUMsSUFBSSxJQUViLG9CQUFvQixFQUFFLElBQUksSUFDdkIsTUFBTSxDQUFDLE9BQU8sS0FFaEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSyxzQ0FBc0MsQ0FBQyx3Q0FBd0MsQ0FBQztRQUNyRixLQUFLLHNDQUFzQyxDQUFDLDBDQUEwQyxDQUFDO1FBQ3ZGLEtBQUssc0NBQXNDLENBQUMsMENBQTBDO1lBQ3BGLDRCQUNLLEtBQUssRUFDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3RDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKO1lBQ0UsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGFmZkxvYWRpbmdTdGF0ZSB9IGZyb20gJ0BkYWZmb2RpbC9jb3JlL3N0YXRlJztcbmltcG9ydCB7IERhZmZDYXJ0IH0gZnJvbSAnQGRhZmZvZGlsL2NhcnQnO1xuXG5pbXBvcnQge1xuICBEYWZmQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25BY3Rpb25UeXBlcyxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSB9IGZyb20gJy4uL2NhcnQtaW5pdGlhbC1zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydFJlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL2NhcnQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9uLXR5cGVzLnR5cGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vY2FydC1vcGVyYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IGluaXRpYWxpemVFcnJvckFkZGVyLCBpbml0aWFsaXplRXJyb3JSZXNldHRlciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvci1zdGF0ZS1oZWxwZXJzJztcbmltcG9ydCB7IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLlNoaXBwaW5nSW5mb3JtYXRpb24pO1xuY29uc3QgcmVzZXRFcnJvcnMgPSBpbml0aWFsaXplRXJyb3JSZXNldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdJbmZvcm1hdGlvbik7XG5jb25zdCBzZXRMb2FkaW5nID0gaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLlNoaXBwaW5nSW5mb3JtYXRpb24pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydFNoaXBwaW5nSW5mb3JtYXRpb25SZWR1Y2VyPFQgZXh0ZW5kcyBEYWZmQ2FydD4oXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IEFjdGlvblR5cGVzXG4pOiBEYWZmQ2FydFJlZHVjZXJTdGF0ZTxUPiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uTG9hZEFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuUmVzb2x2aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25VcGRhdGVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25BY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkRlbGV0ZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuTXV0YXRpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25BY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkxvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB3b3JrYXJvdW5kXG4gICAgICAgICAgc2hpcHBpbmdfaW5mb3JtYXRpb246IHsuLi5hY3Rpb24ucGF5bG9hZCwgYWRkcmVzc19pZDogbnVsbH1cbiAgICAgICAgfSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uRGVsZXRlU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICAvLyBlbnN1cmUgdGhhdCBzaGlwcGluZ19pbmZvcm1hdGlvbiBpcyBzZXQgdG8gbnVsbCBpbiBjYXNlIGl0cyBub3QgaW5jbHVkZWQgaW4gYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICBzaGlwcGluZ19pbmZvcm1hdGlvbjogbnVsbCxcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25Mb2FkRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uVXBkYXRlRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uRGVsZXRlRmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5hZGRFcnJvcihzdGF0ZS5lcnJvcnMsIGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXX0=