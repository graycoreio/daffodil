/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartShippingMethodsActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.ShippingMethods);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.ShippingMethods);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.ShippingMethods);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartShippingMethodsReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { available_shipping_methods: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingMethodsActionTypes.CartShippingMethodsLoadFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaGlwcGluZy1tZXRob2RzLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGFmZm9kaWwvY2FydC9zdGF0ZS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhcnQtc2hpcHBpbmctbWV0aG9kcy9jYXJ0LXNoaXBwaW5nLW1ldGhvZHMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUNMLGtDQUFrQyxHQUNuQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFakUsUUFBUSxHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQzs7TUFDdEUsV0FBVyxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQzs7TUFDNUUsVUFBVSxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQzs7Ozs7OztBQUVqRixNQUFNLFVBQVUsMEJBQTBCLENBQ3hDLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQW1CO0lBRW5CLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLGtDQUFrQyxDQUFDLDZCQUE2QjtZQUNuRSx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQ3hEO1FBRUosS0FBSyxrQ0FBa0MsQ0FBQyxvQ0FBb0M7WUFDMUUseUJBQ0ssS0FBSyxFQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQzVCLElBQUksb0JBQ0MsS0FBSyxDQUFDLElBQUksSUFDYiwwQkFBMEIsRUFBRSxNQUFNLENBQUMsT0FBTyxPQUV6QyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLGtDQUFrQyxDQUFDLG9DQUFvQztZQUMxRSx5QkFDSyxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUN0QyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSjtZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhZmZMb2FkaW5nU3RhdGUgfSBmcm9tICdAZGFmZm9kaWwvY29yZS9zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydCB9IGZyb20gJ0BkYWZmb2RpbC9jYXJ0JztcblxuaW1wb3J0IHtcbiAgRGFmZkNhcnRTaGlwcGluZ01ldGhvZHNBY3Rpb25UeXBlcyxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSB9IGZyb20gJy4uL2NhcnQtaW5pdGlhbC1zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydFJlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL2NhcnQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9uLXR5cGVzLnR5cGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vY2FydC1vcGVyYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IGluaXRpYWxpemVFcnJvckFkZGVyLCBpbml0aWFsaXplRXJyb3JSZXNldHRlciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvci1zdGF0ZS1oZWxwZXJzJztcbmltcG9ydCB7IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLlNoaXBwaW5nTWV0aG9kcyk7XG5jb25zdCByZXNldEVycm9ycyA9IGluaXRpYWxpemVFcnJvclJlc2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5TaGlwcGluZ01ldGhvZHMpO1xuY29uc3Qgc2V0TG9hZGluZyA9IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5TaGlwcGluZ01ldGhvZHMpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydFNoaXBwaW5nTWV0aG9kc1JlZHVjZXI8VCBleHRlbmRzIERhZmZDYXJ0PihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uVHlwZXNcbik6IERhZmZDYXJ0UmVkdWNlclN0YXRlPFQ+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ01ldGhvZHNBY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdNZXRob2RzTG9hZEFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuUmVzb2x2aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ01ldGhvZHNBY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdNZXRob2RzTG9hZFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgYXZhaWxhYmxlX3NoaXBwaW5nX21ldGhvZHM6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nTWV0aG9kc0FjdGlvblR5cGVzLkNhcnRTaGlwcGluZ01ldGhvZHNMb2FkRmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5hZGRFcnJvcihzdGF0ZS5lcnJvcnMsIGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXX0=