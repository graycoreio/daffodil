/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartPaymentActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.Payment);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.Payment);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.Payment);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartPaymentReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartPaymentActionTypes.CartPaymentLoadAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartPaymentActionTypes.CartPaymentUpdateAction:
        case DaffCartPaymentActionTypes.CartPaymentUpdateWithBillingAction:
        case DaffCartPaymentActionTypes.CartPaymentRemoveAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartPaymentActionTypes.CartPaymentLoadSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { payment: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartPaymentActionTypes.CartPaymentRemoveSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { payment: null }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartPaymentActionTypes.CartPaymentUpdateSuccessAction:
        case DaffCartPaymentActionTypes.CartPaymentUpdateWithBillingSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartPaymentActionTypes.CartPaymentLoadFailureAction:
        case DaffCartPaymentActionTypes.CartPaymentUpdateFailureAction:
        case DaffCartPaymentActionTypes.CartPaymentUpdateWithBillingFailureAction:
        case DaffCartPaymentActionTypes.CartPaymentRemoveFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        /**
         * This reducer is temporary until custom reducers can be injected by the @daffodil/paymentSource modules. Right now,
         * the payment modules need a way to update cart state with a payment token.
         *
         * todo: remove when possible.
         */
        case DaffCartPaymentActionTypes.CartPaymentMethodAddAction:
            return Object.assign({}, state, { cart: Object.assign({}, state.cart, { payment: Object.assign({}, action.payload) }) });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1wYXltZW50LnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGFmZm9kaWwvY2FydC9zdGF0ZS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhcnQtcGF5bWVudC9jYXJ0LXBheW1lbnQucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUNMLDBCQUEwQixHQUMzQixNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFakUsUUFBUSxHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQzs7TUFDOUQsV0FBVyxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQzs7TUFDcEUsVUFBVSxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQzs7Ozs7OztBQUV6RSxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQW1CO0lBRW5CLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLDBCQUEwQixDQUFDLHFCQUFxQjtZQUNuRCx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQ3hEO1FBRUosS0FBSywwQkFBMEIsQ0FBQyx1QkFBdUIsQ0FBQztRQUN4RCxLQUFLLDBCQUEwQixDQUFDLGtDQUFrQyxDQUFDO1FBQ25FLEtBQUssMEJBQTBCLENBQUMsdUJBQXVCO1lBQ3JELHlCQUNLLEtBQUssRUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLDBCQUEwQixDQUFDLDRCQUE0QjtZQUMxRCx5QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSxvQkFDQyxLQUFLLENBQUMsSUFBSSxJQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxPQUV0QixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLDBCQUEwQixDQUFDLDhCQUE4QjtZQUM1RCx5QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSxvQkFDQyxLQUFLLENBQUMsSUFBSSxJQUNiLE9BQU8sRUFBRSxJQUFJLE9BRVosVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEIsQ0FBQztRQUMvRCxLQUFLLDBCQUEwQixDQUFDLHlDQUF5QztZQUN2RSx5QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSxvQkFDQyxLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sQ0FBQyxPQUFPLEtBRWhCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKLEtBQUssMEJBQTBCLENBQUMsNEJBQTRCLENBQUM7UUFDN0QsS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEIsQ0FBQztRQUMvRCxLQUFLLDBCQUEwQixDQUFDLHlDQUF5QyxDQUFDO1FBQzFFLEtBQUssMEJBQTBCLENBQUMsOEJBQThCO1lBQzVELHlCQUNLLEtBQUssRUFDTCxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3RDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUMxRDtRQUdIOzs7OztXQUtHO1FBQ0gsS0FBSywwQkFBMEIsQ0FBQywwQkFBMEI7WUFDekQseUJBQ0ksS0FBSyxJQUNSLElBQUksb0JBQ0EsS0FBSyxDQUFDLElBQUksSUFDYixPQUFPLG9CQUNILE1BQU0sQ0FBQyxPQUFPLFFBR2xCO1FBR0Q7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmTG9hZGluZ1N0YXRlIH0gZnJvbSAnQGRhZmZvZGlsL2NvcmUvc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnQgfSBmcm9tICdAZGFmZm9kaWwvY2FydCc7XG5cbmltcG9ydCB7XG4gIERhZmZDYXJ0UGF5bWVudEFjdGlvblR5cGVzLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlIH0gZnJvbSAnLi4vY2FydC1pbml0aWFsLXN0YXRlJztcbmltcG9ydCB7IERhZmZDYXJ0UmVkdWNlclN0YXRlIH0gZnJvbSAnLi4vY2FydC1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb24tdHlwZXMudHlwZSc7XG5pbXBvcnQgeyBEYWZmQ2FydE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi9jYXJ0LW9wZXJhdGlvbi10eXBlLmVudW0nO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUVycm9yQWRkZXIsIGluaXRpYWxpemVFcnJvclJlc2V0dGVyIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9yLXN0YXRlLWhlbHBlcnMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIgfSBmcm9tICcuLi9sb2FkaW5nL2NhcnQtbG9hZGluZy50eXBlJztcblxuY29uc3QgYWRkRXJyb3IgPSBpbml0aWFsaXplRXJyb3JBZGRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuUGF5bWVudCk7XG5jb25zdCByZXNldEVycm9ycyA9IGluaXRpYWxpemVFcnJvclJlc2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5QYXltZW50KTtcbmNvbnN0IHNldExvYWRpbmcgPSBpbml0aWFsaXplTG9hZGluZ1NldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuUGF5bWVudCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0UGF5bWVudFJlZHVjZXI8VCBleHRlbmRzIERhZmZDYXJ0PihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uVHlwZXNcbik6IERhZmZDYXJ0UmVkdWNlclN0YXRlPFQ+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRGFmZkNhcnRQYXltZW50QWN0aW9uVHlwZXMuQ2FydFBheW1lbnRMb2FkQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5SZXNvbHZpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudFVwZGF0ZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0UGF5bWVudEFjdGlvblR5cGVzLkNhcnRQYXltZW50VXBkYXRlV2l0aEJpbGxpbmdBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudFJlbW92ZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuTXV0YXRpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudExvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIHBheW1lbnQ6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudFJlbW92ZVN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgcGF5bWVudDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRQYXltZW50QWN0aW9uVHlwZXMuQ2FydFBheW1lbnRVcGRhdGVTdWNjZXNzQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRQYXltZW50QWN0aW9uVHlwZXMuQ2FydFBheW1lbnRVcGRhdGVXaXRoQmlsbGluZ1N1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWRcbiAgICAgICAgfSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0UGF5bWVudEFjdGlvblR5cGVzLkNhcnRQYXltZW50TG9hZEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudFVwZGF0ZUZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydFBheW1lbnRBY3Rpb25UeXBlcy5DYXJ0UGF5bWVudFVwZGF0ZVdpdGhCaWxsaW5nRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0UGF5bWVudEFjdGlvblR5cGVzLkNhcnRQYXltZW50UmVtb3ZlRmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5hZGRFcnJvcihzdGF0ZS5lcnJvcnMsIGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcblx0XHRcdH07XG5cblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgcmVkdWNlciBpcyB0ZW1wb3JhcnkgdW50aWwgY3VzdG9tIHJlZHVjZXJzIGNhbiBiZSBpbmplY3RlZCBieSB0aGUgQGRhZmZvZGlsL3BheW1lbnRTb3VyY2UgbW9kdWxlcy4gUmlnaHQgbm93LFxuXHRcdCAqIHRoZSBwYXltZW50IG1vZHVsZXMgbmVlZCBhIHdheSB0byB1cGRhdGUgY2FydCBzdGF0ZSB3aXRoIGEgcGF5bWVudCB0b2tlbi5cblx0XHQgKlxuXHRcdCAqIHRvZG86IHJlbW92ZSB3aGVuIHBvc3NpYmxlLlxuXHRcdCAqL1xuXHRcdGNhc2UgRGFmZkNhcnRQYXltZW50QWN0aW9uVHlwZXMuQ2FydFBheW1lbnRNZXRob2RBZGRBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0Y2FydDoge1xuXHRcdFx0XHRcdC4uLnN0YXRlLmNhcnQsXG5cdFx0XHRcdFx0cGF5bWVudDoge1xuXHRcdFx0XHRcdFx0Li4uYWN0aW9uLnBheWxvYWRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==