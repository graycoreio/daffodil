/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffCartItemActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { DaffCartItemLoadingState, initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.Item);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.Item);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.Item);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartItemReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartItemActionTypes.CartItemListAction:
        case DaffCartItemActionTypes.CartItemLoadAction:
            return Object.assign({}, state, setLoading(state.loading, DaffCartItemLoadingState.Resolving));
        case DaffCartItemActionTypes.CartItemAddAction:
            return Object.assign({}, state, setLoading(state.loading, DaffCartItemLoadingState.Adding));
        case DaffCartItemActionTypes.CartItemListSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { items: action.payload }) }, setLoading(state.loading, DaffCartItemLoadingState.Complete));
        case DaffCartItemActionTypes.CartItemLoadSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { items: state.cart.items.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.item_id === action.payload.item_id
                        ? action.payload
                        : item)) }) }, setLoading(state.loading, DaffCartItemLoadingState.Complete));
        case DaffCartItemActionTypes.CartItemUpdateSuccessAction:
        case DaffCartItemActionTypes.CartItemAddSuccessAction:
        case DaffCartItemActionTypes.CartItemDeleteSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffCartItemLoadingState.Complete));
        case DaffCartItemActionTypes.CartItemListFailureAction:
        case DaffCartItemActionTypes.CartItemLoadFailureAction:
        case DaffCartItemActionTypes.CartItemUpdateFailureAction:
        case DaffCartItemActionTypes.CartItemAddFailureAction:
        case DaffCartItemActionTypes.CartItemDeleteFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffCartItemLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1pdGVtLnJlZHVjZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGFmZm9kaWwvY2FydC9zdGF0ZS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhcnQtaXRlbS9jYXJ0LWl0ZW0ucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUNMLHVCQUF1QixHQUN4QixNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFM0YsUUFBUSxHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQzs7TUFDM0QsV0FBVyxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQzs7TUFDakUsVUFBVSxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQzs7Ozs7OztBQUV0RSxNQUFNLFVBQVUsZUFBZSxDQUM3QixLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUFtQjtJQUVuQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyx1QkFBdUIsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRCxLQUFLLHVCQUF1QixDQUFDLGtCQUFrQjtZQUM3Qyx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsd0JBQXdCLENBQUMsU0FBUyxDQUFDLEVBQ2hFO1FBRU4sS0FBSyx1QkFBdUIsQ0FBQyxpQkFBaUI7WUFDN0MseUJBQ1EsS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxFQUM3RDtRQUVKLEtBQUssdUJBQXVCLENBQUMseUJBQXlCO1lBQ3BELHlCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLG9CQUNDLEtBQUssQ0FBQyxJQUFJLElBQ2IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxPQUFPLE9BRXBCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxFQUMvRDtRQUVKLEtBQUssdUJBQXVCLENBQUMseUJBQXlCO1lBQ3BELHlCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLG9CQUNDLEtBQUssQ0FBQyxJQUFJLElBQ2IsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7b0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDakMsSUFBSSxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU87d0JBQ3JDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTzt3QkFDaEIsQ0FBQyxDQUFDLElBQUksRUFDVCxPQUVBLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxFQUMvRDtRQUVKLEtBQUssdUJBQXVCLENBQUMsMkJBQTJCLENBQUM7UUFDekQsS0FBSyx1QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQztRQUN0RCxLQUFLLHVCQUF1QixDQUFDLDJCQUEyQjtZQUN0RCx5QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSxvQkFDQyxLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sQ0FBQyxPQUFPLEtBRWhCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxFQUMvRDtRQUVKLEtBQUssdUJBQXVCLENBQUMseUJBQXlCLENBQUM7UUFDdkQsS0FBSyx1QkFBdUIsQ0FBQyx5QkFBeUIsQ0FBQztRQUN2RCxLQUFLLHVCQUF1QixDQUFDLDJCQUEyQixDQUFDO1FBQ3pELEtBQUssdUJBQXVCLENBQUMsd0JBQXdCLENBQUM7UUFDdEQsS0FBSyx1QkFBdUIsQ0FBQywyQkFBMkI7WUFDdEQseUJBQ0ssS0FBSyxFQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLEVBQy9EO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmQ2FydCB9IGZyb20gJ0BkYWZmb2RpbC9jYXJ0JztcblxuaW1wb3J0IHtcbiAgRGFmZkNhcnRJdGVtQWN0aW9uVHlwZXMsXG59IGZyb20gJy4uLy4uL2FjdGlvbnMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBpbml0aWFsU3RhdGUgfSBmcm9tICcuLi9jYXJ0LWluaXRpYWwtc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRSZWR1Y2VyU3RhdGUgfSBmcm9tICcuLi9jYXJ0LXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2FjdGlvbi10eXBlcy50eXBlJztcbmltcG9ydCB7IERhZmZDYXJ0T3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uL2NhcnQtb3BlcmF0aW9uLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBpbml0aWFsaXplRXJyb3JBZGRlciwgaW5pdGlhbGl6ZUVycm9yUmVzZXR0ZXIgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3Itc3RhdGUtaGVscGVycyc7XG5pbXBvcnQgeyBEYWZmQ2FydEl0ZW1Mb2FkaW5nU3RhdGUsIGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkl0ZW0pO1xuY29uc3QgcmVzZXRFcnJvcnMgPSBpbml0aWFsaXplRXJyb3JSZXNldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuSXRlbSk7XG5jb25zdCBzZXRMb2FkaW5nID0gaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkl0ZW0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydEl0ZW1SZWR1Y2VyPFQgZXh0ZW5kcyBEYWZmQ2FydD4oXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IEFjdGlvblR5cGVzXG4pOiBEYWZmQ2FydFJlZHVjZXJTdGF0ZTxUPiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtTGlzdEFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtTG9hZEFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZDYXJ0SXRlbUxvYWRpbmdTdGF0ZS5SZXNvbHZpbmcpXG4gICAgICB9O1xuXG5cdFx0Y2FzZSBEYWZmQ2FydEl0ZW1BY3Rpb25UeXBlcy5DYXJ0SXRlbUFkZEFjdGlvbjpcblx0XHRcdHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZDYXJ0SXRlbUxvYWRpbmdTdGF0ZS5BZGRpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydEl0ZW1BY3Rpb25UeXBlcy5DYXJ0SXRlbUxpc3RTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIGl0ZW1zOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZDYXJ0SXRlbUxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydEl0ZW1BY3Rpb25UeXBlcy5DYXJ0SXRlbUxvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIGl0ZW1zOiBzdGF0ZS5jYXJ0Lml0ZW1zLm1hcChpdGVtID0+XG4gICAgICAgICAgICBpdGVtLml0ZW1faWQgPT09IGFjdGlvbi5wYXlsb2FkLml0ZW1faWRcbiAgICAgICAgICAgICAgPyBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgICA6IGl0ZW1cbiAgICAgICAgICApXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkNhcnRJdGVtTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtQWRkU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtRGVsZXRlU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZDYXJ0SXRlbUxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydEl0ZW1BY3Rpb25UeXBlcy5DYXJ0SXRlbUxpc3RGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRJdGVtQWN0aW9uVHlwZXMuQ2FydEl0ZW1Mb2FkRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtVXBkYXRlRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtQWRkRmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0SXRlbUFjdGlvblR5cGVzLkNhcnRJdGVtRGVsZXRlRmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5hZGRFcnJvcihzdGF0ZS5lcnJvcnMsIGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmQ2FydEl0ZW1Mb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==