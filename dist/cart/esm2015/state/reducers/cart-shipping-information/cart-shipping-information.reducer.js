/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartShippingInformationActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.ShippingInformation);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.ShippingInformation);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.ShippingInformation);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartShippingInformationReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { shipping_information: Object.assign({}, action.payload, { address_id: null }) }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateSuccessAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { shipping_information: null }, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartShippingInformationActionTypes.CartShippingInformationLoadFailureAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationUpdateFailureAction:
        case DaffCartShippingInformationActionTypes.CartShippingInformationDeleteFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1zaGlwcGluZy1pbmZvcm1hdGlvbi5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhZmZvZGlsL2NhcnQvc3RhdGUvIiwic291cmNlcyI6WyJyZWR1Y2Vycy9jYXJ0LXNoaXBwaW5nLWluZm9ybWF0aW9uL2NhcnQtc2hpcHBpbmctaW5mb3JtYXRpb24ucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUNMLHNDQUFzQyxHQUN2QyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFakUsUUFBUSxHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDOztNQUMxRSxXQUFXLEdBQUcsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUM7O01BQ2hGLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQzs7Ozs7OztBQUVyRixNQUFNLFVBQVUsOEJBQThCLENBQzVDLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQW1CO0lBRW5CLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLHNDQUFzQyxDQUFDLGlDQUFpQztZQUMzRSx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQ3hEO1FBRUosS0FBSyxzQ0FBc0MsQ0FBQyxtQ0FBbUMsQ0FBQztRQUNoRixLQUFLLHNDQUFzQyxDQUFDLG1DQUFtQztZQUM3RSx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUosS0FBSyxzQ0FBc0MsQ0FBQyx3Q0FBd0M7WUFDbEYseUJBQ0ssS0FBSyxFQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQzVCLElBQUksb0JBQ0MsS0FBSyxDQUFDLElBQUksSUFFYixvQkFBb0Isb0JBQU0sTUFBTSxDQUFDLE9BQU8sSUFBRSxVQUFVLEVBQUUsSUFBSSxVQUV6RCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLHNDQUFzQyxDQUFDLDBDQUEwQyxDQUFDO1FBQ3ZGLEtBQUssc0NBQXNDLENBQUMsMENBQTBDO1lBQ3BGLHlCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLG9CQUNDLEtBQUssQ0FBQyxJQUFJLElBRWIsb0JBQW9CLEVBQUUsSUFBSSxJQUN2QixNQUFNLENBQUMsT0FBTyxLQUVoQixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLHNDQUFzQyxDQUFDLHdDQUF3QyxDQUFDO1FBQ3JGLEtBQUssc0NBQXNDLENBQUMsMENBQTBDLENBQUM7UUFDdkYsS0FBSyxzQ0FBc0MsQ0FBQywwQ0FBMEM7WUFDcEYseUJBQ0ssS0FBSyxFQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmTG9hZGluZ1N0YXRlIH0gZnJvbSAnQGRhZmZvZGlsL2NvcmUvc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnQgfSBmcm9tICdAZGFmZm9kaWwvY2FydCc7XG5cbmltcG9ydCB7XG4gIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlIH0gZnJvbSAnLi4vY2FydC1pbml0aWFsLXN0YXRlJztcbmltcG9ydCB7IERhZmZDYXJ0UmVkdWNlclN0YXRlIH0gZnJvbSAnLi4vY2FydC1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi9hY3Rpb24tdHlwZXMudHlwZSc7XG5pbXBvcnQgeyBEYWZmQ2FydE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi9jYXJ0LW9wZXJhdGlvbi10eXBlLmVudW0nO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUVycm9yQWRkZXIsIGluaXRpYWxpemVFcnJvclJlc2V0dGVyIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9yLXN0YXRlLWhlbHBlcnMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUxvYWRpbmdTZXR0ZXIgfSBmcm9tICcuLi9sb2FkaW5nL2NhcnQtbG9hZGluZy50eXBlJztcblxuY29uc3QgYWRkRXJyb3IgPSBpbml0aWFsaXplRXJyb3JBZGRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdJbmZvcm1hdGlvbik7XG5jb25zdCByZXNldEVycm9ycyA9IGluaXRpYWxpemVFcnJvclJlc2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5TaGlwcGluZ0luZm9ybWF0aW9uKTtcbmNvbnN0IHNldExvYWRpbmcgPSBpbml0aWFsaXplTG9hZGluZ1NldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuU2hpcHBpbmdJbmZvcm1hdGlvbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0U2hpcHBpbmdJbmZvcm1hdGlvblJlZHVjZXI8VCBleHRlbmRzIERhZmZDYXJ0PihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uVHlwZXNcbik6IERhZmZDYXJ0UmVkdWNlclN0YXRlPFQ+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25Mb2FkQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5SZXNvbHZpbmcpXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25BY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdJbmZvcm1hdGlvblVwZGF0ZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uRGVsZXRlQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5NdXRhdGluZylcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkFjdGlvblR5cGVzLkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uTG9hZFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHdvcmthcm91bmRcbiAgICAgICAgICBzaGlwcGluZ19pbmZvcm1hdGlvbjogey4uLmFjdGlvbi5wYXlsb2FkLCBhZGRyZXNzX2lkOiBudWxsfVxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25VcGRhdGVTdWNjZXNzQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25EZWxldGVTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHNoaXBwaW5nX2luZm9ybWF0aW9uIGlzIHNldCB0byBudWxsIGluIGNhc2UgaXRzIG5vdCBpbmNsdWRlZCBpbiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgIHNoaXBwaW5nX2luZm9ybWF0aW9uOiBudWxsLFxuICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25BY3Rpb25UeXBlcy5DYXJ0U2hpcHBpbmdJbmZvcm1hdGlvbkxvYWRGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25VcGRhdGVGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRTaGlwcGluZ0luZm9ybWF0aW9uQWN0aW9uVHlwZXMuQ2FydFNoaXBwaW5nSW5mb3JtYXRpb25EZWxldGVGYWlsdXJlQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLmFkZEVycm9yKHN0YXRlLmVycm9ycywgYWN0aW9uLnBheWxvYWQpLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==