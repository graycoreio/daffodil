/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartBillingAddressActionTypes, DaffCartAddressActionTypes } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.BillingAddress);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.BillingAddress);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.BillingAddress);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartBillingAddressReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartBillingAddressActionTypes.CartBillingAddressLoadAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartBillingAddressActionTypes.CartBillingAddressUpdateAction:
        case DaffCartAddressActionTypes.CartAddressUpdateAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartBillingAddressActionTypes.CartBillingAddressLoadSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { billing_address: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartBillingAddressActionTypes.CartBillingAddressUpdateSuccessAction:
        case DaffCartAddressActionTypes.CartAddressUpdateSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartBillingAddressActionTypes.CartBillingAddressLoadFailureAction:
        case DaffCartBillingAddressActionTypes.CartBillingAddressUpdateFailureAction:
        case DaffCartAddressActionTypes.CartAddressUpdateFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1iaWxsaW5nLWFkZHJlc3MucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYWZmb2RpbC9jYXJ0L3N0YXRlLyIsInNvdXJjZXMiOlsicmVkdWNlcnMvY2FydC1iaWxsaW5nLWFkZHJlc3MvY2FydC1iaWxsaW5nLWFkZHJlc3MucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUNMLGlDQUFpQyxFQUNqQywwQkFBMEIsRUFDM0IsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7O01BRWpFLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7O01BQ3JFLFdBQVcsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7O01BQzNFLFVBQVUsR0FBRyx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7Ozs7Ozs7QUFFaEYsTUFBTSxVQUFVLHlCQUF5QixDQUN2QyxLQUFLLEdBQUcsWUFBWSxFQUNwQixNQUFtQjtJQUVuQixRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDbkIsS0FBSyxpQ0FBaUMsQ0FBQyw0QkFBNEI7WUFDakUseUJBQ0ssS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUN4RDtRQUVKLEtBQUssaUNBQWlDLENBQUMsOEJBQThCLENBQUM7UUFDdEUsS0FBSywwQkFBMEIsQ0FBQyx1QkFBdUI7WUFDckQseUJBQ0ssS0FBSyxFQUNMLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKLEtBQUssaUNBQWlDLENBQUMsbUNBQW1DO1lBQ3hFLHlCQUNLLEtBQUssRUFDTCxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixJQUFJLG9CQUNDLEtBQUssQ0FBQyxJQUFJLElBQ2IsZUFBZSxFQUFFLE1BQU0sQ0FBQyxPQUFPLE9BRTlCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUN2RDtRQUVKLEtBQUssaUNBQWlDLENBQUMscUNBQXFDLENBQUM7UUFDN0UsS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEI7WUFDNUQseUJBQ0ssS0FBSyxFQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQzVCLElBQUksb0JBQ0MsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLENBQUMsT0FBTyxLQUVoQixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLGlDQUFpQyxDQUFDLG1DQUFtQyxDQUFDO1FBQzNFLEtBQUssaUNBQWlDLENBQUMscUNBQXFDLENBQUM7UUFDN0UsS0FBSywwQkFBMEIsQ0FBQyw4QkFBOEI7WUFDNUQseUJBQ0ssS0FBSyxFQUNMLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDdEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQ3ZEO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYWZmTG9hZGluZ1N0YXRlIH0gZnJvbSAnQGRhZmZvZGlsL2NvcmUvc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkNhcnQgfSBmcm9tICdAZGFmZm9kaWwvY2FydCc7XG5cbmltcG9ydCB7XG4gIERhZmZDYXJ0QmlsbGluZ0FkZHJlc3NBY3Rpb25UeXBlcyxcbiAgRGFmZkNhcnRBZGRyZXNzQWN0aW9uVHlwZXNcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSB9IGZyb20gJy4uL2NhcnQtaW5pdGlhbC1zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydFJlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL2NhcnQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9uLXR5cGVzLnR5cGUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUVycm9yQWRkZXIsIGluaXRpYWxpemVFcnJvclJlc2V0dGVyIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9yLXN0YXRlLWhlbHBlcnMnO1xuaW1wb3J0IHsgRGFmZkNhcnRPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vY2FydC1vcGVyYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkJpbGxpbmdBZGRyZXNzKTtcbmNvbnN0IHJlc2V0RXJyb3JzID0gaW5pdGlhbGl6ZUVycm9yUmVzZXR0ZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkJpbGxpbmdBZGRyZXNzKTtcbmNvbnN0IHNldExvYWRpbmcgPSBpbml0aWFsaXplTG9hZGluZ1NldHRlcihEYWZmQ2FydE9wZXJhdGlvblR5cGUuQmlsbGluZ0FkZHJlc3MpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydEJpbGxpbmdBZGRyZXNzUmVkdWNlcjxUIGV4dGVuZHMgRGFmZkNhcnQ+KFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBBY3Rpb25UeXBlc1xuKTogRGFmZkNhcnRSZWR1Y2VyU3RhdGU8VD4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBEYWZmQ2FydEJpbGxpbmdBZGRyZXNzQWN0aW9uVHlwZXMuQ2FydEJpbGxpbmdBZGRyZXNzTG9hZEFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuUmVzb2x2aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRCaWxsaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRCaWxsaW5nQWRkcmVzc1VwZGF0ZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0QWRkcmVzc0FjdGlvblR5cGVzLkNhcnRBZGRyZXNzVXBkYXRlQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5NdXRhdGluZylcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0QmlsbGluZ0FkZHJlc3NBY3Rpb25UeXBlcy5DYXJ0QmlsbGluZ0FkZHJlc3NMb2FkU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydEJpbGxpbmdBZGRyZXNzQWN0aW9uVHlwZXMuQ2FydEJpbGxpbmdBZGRyZXNzVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0QWRkcmVzc0FjdGlvblR5cGVzLkNhcnRBZGRyZXNzVXBkYXRlU3VjY2Vzc0FjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5yZXNldEVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgLi4uc3RhdGUuY2FydCxcbiAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZFxuICAgICAgICB9LFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRCaWxsaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRCaWxsaW5nQWRkcmVzc0xvYWRGYWlsdXJlQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRCaWxsaW5nQWRkcmVzc0FjdGlvblR5cGVzLkNhcnRCaWxsaW5nQWRkcmVzc1VwZGF0ZUZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydEFkZHJlc3NBY3Rpb25UeXBlcy5DYXJ0QWRkcmVzc1VwZGF0ZUZhaWx1cmVBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uYWRkRXJyb3Ioc3RhdGUuZXJyb3JzLCBhY3Rpb24ucGF5bG9hZCksXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuIl19