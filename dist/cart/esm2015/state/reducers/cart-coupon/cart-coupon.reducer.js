/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffLoadingState } from '@daffodil/core/state';
import { DaffCartCouponActionTypes, } from '../../actions/public_api';
import { initialState } from '../cart-initial-state';
import { DaffCartOperationType } from '../cart-operation-type.enum';
import { initializeErrorAdder, initializeErrorResetter } from '../errors/error-state-helpers';
import { initializeLoadingSetter } from '../loading/cart-loading.type';
/** @type {?} */
const addError = initializeErrorAdder(DaffCartOperationType.Coupon);
/** @type {?} */
const resetErrors = initializeErrorResetter(DaffCartOperationType.Coupon);
/** @type {?} */
const setLoading = initializeLoadingSetter(DaffCartOperationType.Coupon);
/**
 * @template T
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function cartCouponReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCartCouponActionTypes.CartCouponListAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Resolving));
        case DaffCartCouponActionTypes.CartCouponApplyAction:
        case DaffCartCouponActionTypes.CartCouponRemoveAction:
        case DaffCartCouponActionTypes.CartCouponRemoveAllAction:
            return Object.assign({}, state, setLoading(state.loading, DaffLoadingState.Mutating));
        case DaffCartCouponActionTypes.CartCouponApplySuccessAction:
        case DaffCartCouponActionTypes.CartCouponRemoveSuccessAction:
        case DaffCartCouponActionTypes.CartCouponRemoveAllSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, action.payload) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartCouponActionTypes.CartCouponListSuccessAction:
            return Object.assign({}, state, resetErrors(state.errors), { cart: Object.assign({}, state.cart, { coupons: action.payload }) }, setLoading(state.loading, DaffLoadingState.Complete));
        case DaffCartCouponActionTypes.CartCouponApplyFailureAction:
        case DaffCartCouponActionTypes.CartCouponListFailureAction:
        case DaffCartCouponActionTypes.CartCouponRemoveAllFailureAction:
        case DaffCartCouponActionTypes.CartCouponRemoveFailureAction:
            return Object.assign({}, state, addError(state.errors, action.payload), setLoading(state.loading, DaffLoadingState.Complete));
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1jb3Vwb24ucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYWZmb2RpbC9jYXJ0L3N0YXRlLyIsInNvdXJjZXMiOlsicmVkdWNlcnMvY2FydC1jb3Vwb24vY2FydC1jb3Vwb24ucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUNMLHlCQUF5QixHQUMxQixNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFakUsUUFBUSxHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQzs7TUFDN0QsV0FBVyxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQzs7TUFDbkUsVUFBVSxHQUFHLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQzs7Ozs7OztBQUV4RSxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQW1CO0lBRW5CLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLHlCQUF5QixDQUFDLG9CQUFvQjtZQUNqRCx5QkFDSyxLQUFLLEVBQ0wsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQ3hEO1FBRUosS0FBSyx5QkFBeUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUNyRCxLQUFLLHlCQUF5QixDQUFDLHNCQUFzQixDQUFDO1FBQ3RELEtBQUsseUJBQXlCLENBQUMseUJBQXlCO1lBQ3RELHlCQUNLLEtBQUssRUFDTCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLHlCQUF5QixDQUFDLDRCQUE0QixDQUFDO1FBQzVELEtBQUsseUJBQXlCLENBQUMsNkJBQTZCLENBQUM7UUFDN0QsS0FBSyx5QkFBeUIsQ0FBQyxnQ0FBZ0M7WUFDN0QseUJBQ0ssS0FBSyxFQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQzVCLElBQUksb0JBQ0MsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLENBQUMsT0FBTyxLQUVoQixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLHlCQUF5QixDQUFDLDJCQUEyQjtZQUN4RCx5QkFDSyxLQUFLLEVBQ0wsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFDNUIsSUFBSSxvQkFDQyxLQUFLLENBQUMsSUFBSSxJQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxPQUV0QixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSixLQUFLLHlCQUF5QixDQUFDLDRCQUE0QixDQUFDO1FBQzVELEtBQUsseUJBQXlCLENBQUMsMkJBQTJCLENBQUM7UUFDM0QsS0FBSyx5QkFBeUIsQ0FBQyxnQ0FBZ0MsQ0FBQztRQUNoRSxLQUFLLHlCQUF5QixDQUFDLDZCQUE2QjtZQUMxRCx5QkFDSyxLQUFLLEVBQ0wsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUN0QyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFDdkQ7UUFFSjtZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhZmZMb2FkaW5nU3RhdGUgfSBmcm9tICdAZGFmZm9kaWwvY29yZS9zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydCB9IGZyb20gJ0BkYWZmb2RpbC9jYXJ0JztcblxuaW1wb3J0IHtcbiAgRGFmZkNhcnRDb3Vwb25BY3Rpb25UeXBlcyxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSB9IGZyb20gJy4uL2NhcnQtaW5pdGlhbC1zdGF0ZSc7XG5pbXBvcnQgeyBEYWZmQ2FydFJlZHVjZXJTdGF0ZSB9IGZyb20gJy4uL2NhcnQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vYWN0aW9uLXR5cGVzLnR5cGUnO1xuaW1wb3J0IHsgRGFmZkNhcnRPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vY2FydC1vcGVyYXRpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IGluaXRpYWxpemVFcnJvckFkZGVyLCBpbml0aWFsaXplRXJyb3JSZXNldHRlciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvci1zdGF0ZS1oZWxwZXJzJztcbmltcG9ydCB7IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyIH0gZnJvbSAnLi4vbG9hZGluZy9jYXJ0LWxvYWRpbmcudHlwZSc7XG5cbmNvbnN0IGFkZEVycm9yID0gaW5pdGlhbGl6ZUVycm9yQWRkZXIoRGFmZkNhcnRPcGVyYXRpb25UeXBlLkNvdXBvbik7XG5jb25zdCByZXNldEVycm9ycyA9IGluaXRpYWxpemVFcnJvclJlc2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5Db3Vwb24pO1xuY29uc3Qgc2V0TG9hZGluZyA9IGluaXRpYWxpemVMb2FkaW5nU2V0dGVyKERhZmZDYXJ0T3BlcmF0aW9uVHlwZS5Db3Vwb24pO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydENvdXBvblJlZHVjZXI8VCBleHRlbmRzIERhZmZDYXJ0PihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uVHlwZXNcbik6IERhZmZDYXJ0UmVkdWNlclN0YXRlPFQ+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRGFmZkNhcnRDb3Vwb25BY3Rpb25UeXBlcy5DYXJ0Q291cG9uTGlzdEFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuUmVzb2x2aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRDb3Vwb25BY3Rpb25UeXBlcy5DYXJ0Q291cG9uQXBwbHlBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydENvdXBvbkFjdGlvblR5cGVzLkNhcnRDb3Vwb25SZW1vdmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydENvdXBvbkFjdGlvblR5cGVzLkNhcnRDb3Vwb25SZW1vdmVBbGxBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLk11dGF0aW5nKVxuICAgICAgfTtcblxuICAgIGNhc2UgRGFmZkNhcnRDb3Vwb25BY3Rpb25UeXBlcy5DYXJ0Q291cG9uQXBwbHlTdWNjZXNzQWN0aW9uOlxuICAgIGNhc2UgRGFmZkNhcnRDb3Vwb25BY3Rpb25UeXBlcy5DYXJ0Q291cG9uUmVtb3ZlU3VjY2Vzc0FjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0Q291cG9uQWN0aW9uVHlwZXMuQ2FydENvdXBvblJlbW92ZUFsbFN1Y2Nlc3NBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucmVzZXRFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIC4uLnN0YXRlLmNhcnQsXG4gICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWRcbiAgICAgICAgfSxcbiAgICAgICAgLi4uc2V0TG9hZGluZyhzdGF0ZS5sb2FkaW5nLCBEYWZmTG9hZGluZ1N0YXRlLkNvbXBsZXRlKSxcbiAgICAgIH07XG5cbiAgICBjYXNlIERhZmZDYXJ0Q291cG9uQWN0aW9uVHlwZXMuQ2FydENvdXBvbkxpc3RTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLnJlc2V0RXJyb3JzKHN0YXRlLmVycm9ycyksXG4gICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxuICAgICAgICAgIGNvdXBvbnM6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnNldExvYWRpbmcoc3RhdGUubG9hZGluZywgRGFmZkxvYWRpbmdTdGF0ZS5Db21wbGV0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBEYWZmQ2FydENvdXBvbkFjdGlvblR5cGVzLkNhcnRDb3Vwb25BcHBseUZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydENvdXBvbkFjdGlvblR5cGVzLkNhcnRDb3Vwb25MaXN0RmFpbHVyZUFjdGlvbjpcbiAgICBjYXNlIERhZmZDYXJ0Q291cG9uQWN0aW9uVHlwZXMuQ2FydENvdXBvblJlbW92ZUFsbEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2FydENvdXBvbkFjdGlvblR5cGVzLkNhcnRDb3Vwb25SZW1vdmVGYWlsdXJlQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIC4uLmFkZEVycm9yKHN0YXRlLmVycm9ycywgYWN0aW9uLnBheWxvYWQpLFxuICAgICAgICAuLi5zZXRMb2FkaW5nKHN0YXRlLmxvYWRpbmcsIERhZmZMb2FkaW5nU3RhdGUuQ29tcGxldGUpLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiJdfQ==