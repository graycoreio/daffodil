{"version":3,"sources":["ng://@daffodil/driver/magento/schema/schema.ts","ng://@daffodil/driver/magento/errors/transform.ts"],"names":["schema","error","map","graphQLErrors","length","lookup","extensions","category","message","transformGraphQlError"],"mappings":"uTAEaA,u1DCcb,SAAsEC,EAAYC,GAEjF,OAAID,EAAME,cAdX,SACCF,EACAC,GAEA,IAAKD,EAAME,cAAcC,OAAQ,OAAOH,EACxC,IAAMI,EAASH,EAAID,EAAME,cAAc,GAAGG,WAAWC,UACrD,OAAOF,EAAS,IAAIA,EAAOJ,EAAMO,SAAWP,EASpCQ,CAAyBR,EAAOC,GAEhCD","sourcesContent":["import introspectionQueryResultData from './introspection.json';\n\nexport const schema = introspectionQueryResultData;","import { ApolloError } from 'apollo-client';\n\nimport { DaffErrorCodeMap } from '@daffodil/core';\n\nfunction transformGraphQlError<T extends DaffErrorCodeMap>(\n\terror: ApolloError,\n\tmap: T,\n): Error {\n\tif (!error.graphQLErrors.length) return error;\n\tconst lookup = map[error.graphQLErrors[0].extensions.category];\n\treturn lookup ? new lookup(error.message) : error;\n};\n\n/**\n * Transforms the passed error according to the lookup in the passed map.\n */\nexport function daffTransformMagentoError<T extends DaffErrorCodeMap>(error: any, map: T): Error {\n  // TODO: handle network errors\n\tif (error.graphQLErrors) {\n\t\treturn transformGraphQlError<T>(error, map);\n\t} else {\n\t\treturn error;\n\t}\n};\n"]}