import { Observable } from 'rxjs';
import { Action, Store } from '@ngrx/store';
import { Dictionary } from '@ngrx/entity';
import { DaffOrder, DaffOrderTotal } from '@daffodil/order';
import { DaffOrderReducersState } from '../../reducers/public_api';
import { DaffOrderFacadeInterface } from './order-facade.interface';
import { DaffOrderEntitySelectors } from '../../selectors/order-entities.selector';
export declare class DaffOrderFacade<T extends DaffOrder = DaffOrder> implements DaffOrderFacadeInterface<T> {
    private store;
    loading$: Observable<boolean>;
    errors$: Observable<string[]>;
    orders$: Observable<T[]>;
    orderIds$: Observable<(string | number)[]>;
    orderCount$: Observable<number>;
    orderEntities$: Observable<Dictionary<T>>;
    placedOrder$: Observable<T>;
    hasPlacedOrder$: Observable<boolean>;
    _order: DaffOrderEntitySelectors<T>['selectOrder'];
    _totals: DaffOrderEntitySelectors<T>['selectOrderTotals'];
    _appliedCodes: DaffOrderEntitySelectors<T>['selectOrderAppliedCodes'];
    _items: DaffOrderEntitySelectors<T>['selectOrderItems'];
    _billingAddresses: DaffOrderEntitySelectors<T>['selectOrderBillingAddresses'];
    _shippingAddresses: DaffOrderEntitySelectors<T>['selectOrderShippingTotalAddresses'];
    _shipments: DaffOrderEntitySelectors<T>['selectOrderShipments'];
    _payment: DaffOrderEntitySelectors<T>['selectOrderPayment'];
    _invoices: DaffOrderEntitySelectors<T>['selectOrderInvoices'];
    _credits: DaffOrderEntitySelectors<T>['selectOrderCredits'];
    _grandTotal: DaffOrderEntitySelectors<T>['selectOrderGrandTotal'];
    _subtotal: DaffOrderEntitySelectors<T>['selectOrderSubtotal'];
    _shipping: DaffOrderEntitySelectors<T>['selectOrderShippingTotal'];
    _discount: DaffOrderEntitySelectors<T>['selectOrderDiscountTotal'];
    _hasDiscount: DaffOrderEntitySelectors<T>['selectOrderHasDiscount'];
    _tax: DaffOrderEntitySelectors<T>['selectOrderTaxTotal'];
    constructor(store: Store<DaffOrderReducersState<T>>);
    getOrder$(orderId: T['id']): Observable<T>;
    getTotals$(orderId: T['id']): Observable<T['totals']>;
    getAppliedCodes$(orderId: T['id']): Observable<T['applied_codes']>;
    getItems$(orderId: T['id']): Observable<T['items']>;
    getBillingAddresses$(orderId: T['id']): Observable<T['billing_addresses']>;
    getShippingAddresses$(orderId: T['id']): Observable<T['shipping_addresses']>;
    getShipments$(orderId: T['id']): Observable<T['shipments']>;
    getPayment$(orderId: T['id']): Observable<T['payment']>;
    getInvoices$(orderId: T['id']): Observable<T['invoices']>;
    getCredits$(orderId: T['id']): Observable<T['credits']>;
    getGrandTotal$(orderId: T['id']): Observable<DaffOrderTotal>;
    getSubtotal$(orderId: T['id']): Observable<DaffOrderTotal>;
    getShippingTotal$(orderId: T['id']): Observable<DaffOrderTotal>;
    getDiscountTotal$(orderId: T['id']): Observable<DaffOrderTotal>;
    hasDiscount$(orderId: T['id']): Observable<boolean>;
    getTaxTotal$(orderId: T['id']): Observable<DaffOrderTotal>;
    dispatch(action: Action): void;
}
