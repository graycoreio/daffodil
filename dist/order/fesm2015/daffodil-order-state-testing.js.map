{"version":3,"file":"daffodil-order-state-testing.js","sources":["ng://@daffodil/order/state/testing/mock-order-facade.ts","ng://@daffodil/order/state/testing/order-testing.module.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\nimport { Injectable } from '@angular/core';\n\nimport { DaffOrder, DaffOrderTotal } from '@daffodil/order';\nimport { DaffOrderFacadeInterface } from '@daffodil/order/state';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffOrderFacade implements DaffOrderFacadeInterface {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  errors$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\n  orders$: BehaviorSubject<DaffOrder[]> = new BehaviorSubject([]);\n  orderIds$: BehaviorSubject<(string | number)[]> = new BehaviorSubject([]);\n  orderCount$: BehaviorSubject<number> = new BehaviorSubject(null);\n  orderEntities$: BehaviorSubject<Dictionary<DaffOrder>> = new BehaviorSubject({});\n\n  placedOrder$: BehaviorSubject<DaffOrder> = new BehaviorSubject(null);\n  hasPlacedOrder$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  getOrder$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder> {\n    return new BehaviorSubject(null)\n  }\n\n  getTotals$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['totals']> {\n    return new BehaviorSubject([])\n  }\n\n  getAppliedCodes$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['applied_codes']> {\n    return new BehaviorSubject([])\n  }\n\n  getItems$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['items']> {\n    return new BehaviorSubject([])\n  }\n\n  getBillingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['billing_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShippingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipping_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShipments$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipments']> {\n    return new BehaviorSubject([])\n  }\n\n  getPayment$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['payment']> {\n    return new BehaviorSubject(null)\n  }\n\n  getInvoices$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['invoices']> {\n    return new BehaviorSubject([])\n  }\n\n  getCredits$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['credits']> {\n    return new BehaviorSubject([])\n  }\n  getGrandTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getSubtotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getShippingTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getDiscountTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  hasDiscount$(orderId: DaffOrder['id']): BehaviorSubject<boolean> {\n    return new BehaviorSubject(false);\n  };\n  getTaxTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffOrderFacade } from '@daffodil/order/state';\n\nimport { MockDaffOrderFacade } from './mock-order-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffOrderFacade, useExisting: MockDaffOrderFacade }\n\t]\n})\nexport class DaffOrderTestingModule {}\n"],"names":[],"mappings":";;;;;;;;AAAA,MASa,mBAAmB;IADhC;QAEE,aAAQ,GAA6B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAC/D,YAAO,GAA8B,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAE7D,YAAO,GAAiC,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAChE,cAAS,GAAyC,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAC1E,gBAAW,GAA4B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QACjE,mBAAc,GAA2C,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QAEjF,iBAAY,GAA+B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QACrE,oBAAe,GAA6B,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;KA6DxE;;;;;IA3DC,SAAS,CAAC,OAAwB;QAChC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;IAED,UAAU,CAAC,OAAwB;QACjC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,gBAAgB,CAAC,OAAwB;QACvC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,SAAS,CAAC,OAAwB;QAChC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,oBAAoB,CAAC,OAAwB;QAC3C,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,qBAAqB,CAAC,OAAwB;QAC5C,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,aAAa,CAAC,OAAwB;QACpC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,WAAW,CAAC,OAAwB;QAClC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;IAED,YAAY,CAAC,OAAwB;QACnC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IAED,WAAW,CAAC,OAAwB;QAClC,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;KAC/B;;;;;IACD,cAAc,CAAC,OAAwB;QACrC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;;IACD,YAAY,CAAC,OAAwB;QACnC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;;IACD,iBAAiB,CAAC,OAAwB;QACxC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;;IACD,iBAAiB,CAAC,OAAwB;QACxC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;;IACD,YAAY,CAAC,OAAwB;QACnC,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;KACnC;;;;;;IACD,YAAY,CAAC,OAAwB;QACnC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;KACjC;;;;;;IAED,QAAQ,CAAC,MAAc,KAAI;;;;YAvE5B,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;;IAE9B,uCAA+D;;IAC/D,sCAA6D;;IAE7D,sCAAgE;;IAChE,wCAA0E;;IAC1E,0CAAiE;;IACjE,6CAAiF;;IAEjF,2CAAqE;;IACrE,8CAAuE;;;;;;;;;;;;;;ACnBzE,MAWa,sBAAsB;;;YALlC,QAAQ,SAAC;gBACR,SAAS,EAAE;oBACX,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,mBAAmB,EAAE;iBAC9D;aACD;;;;;;;;;;;;;;;;;;;;"}