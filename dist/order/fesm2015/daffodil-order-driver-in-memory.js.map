{"version":3,"file":"daffodil-order-driver-in-memory.js","sources":["ng://@daffodil/order/driver/in-memory/drivers/order.service.ts","ng://@daffodil/order/driver/in-memory/drivers/order-driver.module.ts","ng://@daffodil/order/driver/in-memory/backend/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n} from '@daffodil/order/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryOrderService implements DaffOrderServiceInterface<DaffOrder> {\n  url = '/api/orders';\n\n  constructor(private http: HttpClient) {}\n\n  get(orderId: DaffOrder['id']): Observable<DaffOrder> {\n    return this.http.get<DaffOrder>(`${this.url}/${orderId}`);\n  }\n\n  list(): Observable<DaffOrder[]> {\n    return this.http.get<DaffOrder[]>(`${this.url}/`);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffOrderDriver,\n} from '@daffodil/order/driver';\n\nimport { DaffInMemoryOrderService } from './order.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffOrderInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffOrderInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffOrderDriver,\n          useExisting: DaffInMemoryOrderService\n        },\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfo,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffInMemoryDataServiceInterface } from '@daffodil/core/testing';\nimport { DaffOrder } from '@daffodil/order';\nimport {\n  DaffOrderFactory,\n} from '@daffodil/order/testing';\n\n/**\n * An in-memory service that stubs out the backend services for getting orders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendOrderService implements InMemoryDbService, DaffInMemoryDataServiceInterface {\n  orders: DaffOrder[];\n\n  constructor(\n    private orderFactory: DaffOrderFactory,\n  ) {\n    this.orders = this.orderFactory.createMany(5);\n  }\n\n  /**\n   * Creates a fake database of orders for the order inmemory backend service.\n   *\n   * @returns A fake database of an array of orders\n   */\n  createDb(reqInfo: RequestInfo): any {\n    if (reqInfo) {\n      const seedData = reqInfo.utils.getJsonBody(reqInfo.req).orders;\n      if (seedData) {\n        this.orders = seedData;\n      }\n    }\n\n    return {\n      orders: this.orders\n    };\n  }\n\n  /**\n   * Responds to GET requests.\n   */\n  get(reqInfo: RequestInfo): any {\n    return reqInfo.utils.createResponse$(() => ({\n      body: reqInfo.id ? this.getOrder(reqInfo) : this.listOrders(reqInfo),\n      status: STATUS.OK\n    }))\n  }\n\n  private getOrder(reqInfo: RequestInfo) {\n    return reqInfo.collection.find(order => order.id === reqInfo.id)\n  }\n\n  private listOrders(reqInfo: RequestInfo) {\n    return reqInfo.collection\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,MAca,wBAAwB;;;;IAGnC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,aAAa,CAAC;KAEoB;;;;;IAExC,GAAG,CAAC,OAAwB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,GAAG,IAAI,CAAC,GAAG,IAAI,OAAO,EAAE,CAAC,CAAC;KAC3D;;;;IAED,IAAI;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;KACnD;;;YAdF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YAZQ,UAAU;;;;;IAcjB,uCAAoB;;;;;IAER,wCAAwB;;;;;;;ACjBtC,MAca,6BAA6B;;;;IACxC,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,6BAA6B;YACvC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,eAAe;oBACxB,WAAW,EAAE,wBAAwB;iBACtC;aACF;SACF,CAAC;KACH;;;YAhBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;aACF;;;;;;;;;;;;ACbD;;;AAmBA,MAAa,+BAA+B;;;;IAG1C,YACU,YAA8B;QAA9B,iBAAY,GAAZ,YAAY,CAAkB;QAEtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC/C;;;;;;;IAOD,QAAQ,CAAC,OAAoB;QAC3B,IAAI,OAAO,EAAE;;kBACL,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;YAC9D,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;aACxB;SACF;QAED,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;KACH;;;;;;IAKD,GAAG,CAAC,OAAoB;QACtB,OAAO,OAAO,CAAC,KAAK,CAAC,eAAe;;;QAAC,OAAO;YAC1C,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YACpE,MAAM,EAAE,MAAM,CAAC,EAAE;SAClB,CAAC,EAAC,CAAA;KACJ;;;;;;IAEO,QAAQ,CAAC,OAAoB;QACnC,OAAO,OAAO,CAAC,UAAU,CAAC,IAAI;;;;QAAC,KAAK,IAAI,KAAK,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,EAAC,CAAA;KACjE;;;;;;IAEO,UAAU,CAAC,OAAoB;QACrC,OAAO,OAAO,CAAC,UAAU,CAAA;KAC1B;;;YA9CF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YARC,gBAAgB;;;;;IAUhB,iDAAoB;;;;;IAGlB,uDAAsC;;;;;;;;;;;;;;;;;;;;"}