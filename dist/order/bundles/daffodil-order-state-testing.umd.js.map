{"version":3,"file":"daffodil-order-state-testing.umd.js","sources":["ng://@daffodil/order/state/testing/mock-order-facade.ts","ng://@daffodil/order/state/testing/order-testing.module.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\nimport { Injectable } from '@angular/core';\n\nimport { DaffOrder, DaffOrderTotal } from '@daffodil/order';\nimport { DaffOrderFacadeInterface } from '@daffodil/order/state';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffOrderFacade implements DaffOrderFacadeInterface {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  errors$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\n  orders$: BehaviorSubject<DaffOrder[]> = new BehaviorSubject([]);\n  orderIds$: BehaviorSubject<(string | number)[]> = new BehaviorSubject([]);\n  orderCount$: BehaviorSubject<number> = new BehaviorSubject(null);\n  orderEntities$: BehaviorSubject<Dictionary<DaffOrder>> = new BehaviorSubject({});\n\n  placedOrder$: BehaviorSubject<DaffOrder> = new BehaviorSubject(null);\n  hasPlacedOrder$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  getOrder$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder> {\n    return new BehaviorSubject(null)\n  }\n\n  getTotals$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['totals']> {\n    return new BehaviorSubject([])\n  }\n\n  getAppliedCodes$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['applied_codes']> {\n    return new BehaviorSubject([])\n  }\n\n  getItems$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['items']> {\n    return new BehaviorSubject([])\n  }\n\n  getBillingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['billing_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShippingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipping_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShipments$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipments']> {\n    return new BehaviorSubject([])\n  }\n\n  getPayment$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['payment']> {\n    return new BehaviorSubject(null)\n  }\n\n  getInvoices$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['invoices']> {\n    return new BehaviorSubject([])\n  }\n\n  getCredits$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['credits']> {\n    return new BehaviorSubject([])\n  }\n  getGrandTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getSubtotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getShippingTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getDiscountTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  hasDiscount$(orderId: DaffOrder['id']): BehaviorSubject<boolean> {\n    return new BehaviorSubject(false);\n  };\n  getTaxTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffOrderFacade } from '@daffodil/order/state';\n\nimport { MockDaffOrderFacade } from './mock-order-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffOrderFacade, useExisting: MockDaffOrderFacade }\n\t]\n})\nexport class DaffOrderTestingModule {}\n"],"names":["BehaviorSubject","Injectable","NgModule","DaffOrderFacade"],"mappings":"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"}