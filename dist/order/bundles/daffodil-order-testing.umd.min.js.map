{"version":3,"sources":["ng://@daffodil/order/testing/factories/order-address.factory.ts","ng://@daffodil/order/testing/factories/order-coupon.factory.ts","ng://@daffodil/order/testing/factories/order-invoice.factory.ts","ng://@daffodil/order/testing/factories/order-payment.factory.ts","ng://@daffodil/order/testing/factories/order-item.factory.ts","ng://@daffodil/order/testing/factories/composite-order-item.factory.ts","ng://@daffodil/order/testing/factories/configurable-order-item.factory.ts","ng://@daffodil/order/testing/factories/order-shipment-item.factory.ts","ng://@daffodil/order/testing/factories/order-shipment-tracking.factory.ts","ng://@daffodil/order/testing/factories/order-shipment.factory.ts","ng://@daffodil/order/testing/factories/order-shipping-rate.factory.ts","ng://@daffodil/order/testing/factories/order-total.factory.ts","ng://@daffodil/order/testing/factories/order.factory.ts","ng://@daffodil/order/testing/helpers/order-helper.ts"],"names":["MockOrderAddress","_super","_this","apply","this","arguments","order_id","faker.random","number","min","max","__extends","MockDaffPersonalAddress","DaffOrderAddressFactory","call","Injectable","args","providedIn","DaffModelFactory","MockOrderCoupon","code","alphaNumeric","DaffOrderCouponFactory","MockOrderInvoice","items","totals","billing_address","shipping_address","payment","shipping_method","DaffOrderInvoiceFactory","MockOrderPayment","payment_id","created_at","faker.date","past","toString","updated_at","method","cc_type","cc_last4","cc_owner","cc_exp_month","cc_exp_year","DaffOrderPaymentFactory","MockOrderItem","item_id","image","url","faker.image","imageUrl","id","String","label","word","qty_ordered","qty_canceled","qty_fulfilled","product_id","parent_item_id","sku","name","weight","qty","price","discount_amount","discount_percent","Math","floor","tax_percent","tax_amount","row_total","row_total_with_discount","row_weight","tax_before_discount","type","DaffOrderItemType","Simple","DaffOrderItemFactory","MockCompositeOrderItem","Composite","options","option_label","value_label","DaffCompositeOrderItemFactory","MockConfigurableOrderItem","Configurable","attributes","attribute_label","DaffConfigurableOrderItemFactory","MockOrderShipmentItem","item","DaffOrderShipmentItemFactory","MockOrderShipmentTracking","tracking_number","tracking_url","faker.internet","carrier","carrier_logo","title","DaffOrderShipmentTrackingFactory","MockOrderShipment","tracking","carrier_title","method_description","DaffOrderShipmentFactory","MockOrderShippingMethod","rate_id","address_id","error_message","method_title","DaffOrderShippingMethodFactory","MockOrderTotal","value","sort_order","DaffOrderTotalTypeEnum","GrandTotal","DaffOrderTotalFactory","MockOrder","customer_id","status","applied_codes","billing_addresses","shipping_addresses","shipments","invoices","credits","DaffOrderFactory","order"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderAddress } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { MockDaffPersonalAddress } from '@daffodil/geography/testing';\n\nexport class MockOrderAddress extends MockDaffPersonalAddress implements DaffOrderAddress {\n  order_id = faker.random.number({min: 1, max: 1000});\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderAddressFactory extends DaffModelFactory<DaffOrderAddress> {\n  constructor() {\n    super(MockOrderAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderCoupon } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderCoupon implements DaffOrderCoupon {\n  code = faker.random.alphaNumeric(10);\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderCouponFactory extends DaffModelFactory<DaffOrderCoupon>{\n  constructor() {\n    super(MockOrderCoupon);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffOrderInvoice } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderInvoice implements DaffOrderInvoice {\n  items = [];\n  totals = [];\n  billing_address = null;\n  shipping_address = null;\n  payment = null;\n  shipping_method = null;\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderInvoiceFactory extends DaffModelFactory<DaffOrderInvoice> {\n  constructor() {\n    super(MockOrderInvoice);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderPayment } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderPayment implements DaffOrderPayment {\n    payment_id = faker.random.number({min: 1, max: 1000});\n    order_id = faker.random.number({min: 1, max: 1000});\n    created_at = faker.date.past().toString();\n    updated_at = faker.date.past().toString();\n    method = 'card';\n    cc_type = 'visa';\n    cc_last4 = faker.random.number({min: 1000, max: 9999}).toString();\n    cc_owner = 'owner';\n    cc_exp_month = 'month';\n    cc_exp_year = 'year';\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DaffOrderPaymentFactory extends DaffModelFactory<DaffOrderPayment>{\n    constructor(){\n        super(MockOrderPayment);\n      }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderItem, DaffOrderItemType } from '@daffodil/order';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderItem implements DaffOrderItem {\n  item_id = faker.random.number({min: 1, max: 1000});\n  image = {\n    url: faker.image.imageUrl(),\n    id: String(faker.random.number({min: 1, max: 1000})),\n    label: faker.random.word()\n  };\n  order_id = faker.random.number({min: 1, max: 1000});\n  qty_ordered = faker.random.number({min: 1, max: 1000});\n  qty_canceled = faker.random.number({min: 1, max: 1000});\n  qty_fulfilled = faker.random.number({min: 1, max: 1000});\n  created_at = faker.date.past().toString();\n  updated_at = faker.date.past().toString();\n  product_id = faker.random.number({min: 1, max: 1000});\n  parent_item_id = faker.random.number({min: 1, max: 1000});\n  sku = faker.random.alphaNumeric(20);\n  name = faker.random.word();\n  weight = faker.random.number({min: 1, max: 1000});\n  qty = faker.random.number({min: 1, max: 10});\n  price = faker.random.number({min: 1, max: 1000});\n  discount_amount = faker.random.number({min: 1, max: this.price});\n  discount_percent = Math.floor(this.discount_amount / this.price * 100);\n  tax_percent = faker.random.number({min: 1, max: 10});\n  tax_amount = faker.random.number({min: 1, max: 10});\n  row_total = this.price * this.qty;\n  row_total_with_discount = (this.price - this.discount_amount) * this.qty;\n  row_weight = faker.random.number({min: 1, max: 100});\n  tax_before_discount = faker.random.number({min: 1, max: 100});\n  type = DaffOrderItemType.Simple;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderItemFactory extends DaffModelFactory<DaffOrderItem> {\n\n  constructor(){\n    super(MockOrderItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCompositeOrderItem, DaffOrderItemType } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nimport { MockOrderItem } from './order-item.factory';\n\nexport class MockCompositeOrderItem extends MockOrderItem implements DaffCompositeOrderItem {\n\ttype = DaffOrderItemType.Composite;\n\toptions = [\n\t\t{\n\t\t\toption_label: faker.random.word(),\n\t\t\tvalue_label: faker.random.word()\n\t\t},\n\t\t{\n\t\t\toption_label: faker.random.word(),\n\t\t\tvalue_label: faker.random.word()\n\t\t}\n\t];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCompositeOrderItemFactory extends DaffModelFactory<DaffCompositeOrderItem> {\n  constructor() {\n    super(MockCompositeOrderItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffConfigurableOrderItem, DaffOrderItemType } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nimport { MockOrderItem } from './order-item.factory';\n\nexport class MockConfigurableOrderItem extends MockOrderItem implements DaffConfigurableOrderItem {\n\ttype = DaffOrderItemType.Configurable;\n\tattributes = [\n\t\t{\n\t\t\tattribute_label: 'Color',\n\t\t\tvalue_label: 'Red'\n\t\t},\n\t\t{\n\t\t\tattribute_label: 'Size',\n\t\t\tvalue_label: 'M'\n\t\t}\n\t];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffConfigurableOrderItemFactory extends DaffModelFactory<DaffConfigurableOrderItem> {\n  constructor() {\n    super(MockConfigurableOrderItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderShipmentItem } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderShipmentItem implements DaffOrderShipmentItem {\n  item = null;\n  qty = faker.random.number({min: 1, max: 100});\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderShipmentItemFactory extends DaffModelFactory<DaffOrderShipmentItem> {\n  constructor() {\n    super(MockOrderShipmentItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderShipmentTracking } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderShipmentTracking implements DaffOrderShipmentTracking {\n  tracking_number = faker.random.alphaNumeric(16);\n  tracking_url = faker.internet.url();\n  carrier = faker.random.word();\n  carrier_logo = faker.internet.url();\n  title = faker.random.word();\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderShipmentTrackingFactory extends DaffModelFactory<DaffOrderShipmentTracking> {\n  constructor() {\n    super(MockOrderShipmentTracking);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderShipment } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderShipment implements DaffOrderShipment {\n  tracking = [];\n  items = [];\n  carrier = faker.random.word();\n  carrier_title = faker.random.word();\n  code = faker.random.word();\n  method = faker.random.word();\n  method_description = faker.random.word();\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderShipmentFactory extends DaffModelFactory<DaffOrderShipment> {\n  constructor() {\n    super(MockOrderShipment);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderShippingMethod } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderShippingMethod implements DaffOrderShippingMethod {\n  rate_id = faker.random.number({min: 1, max: 1000});\n  address_id = faker.random.number({min: 1, max: 1000});\n  order_id = faker.random.number({min: 1, max: 1000});\n  created_at = faker.date.past().toString();\n  updated_at = faker.date.past().toString();\n  carrier = faker.random.word();\n  carrier_title = faker.random.word();\n  code = faker.random.word();\n  method = faker.random.word();\n  method_description = faker.random.word();\n  price = faker.random.number({min: 1, max: 1000});\n  error_message = faker.random.word();\n  method_title = faker.random.word();\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DaffOrderShippingMethodFactory extends DaffModelFactory<DaffOrderShippingMethod>{\n  constructor(){\n    super(MockOrderShippingMethod);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrderTotal, DaffOrderTotalTypeEnum } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrderTotal implements DaffOrderTotal {\n  label = faker.random.word();\n  value = faker.random.number({min: 1, max: 100});\n  sort_order = faker.random.number({min: 1, max: 100});\n  type = DaffOrderTotalTypeEnum.GrandTotal\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderTotalFactory extends DaffModelFactory<DaffOrderTotal> {\n  constructor() {\n    super(MockOrderTotal);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffOrder } from '@daffodil/order';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockOrder implements DaffOrder {\n  id = faker.random.number({min: 1, max: 1000});\n  customer_id = faker.random.number({min: 1, max: 1000});\n  created_at = faker.date.past().toString();\n  updated_at = faker.date.past().toString();\n  status = faker.random.word();\n  totals = [];\n  applied_codes = [];\n  items = [];\n  billing_addresses = [];\n  shipping_addresses = [];\n  shipments = [];\n  payment = null;\n  invoices = [];\n  credits = [];\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderFactory extends DaffModelFactory<DaffOrder>{\n  constructor() {\n    super(MockOrder);\n  }\n}\n","import { DaffOrder } from '@daffodil/order';\n\n/**\n * A helper function to verify that a model is a Order.\n * @param order\n */\nexport function isOrder(order: DaffOrder): boolean {\n  return !!order.id\n    && !!order.customer_id\n    && !!order.created_at\n    && !!order.updated_at\n    && !!order.status\n    && !!order.applied_codes\n    && !!order.totals;\n}\n"]}