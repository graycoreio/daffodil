{"version":3,"sources":["ng://@daffodil/order/state/actions/order.actions.ts","ng://@daffodil/order/state/reducers/order/order-initial-state.ts","ng://@daffodil/order/state/reducers/order/order.reducer.ts","ng://@daffodil/order/state/reducers/order-entities/order-entities-adapter.ts","ng://@daffodil/order/state/reducers/order-entities/order-entities-initial-state.ts","ng://@daffodil/order/state/reducers/order-entities/order-entities.reducer.ts","ng://@daffodil/order/state/reducers/order-reducers.ts","ng://@daffodil/order/state/selectors/order-feature.selector.ts","ng://@daffodil/order/state/reducers/order-store-feature-key.ts","ng://@daffodil/order/state/selectors/order-entities.selector.ts","ng://@daffodil/order/state/selectors/order.selector.ts","ng://@daffodil/order/state/selectors/order-all.selector.ts","ng://@daffodil/order/state/facades/order/order.facade.ts","ng://@daffodil/order/state/guards/placed-order/placed-order-guard-redirect.token.ts","ng://@daffodil/order/state/guards/placed-order/placed-order.guard.ts","ng://@daffodil/order/state/effects/order.effects.ts","ng://@daffodil/order/state/order-state.module.ts"],"names":["OrderLoadAction","OrderLoadSuccessAction","OrderLoadFailureAction","OrderListAction","OrderListSuccessAction","OrderListFailureAction","orderId","cartId","this","type","DaffOrderActionTypes","payload","DaffOrderLoadFailure","DaffOrderListFailure","daffOrderInitialState","loading","errors","daffOrderReducer","state","action","__assign","__spread","cache","daffGetOrderAdapter","createEntityAdapter","daffOrderEntitiesInitialState","getInitialState","daffOrderEntitiesReducer","adapter","upsertOne","upsertMany","daffOrderReducers","order","orders","getDaffOrderReducersStateSelector","selectOrderFeatureState","createFeatureSelector","createOrderEntitySelectors","selectOrderEntitiesState","createSelector","_a","getSelectors","selectIds","selectEntities","selectAll","selectTotal","selectCartOrderId","getDaffCartSelectors","selectOrder","props","id","selectPlacedOrder","projector","selectHasPlacedOrder","placedOrder","selectOrderTotals","totals","selectOrderAppliedCodes","applied_codes","selectOrderItems","items","selectOrderBillingAddresses","billing_addresses","selectOrderShippingTotalAddresses","shipping_addresses","selectOrderShipments","shipments","selectOrderPayment","payment","selectOrderInvoices","invoices","selectOrderCredits","credits","selectOrderGrandTotal","index","findIndex","total","DaffOrderTotalTypeEnum","GrandTotal","selectOrderSubtotal","Subtotal","selectOrderShippingTotal","Shipping","selectOrderDiscountTotal","Discount","selectOrderHasDiscount","discountTotal","value","selectOrderTaxTotal","Tax","selectOrderItem","find","item","item_id","selectOrderIds","selectOrderEntities","selectAllOrders","selectOrderTotal","getDaffOrderEntitySelectors","createOrderSelectors","selectOrderState","selectOrderLoading","selectOrderErrors","getOrderSelectors","getDaffOrderSelectors","__assign$1","DaffOrderFacade","store","loading$","pipe","select","errors$","orders$","orderIds$","orderCount$","orderEntities$","placedOrder$","hasPlacedOrder$","_order","_totals","_appliedCodes","_items","_billingAddresses","_shippingAddresses","_shipments","_payment","_invoices","_credits","_grandTotal","_subtotal","_shipping","_discount","_hasDiscount","_tax","prototype","getOrder$","getTotals$","getAppliedCodes$","getItems$","getBillingAddresses$","getShippingAddresses$","getShipments$","getPayment$","getInvoices$","getCredits$","getGrandTotal$","getSubtotal$","getShippingTotal$","getDiscountTotal$","hasDiscount$","getTaxTotal$","dispatch","Injectable","args","providedIn","Store","DaffPlacedOrderGuardRedirectUrl","InjectionToken","DaffPlacedOrderGuard","facade","router","redirectUrl","canActivate","_this","tap","hasPlacedOrder","navigateByUrl","Router","Inject","DaffOrderEffects","actions$","driver","get$","ofType","switchMap","get","map","resp","DaffOrderLoadSuccess","catchError","error","of","list$","list","DaffOrderListSuccess","Actions","DaffOrderDriver","__decorate","Effect","DaffOrderStateModule","NgModule","imports","EffectsModule","forFeature","StoreModule","providers","provide","useValue"],"mappings":"42BAMEA,gBAAkB,4BAClBC,uBAAyB,oCACzBC,uBAAyB,oCACzBC,gBAAkB,4BAClBC,uBAAyB,oCACzBC,uBAAyB,uCAezB,SAAmBC,EAAyBC,GAAzBC,KAAAF,QAAAA,EAAyBE,KAAAD,OAAAA,EAFnCC,KAAAC,KAAOC,EAAqBV,iBAKvC,MAGE,SAAmBW,GAAAH,KAAAG,QAAAA,EAFVH,KAAAC,KAAOC,EAAqBT,wBAKvC,IAAAW,EAGE,SAAmBD,GAAAH,KAAAG,QAAAA,EAFVH,KAAAC,KAAOC,EAAqBR,wBAUvC,MAGE,SAAmBS,GAAAH,KAAAG,QAAAA,EAFVH,KAAAC,KAAOC,EAAqBP,iBAKvC,MAGE,SAAmBQ,GAAAH,KAAAG,QAAAA,EAFVH,KAAAC,KAAOC,EAAqBN,wBAKvC,IAAAS,EAGE,SAAmBF,GAAAH,KAAAG,QAAAA,EAFVH,KAAAC,KAAOC,EAAqBL,wBCzDvC,IAAaS,EAA+C,CAC1DC,SAAS,EACTC,OAAQ,qoBCEV,SAAgBC,EACdC,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAAAJ,GAGQK,EAAOV,MACb,KAAKC,EAAqBP,gBAC1B,KAAKO,EAAqBV,gBACxB,OAAAoB,EAAA,GACKF,EAAK,CACRH,SAAS,IAGb,KAAKL,EAAqBN,uBAC1B,KAAKM,EAAqBT,uBACxB,OAAAmB,EAAA,GACKF,EAAK,CACRH,SAAS,EACTC,OAAQ,KAGZ,KAAKN,EAAqBL,uBAC1B,KAAKK,EAAqBR,uBACxB,OAAAkB,EAAA,GACKF,EAAK,CACRF,OAAMK,EACDH,EAAMF,OAAM,CACfG,EAAOR,UAETI,SAAS,IAGb,QACE,OAAOG,GCtCb,IAQMI,EADOC,EAEX,WACE,OAAAD,EAAQA,GAASE,EAAAA,uBCJRC,EAA2DF,IAAsBG,kBCI9F,SAAgBC,EACdT,EACAC,QADA,IAAAD,IAAAA,EAAAO,OAGMG,EAAUL,IAEhB,OAAQJ,EAAOV,MACb,KAAKC,EAAqBT,uBACxB,OAAO2B,EAAQC,UAAUV,EAAOR,QAASO,GAE3C,KAAKR,EAAqBN,uBACxB,OAAOwB,EAAQE,WAAWX,EAAOR,QAASO,GAE5C,QACE,OAAOA,GClBb,IAAaa,EAA8D,CACzEC,MAAOf,EACPgB,OAAQN,OCEGO,EAAqC,eAC5CZ,EACJ,OAAA,WACE,OAAAA,EAAQA,GAAS,CACfa,wBAAyBC,EAAAA,sBCda,eDUK,OEmG3CC,EAA0B,WACtB,IAAAF,EAAAD,IAAAC,wBACFG,EAA2BC,EAAAA,eAC/BJ,EAAuB,SACvBjB,GAAS,OAAAA,EAAMe,SAEXO,EAAAjB,IAAAkB,aAAAH,GAAEI,EAAAF,EAAAE,UAAWC,EAAAH,EAAAG,eAAgBC,EAAAJ,EAAAI,UAAWC,EAAAL,EAAAK,YACtCC,EAAA5B,EAAA6B,uBAAAD,kBAEFE,EAAcT,EAAAA,eAClBI,EAAc,SACbV,EAAQgB,GAAU,OAAAhB,EAAOgB,EAAMC,KAAO,OAGnCC,EAAoBZ,EAAAA,eACxBI,EACAG,EAAiB,SAChBb,EAAQ3B,GAAY,OAAAA,EAAU0C,EAAYI,UAAUnB,EAAQ,CAACiB,GAAI5C,IAAY,OAE1E+C,EAAuBd,EAAAA,eAC3BY,EAAiB,SACjBG,GAAe,QAAEA,IAGbC,EAAoBhB,EAAAA,eACxBI,EAAc,SACbV,EAAQgB,OACDjB,EAAmBgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KAClE,OAAQlB,GAASA,EAAMwB,QAAW,KAGhCC,EAA0BlB,EAAAA,eAC9BI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAM0B,eAAkB,KAGvCC,EAAmBpB,EAAAA,eACvBI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAM4B,OAAU,KAG/BC,EAA8BtB,EAAAA,eAClCI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAM8B,mBAAsB,KAG3CC,EAAoCxB,EAAAA,eACxCI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAMgC,oBAAuB,KAG5CC,EAAuB1B,EAAAA,eAC3BI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAMkC,WAAc,KAGnCC,EAAqB5B,EAAAA,eACzBI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAMoC,SAAY,OAGjCC,EAAsB9B,EAAAA,eAC1BI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAMsC,UAAa,KAGlCC,EAAqBhC,EAAAA,eACzBI,EAAc,SACbV,EAAQgB,OACDjB,EAAQgB,EAAYI,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACvD,OAAQlB,GAASA,EAAMwC,SAAY,KAIjCC,EAAwBlC,EAAAA,eAC5BI,EAAc,SACbV,EAAQgB,OACDO,EAASD,EAAkBH,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KACxDwB,EAAQlB,EAAOmB,UAAS,SAACC,GAAS,OAAAA,EAAMnE,OAASoE,EAAAA,uBAAuBC,aAE9E,OAAOJ,GAAS,EAAIlB,EAAOkB,GAAS,OAGlCK,EAAsBxC,EAAAA,eAC1BI,EAAc,SACbV,EAAQgB,OACDO,EAASD,EAAkBH,UAAUnB,EAAQ,CAAEiB,GAAID,EAAMC,KACzDwB,EAAQlB,EAAOmB,UAAS,SAACC,GAAS,OAAAA,EAAMnE,OAASoE,EAAAA,uBAAuBG,WAE9E,OAAON,GAAS,EAAIlB,EAAOkB,GAAS,OAGlCO,EAA2B1C,EAAAA,eAC/BI,EAAc,SACbV,EAAQgB,OACDO,EAASD,EAAkBH,UAAUnB,EAAQ,CAAEiB,GAAID,EAAMC,KACzDwB,EAAQlB,EAAOmB,UAAS,SAACC,GAAS,OAAAA,EAAMnE,OAASoE,EAAAA,uBAAuBK,WAE9E,OAAOR,GAAS,EAAIlB,EAAOkB,GAAS,OAGlCS,EAA2B5C,EAAAA,eAC/BI,EAAc,SACbV,EAAQgB,OACDO,EAASD,EAAkBH,UAAUnB,EAAQ,CAAEiB,GAAID,EAAMC,KACzDwB,EAAQlB,EAAOmB,UAAS,SAACC,GAAS,OAAAA,EAAMnE,OAASoE,EAAAA,uBAAuBO,WAE9E,OAAOV,GAAS,EAAIlB,EAAOkB,GAAS,OAGlCW,EAAyB9C,EAAAA,eAC7BI,EAAc,SACbV,EAAQgB,OACDqC,EAAgBH,EAAyB/B,UAAUnB,EAAQ,CAAEiB,GAAID,EAAMC,KAG7E,QAASoC,GAAiBA,EAAcC,MAAQ,IAG9CC,EAAsBjD,EAAAA,eAC1BI,EAAc,SACbV,EAAQgB,OACDO,EAASD,EAAkBH,UAAUnB,EAAQ,CAAEiB,GAAID,EAAMC,KACzDwB,EAAQlB,EAAOmB,UAAS,SAACC,GAAS,OAAAA,EAAMnE,OAASoE,EAAAA,uBAAuBY,MAE9E,OAAOf,GAAS,EAAIlB,EAAOkB,GAAS,OAIlCgB,EAAkBnD,EAAAA,eACxBI,EAAc,SACbV,EAAQgB,GAAU,OAAAU,EAAiBP,UAAUnB,EAAQ,CAACiB,GAAID,EAAMC,KAAKyC,KAAI,SAACC,GAAQ,OAAAA,EAAKC,UAAY5C,EAAM4C,WAAY,OAGtH,MAAO,CACLvD,yBAAwBA,EACxBwD,eAAgBpD,EAChBqD,oBAAqBpD,EACrBqD,gBAAiBpD,EACjBqD,iBAAkBpD,EAElBM,kBAAiBA,EACjBE,qBAAoBA,EAEpBL,YAAWA,EACXO,kBAAiBA,EACjBE,wBAAuBA,EACvBE,iBAAgBA,EAChBE,4BAA2BA,EAC3BE,kCAAiCA,EACjCE,qBAAoBA,EACpBE,mBAAkBA,EAClBE,oBAAmBA,EACnBE,mBAAkBA,EAClBmB,gBAAeA,EAEfjB,sBAAqBA,EACrBM,oBAAmBA,EACnBE,yBAAwBA,EACxBE,yBAAwBA,EACxBE,uBAAsBA,EACtBG,oBAAmBA,IAIVU,EAA+B,eACtC5E,EACJ,OAAA,WACE,OAAAA,EAAQA,GAASe,KAHsB,OCjRrC8D,EAAoB,WAChB,IAAAhE,EAAAD,IAAAC,wBACFiE,EAAmB7D,EAAAA,eACvBJ,EAAuB,SACvBjB,GAAS,OAAAA,EAAMc,QAajB,MAAO,CACLoE,iBAAgBA,EAChBC,mBAZyB9D,EAAAA,eACzB6D,EAAgB,SAChBlF,GAAS,OAAAA,EAAMH,UAWfuF,kBARwB/D,EAAAA,eACxB6D,EAAgB,SAChBlF,GAAS,OAAAA,EAAMF,WAUNuF,EAAqB,eAC5BjF,EACJ,OAAA,WACE,OAAAA,EAAQA,GAAS6E,KAHY,2OC5BpBK,EAAyB,eAChClF,EACJ,OAAA,WACE,OAAAA,EAAQA,GAAKmF,EAAA,GACRF,IACAL,IACAhE,MAN4B,GCGrCwE,EAAA,WAgCE,SAAAA,EAAoBC,GAAAnG,KAAAmG,MAAAA,EACZ,IAAAnE,EAAAgE,IACJV,EAAAtD,EAAAsD,eACAC,EAAAvD,EAAAuD,oBACAC,EAAAxD,EAAAwD,gBACAC,EAAAzD,EAAAyD,iBACAI,EAAA7D,EAAA6D,mBACAC,EAAA9D,EAAA8D,kBAEAnD,EAAAX,EAAAW,kBACAE,EAAAb,EAAAa,qBAEAL,EAAAR,EAAAQ,YACAO,EAAAf,EAAAe,kBACAE,EAAAjB,EAAAiB,wBACAE,EAAAnB,EAAAmB,iBACAE,EAAArB,EAAAqB,4BACAE,EAAAvB,EAAAuB,kCACAE,EAAAzB,EAAAyB,qBACAE,EAAA3B,EAAA2B,mBACAE,EAAA7B,EAAA6B,oBACAE,EAAA/B,EAAA+B,mBAEAE,EAAAjC,EAAAiC,sBACAM,EAAAvC,EAAAuC,oBACAE,EAAAzC,EAAAyC,yBACAE,EAAA3C,EAAA2C,yBACAE,EAAA7C,EAAA6C,uBACAG,EAAAhD,EAAAgD,oBAGFhF,KAAKoG,SAAWpG,KAAKmG,MAAME,KAAKC,EAAAA,OAAOT,IACvC7F,KAAKuG,QAAUvG,KAAKmG,MAAME,KAAKC,EAAAA,OAAOR,IAEtC9F,KAAKwG,QAAUxG,KAAKmG,MAAME,KAAKC,EAAAA,OAAOd,IACtCxF,KAAKyG,UAAYzG,KAAKmG,MAAME,KAAKC,EAAAA,OAAOhB,IACxCtF,KAAK0G,YAAc1G,KAAKmG,MAAME,KAAKC,EAAAA,OAAOb,IAC1CzF,KAAK2G,eAAiB3G,KAAKmG,MAAME,KAAKC,EAAAA,OAAOf,IAE7CvF,KAAK4G,aAAe5G,KAAKmG,MAAME,KAAKC,EAAAA,OAAO3D,IAC3C3C,KAAK6G,gBAAkB7G,KAAKmG,MAAME,KAAKC,EAAAA,OAAOzD,IAE9C7C,KAAK8G,OAAStE,EACdxC,KAAK+G,QAAUhE,EACf/C,KAAKgH,cAAgB/D,EACrBjD,KAAKiH,OAAS9D,EACdnD,KAAKkH,kBAAoB7D,EACzBrD,KAAKmH,mBAAqB5D,EAC1BvD,KAAKoH,WAAa3D,EAClBzD,KAAKqH,SAAW1D,EAChB3D,KAAKsH,UAAYzD,EACjB7D,KAAKuH,SAAWxD,EAChB/D,KAAKwH,YAAcvD,EACnBjE,KAAKyH,UAAYlD,EACjBvE,KAAK0H,UAAYjD,EACjBzE,KAAK2H,UAAYhD,EACjB3E,KAAK4H,aAAe/C,EACpB7E,KAAK6H,KAAO7C,SAGdkB,EAAA4B,UAAAC,UAAA,SAAUjI,GACR,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK8G,OAAQ,CAACpE,GAAI5C,MAGlDoG,EAAA4B,UAAAE,WAAA,SAAWlI,GACT,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK+G,QAAS,CAACrE,GAAI5C,MAGnDoG,EAAA4B,UAAAG,iBAAA,SAAiBnI,GACf,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKgH,cAAe,CAACtE,GAAI5C,MAGzDoG,EAAA4B,UAAAI,UAAA,SAAUpI,GACR,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKiH,OAAQ,CAACvE,GAAI5C,MAGlDoG,EAAA4B,UAAAK,qBAAA,SAAqBrI,GACnB,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKkH,kBAAmB,CAACxE,GAAI5C,MAG7DoG,EAAA4B,UAAAM,sBAAA,SAAsBtI,GACpB,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKmH,mBAAoB,CAACzE,GAAI5C,MAG9DoG,EAAA4B,UAAAO,cAAA,SAAcvI,GACZ,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKoH,WAAY,CAAC1E,GAAI5C,MAGtDoG,EAAA4B,UAAAQ,YAAA,SAAYxI,GACV,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKqH,SAAU,CAAC3E,GAAI5C,MAGpDoG,EAAA4B,UAAAS,aAAA,SAAazI,GACX,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKsH,UAAW,CAAC5E,GAAI5C,MAGrDoG,EAAA4B,UAAAU,YAAA,SAAY1I,GACV,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKuH,SAAU,CAAC7E,GAAI5C,MAGpDoG,EAAA4B,UAAAW,eAAA,SAAe3I,GACb,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKwH,YAAa,CAAC9E,GAAI5C,MAEvDoG,EAAA4B,UAAAY,aAAA,SAAa5I,GACX,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAKyH,UAAW,CAAC/E,GAAI5C,MAErDoG,EAAA4B,UAAAa,kBAAA,SAAkB7I,GAChB,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK0H,UAAW,CAAChF,GAAI5C,MAErDoG,EAAA4B,UAAAc,kBAAA,SAAkB9I,GAChB,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK2H,UAAW,CAACjF,GAAI5C,MAErDoG,EAAA4B,UAAAe,aAAA,SAAa/I,GACX,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK4H,aAAc,CAAClF,GAAI5C,MAExDoG,EAAA4B,UAAAgB,aAAA,SAAahJ,GACX,OAAOE,KAAKmG,MAAME,KAAKC,EAAAA,OAAOtG,KAAK6H,KAAM,CAACnF,GAAI5C,MAGhDoG,EAAA4B,UAAAiB,SAAA,SAASpI,GACPX,KAAKmG,MAAM4C,SAASpI,wBAxJvBqI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAbGC,EAAAA,qIAYjB,GCZA,IAAaC,EAAkC,IAAIC,EAAAA,eAAuB,mCCU1EC,EAAA,WAIE,SAAAA,EACQC,EACAC,EACyCC,GAFzCzJ,KAAAuJ,OAAAA,EACAvJ,KAAAwJ,OAAAA,EACyCxJ,KAAAyJ,YAAAA,SAGjDH,EAAAxB,UAAA4B,YAAA,WAAA,IAAAC,EAAA3J,KACE,OAAOA,KAAKuJ,OAAO1C,gBAAgBR,KACpCuD,EAAAA,IAAG,SAACC,GACEA,GACJF,EAAKH,OAAOM,cAAcH,EAAKF,qCAdnCT,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,oDARJhD,SALa6D,EAAAA,uCAmBnBC,EAAAA,OAAMf,KAAA,CAACG,iKAPV,0eCcAa,EAAA,WAKE,SAAAA,EACUC,EACyBC,GAFnC,IAAAR,EAAA3J,KACUA,KAAAkK,SAAAA,EACyBlK,KAAAmK,OAAAA,EAOnCnK,KAAAoK,KAAOpK,KAAKkK,SAAS7D,KACnBgE,EAAAA,OAAOnK,EAAqBV,iBAC5B8K,EAAAA,UAAS,SAAE3J,GACT,OAAAgJ,EAAKQ,OAAOI,IAAI5J,EAAOb,QAASa,EAAOZ,QAAQsG,KAC7CmE,EAAAA,IAAG,SAACC,GAAQ,OAAA,IAAIC,EAAwBD,KACxCE,EAAAA,WAAU,SAACC,GAAS,OAAAC,EAAAA,GAAG,IAAIzK,EAAqB,+BAStDJ,KAAA8K,MAAQ9K,KAAKkK,SAAS7D,KACpBgE,EAAAA,OAAOnK,EAAqBP,iBAC5B2K,EAAAA,UAAS,SAAE3J,GACT,OAAAgJ,EAAKQ,OAAOY,KAAKpK,EAAOR,SAASkG,KAC/BmE,EAAAA,IAAG,SAACC,GAAQ,OAAA,IAAIO,EAAwBP,KACxCE,EAAAA,WAAU,SAACC,GAAS,OAAAC,EAAAA,GAAG,IAAIxK,EAAqB,oCAIxD,2BArCC2I,EAAAA,sDAvBQiC,EAAAA,wCA8BJjB,EAAAA,OAAMf,KAAA,CAACiC,EAAAA,sBAOVC,EAAA,CADCC,EAAAA,6DAeDD,EAAA,CADCC,EAAAA,8DAUHnB,EArCA,GC1BA,IAAAoB,EAAA,WAQA,SAAAA,KAWmC,2BAXlCC,EAAAA,SAAQrC,KAAA,CAAC,CACRsC,QAAS,CACPC,EAAAA,cAAcC,WAAW,CACvBxB,IAEFyB,EAAAA,YAAYD,WRb4B,YQaalK,IAEvDoK,UAAW,CACX,CAAEC,QAASxC,EAAiCyC,SAAU,UAGrBR,EAnBnC,kCRA4C","sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { DaffCart } from '@daffodil/cart';\nimport { DaffOrder } from '@daffodil/order';\n\nexport enum DaffOrderActionTypes {\n  OrderLoadAction = '[Order] Order Load Action',\n  OrderLoadSuccessAction = '[Order] Order Load Success Action',\n  OrderLoadFailureAction = '[Order] Order Load Failure Action',\n  OrderListAction = '[Order] Order List Action',\n  OrderListSuccessAction = '[Order] Order List Success Action',\n  OrderListFailureAction = '[Order] Order List Failure Action'\n}\n\n/**\n * Triggers the loading of the specified order.\n *\n * @param orderId The order ID.\n * @param cartId The optional guest cart ID.\n */\nexport class DaffOrderLoad<\n  T extends DaffOrder = DaffOrder,\n  V extends DaffCart = DaffCart\n> implements Action {\n  readonly type = DaffOrderActionTypes.OrderLoadAction;\n\n  constructor(public orderId: T['id'], public cartId?: V['id']) {}\n}\n\nexport class DaffOrderLoadSuccess<T extends DaffOrder = DaffOrder> implements Action {\n  readonly type = DaffOrderActionTypes.OrderLoadSuccessAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffOrderLoadFailure implements Action {\n  readonly type = DaffOrderActionTypes.OrderLoadFailureAction;\n\n  constructor(public payload: string) {}\n}\n\n/**\n * Triggers the loading of the orders for either the currently logged-in user or the specified guest cart.\n *\n * @param payload The guest cart ID.\n */\nexport class DaffOrderList<T extends DaffCart = DaffCart> implements Action {\n  readonly type = DaffOrderActionTypes.OrderListAction;\n\n  constructor(public payload?: T['id']) {}\n}\n\nexport class DaffOrderListSuccess<T extends DaffOrder = DaffOrder> implements Action {\n  readonly type = DaffOrderActionTypes.OrderListSuccessAction;\n\n  constructor(public payload: T[]) {}\n}\n\nexport class DaffOrderListFailure implements Action {\n  readonly type = DaffOrderActionTypes.OrderListFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport type DaffOrderActions<\n  T extends DaffOrder = DaffOrder,\n  V extends DaffCart = DaffCart\n> =\n  | DaffOrderLoad<T, V>\n  | DaffOrderLoadSuccess<T>\n  | DaffOrderLoadFailure\n  | DaffOrderList\n  | DaffOrderListSuccess<T>\n  | DaffOrderListFailure\n","import { DaffOrderReducerState } from './order-reducer.interface';\n\nexport const daffOrderInitialState: DaffOrderReducerState = {\n  loading: false,\n  errors: []\n};\n","import { DaffOrder } from '@daffodil/order';\n\nimport { DaffOrderActions, DaffOrderActionTypes } from '../../actions/order.actions';\nimport { DaffOrderReducerState } from './order-reducer.interface';\nimport { daffOrderInitialState } from './order-initial-state';\n\nexport function daffOrderReducer<T extends DaffOrder = DaffOrder>(\n  state = daffOrderInitialState,\n  action: DaffOrderActions<T>\n): DaffOrderReducerState {\n  switch (action.type) {\n    case DaffOrderActionTypes.OrderListAction:\n    case DaffOrderActionTypes.OrderLoadAction:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case DaffOrderActionTypes.OrderListSuccessAction:\n    case DaffOrderActionTypes.OrderLoadSuccessAction:\n      return {\n        ...state,\n        loading: false,\n        errors: []\n      };\n\n    case DaffOrderActionTypes.OrderListFailureAction:\n    case DaffOrderActionTypes.OrderLoadFailureAction:\n      return {\n        ...state,\n        errors: [\n          ...state.errors,\n          action.payload\n        ],\n        loading: false\n      }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { DaffOrder } from '@daffodil/order';\n\n/**\n * Order Adapter for changing/overwriting entity state.\n */\nexport const daffGetOrderAdapter = (() => {\n  let cache;\n  return <T extends DaffOrder = DaffOrder>(): EntityAdapter<T> =>\n    cache = cache || createEntityAdapter<T>();\n})();\n","import { daffGetOrderAdapter } from './order-entities-adapter';\nimport { DaffOrderEntityState } from './order-entities-state.interface';\n\n/**\n * Initial state for order entity state.\n */\nexport const daffOrderEntitiesInitialState: DaffOrderEntityState<any> = daffGetOrderAdapter().getInitialState();\n","import { DaffOrder } from '@daffodil/order';\n\nimport { DaffOrderActions, DaffOrderActionTypes } from '../../actions/order.actions';\nimport { daffGetOrderAdapter } from './order-entities-adapter';\nimport { DaffOrderEntityState } from './order-entities-state.interface';\nimport { daffOrderEntitiesInitialState } from './order-entities-initial-state';\n\n/**\n * Reducer function that catches actions and changes/overwrites order entities state.\n */\nexport function daffOrderEntitiesReducer<T extends DaffOrder = DaffOrder>(\n  state = daffOrderEntitiesInitialState,\n  action: DaffOrderActions<T>\n): DaffOrderEntityState<T> {\n  const adapter = daffGetOrderAdapter<T>();\n\n  switch (action.type) {\n    case DaffOrderActionTypes.OrderLoadSuccessAction:\n      return adapter.upsertOne(action.payload, state);\n\n    case DaffOrderActionTypes.OrderListSuccessAction:\n      return adapter.upsertMany(action.payload, state);\n\n    default:\n      return state;\n  }\n}\n","import { ActionReducerMap } from '@ngrx/store';\n\nimport { daffOrderReducer } from './order/order.reducer';\nimport { DaffOrderReducersState } from './order-reducers.interface';\nimport { daffOrderEntitiesReducer } from './order-entities/public_api';\n\nexport const daffOrderReducers: ActionReducerMap<DaffOrderReducersState> = {\n  order: daffOrderReducer,\n  orders: daffOrderEntitiesReducer\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffOrder } from '@daffodil/order';\n\nimport { DaffOrderReducersState, DAFF_ORDER_STORE_FEATURE_KEY } from '../reducers/public_api';\n\nexport interface DaffOrderFeatureSelector<T extends DaffOrder = DaffOrder> {\n  selectOrderFeatureState: MemoizedSelector<object, DaffOrderReducersState<T>>\n}\n\nexport const getDaffOrderReducersStateSelector = (() => {\n  let cache;\n  return <T extends DaffOrder = DaffOrder>(): DaffOrderFeatureSelector<T> =>\n    cache = cache || {\n      selectOrderFeatureState: createFeatureSelector<DaffOrderReducersState<T>>(DAFF_ORDER_STORE_FEATURE_KEY)\n    }\n})();\n","export const DAFF_ORDER_STORE_FEATURE_KEY = 'daffOrder';\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { DaffOrder, DaffOrderItem, DaffOrderTotal, DaffOrderTotalTypeEnum } from '@daffodil/order';\nimport { getDaffCartSelectors } from '@daffodil/cart/state';\n\nimport {\n  daffGetOrderAdapter,\n  DaffOrderEntityState\n} from '../reducers/public_api';\nimport { getDaffOrderReducersStateSelector } from './order-feature.selector';\n\nexport interface DaffOrderEntitySelectors<T extends DaffOrder = DaffOrder> {\n  selectOrderEntitiesState: MemoizedSelector<object, DaffOrderEntityState<T>>;\n  /**\n   * Selector for order IDs.\n   */\n  selectOrderIds: MemoizedSelector<object, string[] | number[]>;\n  /**\n   * Selector for order entities.\n   */\n  selectOrderEntities: MemoizedSelector<object, Dictionary<T>>;\n  /**\n   * Selector for all orders.\n   */\n  selectAllOrders: MemoizedSelector<object, T[]>;\n  /**\n   * Selector for total number of orders.\n   */\n  selectOrderTotal: MemoizedSelector<object, number>;\n  selectOrder: MemoizedSelector<object, T>;\n\n  /**\n   * Selector for the most recently placed order (if any).\n   */\n  selectPlacedOrder: MemoizedSelector<object, T>;\n  /**\n   * Selector for the existence of the most recently placed order.\n   */\n  selectHasPlacedOrder: MemoizedSelector<object, boolean>;\n\n  /**\n   * Selects the specified order's totals.\n   */\n  selectOrderTotals: MemoizedSelector<object, T['totals']>;\n  /**\n   * Selects the specified order's applied coupon codes.\n   */\n  selectOrderAppliedCodes: MemoizedSelector<object, T['applied_codes']>;\n  /**\n   * Selects the specified order's items.\n   */\n  selectOrderItems: MemoizedSelector<object, T['items']>;\n  /**\n   * Selects the specified order's billing addresses.\n   */\n  selectOrderBillingAddresses: MemoizedSelector<object, T['billing_addresses']>;\n  /**\n   * Selects the specified order's shipping addresses.\n   */\n  selectOrderShippingTotalAddresses: MemoizedSelector<object, T['shipping_addresses']>;\n  /**\n   * Selects the specified order's shipments.\n   */\n  selectOrderShipments: MemoizedSelector<object, T['shipments']>;\n  /**\n   * Selects the specified order's payment.\n   */\n  selectOrderPayment: MemoizedSelector<object, T['payment']>;\n  /**\n   * Selects the specified order's invoices.\n   */\n  selectOrderInvoices: MemoizedSelector<object, T['invoices']>;\n  /**\n   * Selects the specified order's credits.\n   */\n  selectOrderCredits: MemoizedSelector<object, T['credits']>;\n\n  /**\n   * Selects the specified order's specified item.\n   */\n  selectOrderItem: MemoizedSelector<object, DaffOrderItem>;\n\n  /**\n   * Selects the specified order's grand total.\n   */\n  selectOrderGrandTotal: MemoizedSelector<object, DaffOrderTotal>;\n  /**\n   * Selects the specified order's subtotal.\n   */\n  selectOrderSubtotal: MemoizedSelector<object, DaffOrderTotal>;\n  /**\n   * Selects the specified order's shipping total.\n   */\n  selectOrderShippingTotal: MemoizedSelector<object, DaffOrderTotal>;\n  /**\n   * Selects the specified order's discount total.\n   */\n\tselectOrderDiscountTotal: MemoizedSelector<object, DaffOrderTotal>;\n\t/**\n\t * Selects whether the specified order has a discount.\n\t */\n\tselectOrderHasDiscount: MemoizedSelector<object, boolean>;\n  /**\n   * Selects the specified order's tax total.\n   */\n  selectOrderTaxTotal: MemoizedSelector<object, DaffOrderTotal>;\n}\n\nconst createOrderEntitySelectors = <T extends DaffOrder = DaffOrder>() => {\n  const { selectOrderFeatureState } = getDaffOrderReducersStateSelector<T>();\n  const selectOrderEntitiesState = createSelector(\n    selectOrderFeatureState,\n    state => state.orders\n  )\n  const { selectIds, selectEntities, selectAll, selectTotal } = daffGetOrderAdapter<T>().getSelectors(selectOrderEntitiesState);\n  const { selectCartOrderId } = getDaffCartSelectors();\n\n  const selectOrder = createSelector(\n    selectEntities,\n    (orders, props) => orders[props.id] || null\n  )\n\n  const selectPlacedOrder = createSelector(\n    selectEntities,\n    selectCartOrderId,\n    (orders, orderId) => orderId ? selectOrder.projector(orders, {id: orderId}) : null\n  )\n  const selectHasPlacedOrder = createSelector(\n    selectPlacedOrder,\n    placedOrder => !!placedOrder\n  )\n\n  const selectOrderTotals = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order: DaffOrder = selectOrder.projector(orders, {id: props.id});\n      return (order && order.totals) || []\n    }\n  );\n  const selectOrderAppliedCodes = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.applied_codes) || []\n    }\n  );\n  const selectOrderItems = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.items) || []\n    }\n  );\n  const selectOrderBillingAddresses = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.billing_addresses) || []\n    }\n  );\n  const selectOrderShippingTotalAddresses = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.shipping_addresses) || []\n    }\n  );\n  const selectOrderShipments = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.shipments) || []\n    }\n  );\n  const selectOrderPayment = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.payment) || null\n    }\n  );\n  const selectOrderInvoices = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.invoices) || []\n    }\n  );\n  const selectOrderCredits = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const order = selectOrder.projector(orders, {id: props.id});\n      return (order && order.credits) || []\n    }\n  );\n\n  const selectOrderGrandTotal = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const totals = selectOrderTotals.projector(orders, {id: props.id});\n      const index = totals.findIndex(total => total.type === DaffOrderTotalTypeEnum.GrandTotal);\n\n      return index > -1 ? totals[index] : null\n    }\n  );\n  const selectOrderSubtotal = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const totals = selectOrderTotals.projector(orders, { id: props.id });\n      const index = totals.findIndex(total => total.type === DaffOrderTotalTypeEnum.Subtotal);\n\n      return index > -1 ? totals[index] : null\n    }\n  );\n  const selectOrderShippingTotal = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const totals = selectOrderTotals.projector(orders, { id: props.id });\n      const index = totals.findIndex(total => total.type === DaffOrderTotalTypeEnum.Shipping);\n\n      return index > -1 ? totals[index] : null\n    }\n  );\n  const selectOrderDiscountTotal = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const totals = selectOrderTotals.projector(orders, { id: props.id });\n      const index = totals.findIndex(total => total.type === DaffOrderTotalTypeEnum.Discount);\n\n      return index > -1 ? totals[index] : null\n    }\n  );\n  const selectOrderHasDiscount = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const discountTotal = selectOrderDiscountTotal.projector(orders, { id: props.id });\n\n\t\t\t//todo: use optional chaining when possible\n      return !!discountTotal && discountTotal.value > 0;\n    }\n  );\n  const selectOrderTaxTotal = createSelector(\n    selectEntities,\n    (orders, props) => {\n      const totals = selectOrderTotals.projector(orders, { id: props.id });\n      const index = totals.findIndex(total => total.type === DaffOrderTotalTypeEnum.Tax);\n\n      return index > -1 ? totals[index] : null\n    }\n  );\n\n  const selectOrderItem = createSelector(\n\t\tselectEntities,\n\t\t(orders, props) => selectOrderItems.projector(orders, {id: props.id}).find(item => item.item_id === props.item_id) || null\n  );\n\n  return {\n    selectOrderEntitiesState,\n    selectOrderIds: selectIds,\n    selectOrderEntities: selectEntities,\n    selectAllOrders: selectAll,\n    selectOrderTotal: selectTotal,\n\n    selectPlacedOrder,\n    selectHasPlacedOrder,\n\n    selectOrder,\n    selectOrderTotals,\n    selectOrderAppliedCodes,\n    selectOrderItems,\n    selectOrderBillingAddresses,\n    selectOrderShippingTotalAddresses,\n    selectOrderShipments,\n    selectOrderPayment,\n    selectOrderInvoices,\n    selectOrderCredits,\n    selectOrderItem,\n\n    selectOrderGrandTotal,\n    selectOrderSubtotal,\n    selectOrderShippingTotal,\n    selectOrderDiscountTotal,\n    selectOrderHasDiscount,\n    selectOrderTaxTotal,\n  }\n}\n\nexport const getDaffOrderEntitySelectors = (() => {\n  let cache;\n  return <T extends DaffOrder = DaffOrder>(): DaffOrderEntitySelectors<T> =>\n    cache = cache || createOrderEntitySelectors<T>()\n})();\n\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffOrder } from '@daffodil/order';\n\nimport { getDaffOrderReducersStateSelector } from './order-feature.selector';\nimport {\n  DaffOrderReducerState,\n} from '../reducers/public_api';\n\nexport interface DaffOrderSelectors {\n  selectOrderState: MemoizedSelector<object, DaffOrderReducerState>;\n  selectOrderLoading: MemoizedSelector<object, boolean>;\n  selectOrderErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createOrderSelectors = <T extends DaffOrder = DaffOrder>() => {\n  const { selectOrderFeatureState } = getDaffOrderReducersStateSelector<T>();\n  const selectOrderState = createSelector(\n    selectOrderFeatureState,\n    state => state.order\n  );\n\n  const selectOrderLoading = createSelector(\n    selectOrderState,\n    state => state.loading\n  );\n\n  const selectOrderErrors = createSelector(\n    selectOrderState,\n    state => state.errors\n  );\n\n  return {\n    selectOrderState,\n    selectOrderLoading,\n    selectOrderErrors\n  }\n}\n\nexport const getOrderSelectors = (() => {\n  let cache;\n  return <T extends DaffOrder = DaffOrder>(): DaffOrderSelectors =>\n    cache = cache || createOrderSelectors<T>()\n})();\n","import { DaffOrder } from '@daffodil/order';\n\nimport { DaffOrderEntitySelectors, getDaffOrderEntitySelectors } from './order-entities.selector';\nimport { DaffOrderSelectors, getOrderSelectors } from './order.selector';\nimport { DaffOrderFeatureSelector, getDaffOrderReducersStateSelector } from './order-feature.selector';\n\nexport interface DaffOrderAllSelectors<T extends DaffOrder = DaffOrder> extends\n  DaffOrderEntitySelectors<T>,\n  DaffOrderSelectors,\n  DaffOrderFeatureSelector<T> {}\n\nexport const getDaffOrderSelectors = (() => {\n  let cache;\n  return <T extends DaffOrder = DaffOrder>(): DaffOrderAllSelectors<T> =>\n    cache = cache || {\n      ...getOrderSelectors<T>(),\n      ...getDaffOrderEntitySelectors<T>(),\n      ...getDaffOrderReducersStateSelector<T>()\n    }\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Action, Store, select } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { DaffOrder, DaffOrderTotal } from '@daffodil/order';\n\nimport { DaffOrderReducersState } from '../../reducers/public_api';\nimport {\n  getDaffOrderSelectors\n} from '../../selectors/public_api';\nimport { DaffOrderFacadeInterface } from './order-facade.interface';\nimport { DaffOrderEntitySelectors } from '../../selectors/order-entities.selector';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderFacade<T extends DaffOrder = DaffOrder> implements DaffOrderFacadeInterface<T> {\n  loading$: Observable<boolean>;\n  errors$: Observable<string[]>;\n\n  orders$: Observable<T[]>;\n  orderIds$: Observable<(string | number)[]>;\n  orderCount$: Observable<number>;\n  orderEntities$: Observable<Dictionary<T>>;\n\n  placedOrder$: Observable<T>;\n  hasPlacedOrder$: Observable<boolean>;\n\n  _order: DaffOrderEntitySelectors<T>['selectOrder'];\n  _totals: DaffOrderEntitySelectors<T>['selectOrderTotals'];\n  _appliedCodes: DaffOrderEntitySelectors<T>['selectOrderAppliedCodes'];\n  _items: DaffOrderEntitySelectors<T>['selectOrderItems'];\n  _billingAddresses: DaffOrderEntitySelectors<T>['selectOrderBillingAddresses'];\n  _shippingAddresses: DaffOrderEntitySelectors<T>['selectOrderShippingTotalAddresses'];\n  _shipments: DaffOrderEntitySelectors<T>['selectOrderShipments'];\n  _payment: DaffOrderEntitySelectors<T>['selectOrderPayment'];\n  _invoices: DaffOrderEntitySelectors<T>['selectOrderInvoices'];\n  _credits: DaffOrderEntitySelectors<T>['selectOrderCredits'];\n  _grandTotal: DaffOrderEntitySelectors<T>['selectOrderGrandTotal'];\n  _subtotal: DaffOrderEntitySelectors<T>['selectOrderSubtotal'];\n  _shipping: DaffOrderEntitySelectors<T>['selectOrderShippingTotal'];\n  _discount: DaffOrderEntitySelectors<T>['selectOrderDiscountTotal'];\n  _hasDiscount: DaffOrderEntitySelectors<T>['selectOrderHasDiscount'];\n  _tax: DaffOrderEntitySelectors<T>['selectOrderTaxTotal'];\n\n  constructor(private store: Store<DaffOrderReducersState<T>>) {\n    const {\n      selectOrderIds,\n      selectOrderEntities,\n      selectAllOrders,\n      selectOrderTotal,\n      selectOrderLoading,\n      selectOrderErrors,\n\n      selectPlacedOrder,\n      selectHasPlacedOrder,\n\n      selectOrder,\n      selectOrderTotals,\n      selectOrderAppliedCodes,\n      selectOrderItems,\n      selectOrderBillingAddresses,\n      selectOrderShippingTotalAddresses,\n      selectOrderShipments,\n      selectOrderPayment,\n      selectOrderInvoices,\n      selectOrderCredits,\n\n      selectOrderGrandTotal,\n      selectOrderSubtotal,\n      selectOrderShippingTotal,\n      selectOrderDiscountTotal,\n      selectOrderHasDiscount,\n      selectOrderTaxTotal,\n    } = getDaffOrderSelectors<T>();\n\n    this.loading$ = this.store.pipe(select(selectOrderLoading));\n    this.errors$ = this.store.pipe(select(selectOrderErrors));\n\n    this.orders$ = this.store.pipe(select(selectAllOrders));\n    this.orderIds$ = this.store.pipe(select(selectOrderIds));\n    this.orderCount$ = this.store.pipe(select(selectOrderTotal));\n    this.orderEntities$ = this.store.pipe(select(selectOrderEntities));\n\n    this.placedOrder$ = this.store.pipe(select(selectPlacedOrder));\n    this.hasPlacedOrder$ = this.store.pipe(select(selectHasPlacedOrder));\n\n    this._order = selectOrder;\n    this._totals = selectOrderTotals;\n    this._appliedCodes = selectOrderAppliedCodes;\n    this._items = selectOrderItems;\n    this._billingAddresses = selectOrderBillingAddresses;\n    this._shippingAddresses = selectOrderShippingTotalAddresses;\n    this._shipments = selectOrderShipments;\n    this._payment = selectOrderPayment;\n    this._invoices = selectOrderInvoices;\n    this._credits = selectOrderCredits;\n    this._grandTotal = selectOrderGrandTotal;\n    this._subtotal = selectOrderSubtotal;\n    this._shipping = selectOrderShippingTotal;\n    this._discount = selectOrderDiscountTotal;\n    this._hasDiscount = selectOrderHasDiscount;\n    this._tax = selectOrderTaxTotal;\n  }\n\n  getOrder$(orderId: T['id']): Observable<T> {\n    return this.store.pipe(select(this._order, {id: orderId}))\n  }\n\n  getTotals$(orderId: T['id']): Observable<T['totals']> {\n    return this.store.pipe(select(this._totals, {id: orderId}))\n  }\n\n  getAppliedCodes$(orderId: T['id']): Observable<T['applied_codes']> {\n    return this.store.pipe(select(this._appliedCodes, {id: orderId}))\n  }\n\n  getItems$(orderId: T['id']): Observable<T['items']> {\n    return this.store.pipe(select(this._items, {id: orderId}))\n  }\n\n  getBillingAddresses$(orderId: T['id']): Observable<T['billing_addresses']> {\n    return this.store.pipe(select(this._billingAddresses, {id: orderId}))\n  }\n\n  getShippingAddresses$(orderId: T['id']): Observable<T['shipping_addresses']> {\n    return this.store.pipe(select(this._shippingAddresses, {id: orderId}))\n  }\n\n  getShipments$(orderId: T['id']): Observable<T['shipments']> {\n    return this.store.pipe(select(this._shipments, {id: orderId}))\n  }\n\n  getPayment$(orderId: T['id']): Observable<T['payment']> {\n    return this.store.pipe(select(this._payment, {id: orderId}))\n  }\n\n  getInvoices$(orderId: T['id']): Observable<T['invoices']> {\n    return this.store.pipe(select(this._invoices, {id: orderId}))\n  }\n\n  getCredits$(orderId: T['id']): Observable<T['credits']> {\n    return this.store.pipe(select(this._credits, {id: orderId}))\n  }\n\n  getGrandTotal$(orderId: T['id']): Observable<DaffOrderTotal> {\n    return this.store.pipe(select(this._grandTotal, {id: orderId}))\n  };\n  getSubtotal$(orderId: T['id']): Observable<DaffOrderTotal> {\n    return this.store.pipe(select(this._subtotal, {id: orderId}))\n  };\n  getShippingTotal$(orderId: T['id']): Observable<DaffOrderTotal> {\n    return this.store.pipe(select(this._shipping, {id: orderId}))\n  };\n  getDiscountTotal$(orderId: T['id']): Observable<DaffOrderTotal> {\n    return this.store.pipe(select(this._discount, {id: orderId}))\n  };\n  hasDiscount$(orderId: T['id']): Observable<boolean> {\n    return this.store.pipe(select(this._hasDiscount, {id: orderId}))\n  };\n  getTaxTotal$(orderId: T['id']): Observable<DaffOrderTotal> {\n    return this.store.pipe(select(this._tax, {id: orderId}))\n  };\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const DaffPlacedOrderGuardRedirectUrl = new InjectionToken<string>('DaffPlacedOrderGuardRedirectUrl');\n","import { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\nimport { tap } from 'rxjs/operators';\n\nimport { DaffOrderFacade } from '../../facades/order/order.facade';\nimport { DaffPlacedOrderGuardRedirectUrl } from './placed-order-guard-redirect.token';\n\n/**\n * A routing guard that will redirect to a given url if the placed order is not defined.\n * The url is `/` by default, but can be overridden with the DaffPlacedOrderGuardRedirectUrl injection token.\n */\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class DaffPlacedOrderGuard implements CanActivate {\n  constructor(\n\t\tprivate facade: DaffOrderFacade,\n\t\tprivate router: Router,\n\t\t@Inject(DaffPlacedOrderGuardRedirectUrl) private redirectUrl: string\n\t) {}\n\n  canActivate(): Observable<boolean> {\n    return this.facade.hasPlacedOrder$.pipe(\n\t\t\ttap(hasPlacedOrder => {\n\t\t\t\tif (!hasPlacedOrder) {\n\t\t\t\t\tthis.router.navigateByUrl(this.redirectUrl)\n\t\t\t\t}\n\t\t\t})\n\t\t)\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport {\n  DaffCart\n} from '@daffodil/cart';\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n  DaffOrderDriver\n} from '@daffodil/order/driver';\n\nimport {\n  DaffOrderActionTypes,\n  DaffOrderLoad,\n  DaffOrderLoadSuccess,\n  DaffOrderLoadFailure,\n  DaffOrderList,\n  DaffOrderListSuccess,\n  DaffOrderListFailure,\n} from '../actions/order.actions';\n\n@Injectable()\nexport class DaffOrderEffects<\n  T extends DaffOrder = DaffOrder,\n  V extends DaffCart = DaffCart\n> {\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffOrderDriver) private driver: DaffOrderServiceInterface<T>,\n  ) {}\n\n  /**\n   * An effect for the loading of an order.\n   */\n  @Effect()\n  get$ = this.actions$.pipe(\n    ofType(DaffOrderActionTypes.OrderLoadAction),\n    switchMap((action: DaffOrderLoad<T, V>) =>\n      this.driver.get(action.orderId, action.cartId).pipe(\n        map(resp => new DaffOrderLoadSuccess<T>(resp)),\n        catchError(error => of(new DaffOrderLoadFailure('Failed to load order')))\n      )\n    ),\n  )\n\n  /**\n   * An effect for the listing of orders.\n   */\n  @Effect()\n  list$ = this.actions$.pipe(\n    ofType(DaffOrderActionTypes.OrderListAction),\n    switchMap((action: DaffOrderList) =>\n      this.driver.list(action.payload).pipe(\n        map(resp => new DaffOrderListSuccess<T>(resp)),\n        catchError(error => of(new DaffOrderListFailure('Failed to list the orders')))\n      )\n    ),\n  )\n}\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n\nimport { DAFF_ORDER_STORE_FEATURE_KEY, daffOrderReducers } from './reducers/public_api';\nimport { DaffOrderEffects } from './effects/order.effects';\nimport { DaffPlacedOrderGuardRedirectUrl } from './guards/public_api';\n\n@NgModule({\n  imports: [\n    EffectsModule.forFeature([\n      DaffOrderEffects,\n    ]),\n    StoreModule.forFeature(DAFF_ORDER_STORE_FEATURE_KEY, daffOrderReducers),\n  ],\n  providers: [\n\t\t{ provide: DaffPlacedOrderGuardRedirectUrl, useValue: '/' },\n  ]\n})\nexport class DaffOrderStateModule {}\n"]}