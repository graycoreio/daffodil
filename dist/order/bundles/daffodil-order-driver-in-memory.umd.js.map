{"version":3,"file":"daffodil-order-driver-in-memory.umd.js","sources":["ng://@daffodil/order/driver/in-memory/drivers/order.service.ts","ng://@daffodil/order/driver/in-memory/drivers/order-driver.module.ts","ng://@daffodil/order/driver/in-memory/backend/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n} from '@daffodil/order/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryOrderService implements DaffOrderServiceInterface<DaffOrder> {\n  url = '/api/orders';\n\n  constructor(private http: HttpClient) {}\n\n  get(orderId: DaffOrder['id']): Observable<DaffOrder> {\n    return this.http.get<DaffOrder>(`${this.url}/${orderId}`);\n  }\n\n  list(): Observable<DaffOrder[]> {\n    return this.http.get<DaffOrder[]>(`${this.url}/`);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffOrderDriver,\n} from '@daffodil/order/driver';\n\nimport { DaffInMemoryOrderService } from './order.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffOrderInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffOrderInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffOrderDriver,\n          useExisting: DaffInMemoryOrderService\n        },\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfo,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffInMemoryDataServiceInterface } from '@daffodil/core/testing';\nimport { DaffOrder } from '@daffodil/order';\nimport {\n  DaffOrderFactory,\n} from '@daffodil/order/testing';\n\n/**\n * An in-memory service that stubs out the backend services for getting orders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendOrderService implements InMemoryDbService, DaffInMemoryDataServiceInterface {\n  orders: DaffOrder[];\n\n  constructor(\n    private orderFactory: DaffOrderFactory,\n  ) {\n    this.orders = this.orderFactory.createMany(5);\n  }\n\n  /**\n   * Creates a fake database of orders for the order inmemory backend service.\n   *\n   * @returns A fake database of an array of orders\n   */\n  createDb(reqInfo: RequestInfo): any {\n    if (reqInfo) {\n      const seedData = reqInfo.utils.getJsonBody(reqInfo.req).orders;\n      if (seedData) {\n        this.orders = seedData;\n      }\n    }\n\n    return {\n      orders: this.orders\n    };\n  }\n\n  /**\n   * Responds to GET requests.\n   */\n  get(reqInfo: RequestInfo): any {\n    return reqInfo.utils.createResponse$(() => ({\n      body: reqInfo.id ? this.getOrder(reqInfo) : this.listOrders(reqInfo),\n      status: STATUS.OK\n    }))\n  }\n\n  private getOrder(reqInfo: RequestInfo) {\n    return reqInfo.collection.find(order => order.id === reqInfo.id)\n  }\n\n  private listOrders(reqInfo: RequestInfo) {\n    return reqInfo.collection\n  }\n}\n"],"names":["Injectable","HttpClient","DaffOrderDriver","NgModule","CommonModule","STATUS","DaffOrderFactory"],"mappings":";;;;;;;;;;AAAA;QAiBE,kCAAoB,IAAgB;YAAhB,SAAI,GAAJ,IAAI,CAAY;YAFpC,QAAG,GAAG,aAAa,CAAC;SAEoB;;;;;QAExC,sCAAG;;;;QAAH,UAAI,OAAwB;YAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,IAAI,CAAC,GAAG,SAAI,OAAS,CAAC,CAAC;SAC3D;;;;QAED,uCAAI;;;QAAJ;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,IAAI,CAAC,GAAG,MAAG,CAAC,CAAC;SACnD;;oBAdFA,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBAZQC,eAAU;;;uCADnB;KAWA,IAeC;;;QAXC,uCAAoB;;;;;QAER,wCAAwB;;;;;;;ACjBtC;QASA;SAiBC;;;;QAXQ,qCAAO;;;QAAd;YACE,OAAO;gBACL,QAAQ,EAAE,6BAA6B;gBACvC,SAAS,EAAE;oBACT;wBACE,OAAO,EAAEC,sBAAe;wBACxB,WAAW,EAAE,wBAAwB;qBACtC;iBACF;aACF,CAAC;SACH;;oBAhBFC,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;yBACb;qBACF;;QAaD,oCAAC;KAjBD;;;;;;;;;;;ICTA;;;AAgBA;QAME,yCACU,YAA8B;YAA9B,iBAAY,GAAZ,YAAY,CAAkB;YAEtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC/C;;;;;;;;;;;;QAOD,kDAAQ;;;;;;QAAR,UAAS,OAAoB;YAC3B,IAAI,OAAO,EAAE;;oBACL,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;gBAC9D,IAAI,QAAQ,EAAE;oBACZ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;iBACxB;aACF;YAED,OAAO;gBACL,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC;SACH;;;;;;;;;QAKD,6CAAG;;;;;QAAH,UAAI,OAAoB;YAAxB,iBAKC;YAJC,OAAO,OAAO,CAAC,KAAK,CAAC,eAAe;;;YAAC,cAAM,QAAC;gBAC1C,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC;gBACpE,MAAM,EAAEC,4BAAM,CAAC,EAAE;aAClB,IAAC,EAAC,CAAA;SACJ;;;;;;QAEO,kDAAQ;;;;;QAAhB,UAAiB,OAAoB;YACnC,OAAO,OAAO,CAAC,UAAU,CAAC,IAAI;;;;YAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,GAAA,EAAC,CAAA;SACjE;;;;;;QAEO,oDAAU;;;;;QAAlB,UAAmB,OAAoB;YACrC,OAAO,OAAO,CAAC,UAAU,CAAA;SAC1B;;oBA9CFL,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBARCM,wBAAgB;;;8CAVlB;KAgBA,IA+CC;;;QA3CC,iDAAoB;;;;;QAGlB,uDAAsC;;;;;;;;;;;;;;;"}