{"version":3,"sources":["ng://@daffodil/order/driver/in-memory/drivers/order.service.ts","ng://@daffodil/order/driver/in-memory/drivers/order-driver.module.ts","ng://@daffodil/order/driver/in-memory/backend/order.service.ts"],"names":["DaffInMemoryOrderService","http","this","url","prototype","get","orderId","list","Injectable","args","providedIn","HttpClient","DaffOrderInMemoryDriverModule","forRoot","ngModule","providers","provide","DaffOrderDriver","useExisting","NgModule","imports","CommonModule","DaffInMemoryBackendOrderService","orderFactory","orders","createMany","createDb","reqInfo","seedData","utils","getJsonBody","req","_this","createResponse$","body","id","getOrder","listOrders","status","STATUS","OK","collection","find","order","DaffOrderFactory"],"mappings":"0zBAAA,IAAAA,EAAA,WAiBE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAFpBC,KAAAC,IAAM,qBAINH,EAAAI,UAAAC,IAAA,SAAIC,GACF,OAAOJ,KAAKD,KAAKI,IAAkBH,KAAKC,IAAG,IAAIG,IAGjDN,EAAAI,UAAAG,KAAA,WACE,OAAOL,KAAKD,KAAKI,IAAoBH,KAAKC,IAAG,0BAbhDK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAXLC,EAAAA,+IADT,GCAA,IAAAC,EAAA,WASA,SAAAA,KAiBA,OAXSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,gBACTC,YAAalB,0BAZtBmB,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,kBAeJT,EA1BA,GCgBAU,EAAA,WAME,SAAAA,EACUC,GAAArB,KAAAqB,aAAAA,EAERrB,KAAKsB,OAAStB,KAAKqB,aAAaE,WAAW,UAQ7CH,EAAAlB,UAAAsB,SAAA,SAASC,GACP,GAAIA,EAAS,KACLC,EAAWD,EAAQE,MAAMC,YAAYH,EAAQI,KAAKP,OACpDI,IACF1B,KAAKsB,OAASI,GAIlB,MAAO,CACLJ,OAAQtB,KAAKsB,SAOjBF,EAAAlB,UAAAC,IAAA,SAAIsB,GAAJ,IAAAK,EAAA9B,KACE,OAAOyB,EAAQE,MAAMI,gBAAe,WAAO,MAAA,CACzCC,KAAMP,EAAQQ,GAAKH,EAAKI,SAAST,GAAWK,EAAKK,WAAWV,GAC5DW,OAAQC,EAAAA,OAAOC,OAIXlB,EAAAlB,UAAAgC,SAAR,SAAiBT,GACf,OAAOA,EAAQc,WAAWC,KAAI,SAACC,GAAS,OAAAA,EAAMR,KAAOR,EAAQQ,MAGvDb,EAAAlB,UAAAiC,WAAR,SAAmBV,GACjB,OAAOA,EAAQc,gCA7ClBjC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPZkC,EAAAA,2JAMF","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n} from '@daffodil/order/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryOrderService implements DaffOrderServiceInterface<DaffOrder> {\n  url = '/api/orders';\n\n  constructor(private http: HttpClient) {}\n\n  get(orderId: DaffOrder['id']): Observable<DaffOrder> {\n    return this.http.get<DaffOrder>(`${this.url}/${orderId}`);\n  }\n\n  list(): Observable<DaffOrder[]> {\n    return this.http.get<DaffOrder[]>(`${this.url}/`);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffOrderDriver,\n} from '@daffodil/order/driver';\n\nimport { DaffInMemoryOrderService } from './order.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffOrderInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffOrderInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffOrderDriver,\n          useExisting: DaffInMemoryOrderService\n        },\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfo,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffInMemoryDataServiceInterface } from '@daffodil/core/testing';\nimport { DaffOrder } from '@daffodil/order';\nimport {\n  DaffOrderFactory,\n} from '@daffodil/order/testing';\n\n/**\n * An in-memory service that stubs out the backend services for getting orders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendOrderService implements InMemoryDbService, DaffInMemoryDataServiceInterface {\n  orders: DaffOrder[];\n\n  constructor(\n    private orderFactory: DaffOrderFactory,\n  ) {\n    this.orders = this.orderFactory.createMany(5);\n  }\n\n  /**\n   * Creates a fake database of orders for the order inmemory backend service.\n   *\n   * @returns A fake database of an array of orders\n   */\n  createDb(reqInfo: RequestInfo): any {\n    if (reqInfo) {\n      const seedData = reqInfo.utils.getJsonBody(reqInfo.req).orders;\n      if (seedData) {\n        this.orders = seedData;\n      }\n    }\n\n    return {\n      orders: this.orders\n    };\n  }\n\n  /**\n   * Responds to GET requests.\n   */\n  get(reqInfo: RequestInfo): any {\n    return reqInfo.utils.createResponse$(() => ({\n      body: reqInfo.id ? this.getOrder(reqInfo) : this.listOrders(reqInfo),\n      status: STATUS.OK\n    }))\n  }\n\n  private getOrder(reqInfo: RequestInfo) {\n    return reqInfo.collection.find(order => order.id === reqInfo.id)\n  }\n\n  private listOrders(reqInfo: RequestInfo) {\n    return reqInfo.collection\n  }\n}\n"]}