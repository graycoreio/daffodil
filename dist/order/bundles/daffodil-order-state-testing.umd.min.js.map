{"version":3,"sources":["ng://@daffodil/order/state/testing/mock-order-facade.ts","ng://@daffodil/order/state/testing/order-testing.module.ts"],"names":["MockDaffOrderFacade","this","loading$","BehaviorSubject","errors$","orders$","orderIds$","orderCount$","orderEntities$","placedOrder$","hasPlacedOrder$","prototype","getOrder$","orderId","getTotals$","getAppliedCodes$","getItems$","getBillingAddresses$","getShippingAddresses$","getShipments$","getPayment$","getInvoices$","getCredits$","getGrandTotal$","getSubtotal$","getShippingTotal$","getDiscountTotal$","hasDiscount$","getTaxTotal$","dispatch","action","Injectable","args","providedIn","DaffOrderTestingModule","NgModule","providers","provide","DaffOrderFacade","useExisting"],"mappings":"ohBAAA,IAAAA,EAAA,WAQA,SAAAA,IAEEC,KAAAC,SAAqC,IAAIC,EAAAA,gBAAgB,MACzDF,KAAAG,QAAqC,IAAID,EAAAA,gBAAgB,IAEzDF,KAAAI,QAAwC,IAAIF,EAAAA,gBAAgB,IAC5DF,KAAAK,UAAkD,IAAIH,EAAAA,gBAAgB,IACtEF,KAAAM,YAAuC,IAAIJ,EAAAA,gBAAgB,MAC3DF,KAAAO,eAAyD,IAAIL,EAAAA,gBAAgB,IAE7EF,KAAAQ,aAA2C,IAAIN,EAAAA,gBAAgB,MAC/DF,KAAAS,gBAA4C,IAAIP,EAAAA,iBAAgB,UAEhEH,EAAAW,UAAAC,UAAA,SAAUC,GACR,OAAO,IAAIV,EAAAA,gBAAgB,OAG7BH,EAAAW,UAAAG,WAAA,SAAWD,GACT,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAI,iBAAA,SAAiBF,GACf,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAK,UAAA,SAAUH,GACR,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAM,qBAAA,SAAqBJ,GACnB,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAO,sBAAA,SAAsBL,GACpB,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAQ,cAAA,SAAcN,GACZ,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAS,YAAA,SAAYP,GACV,OAAO,IAAIV,EAAAA,gBAAgB,OAG7BH,EAAAW,UAAAU,aAAA,SAAaR,GACX,OAAO,IAAIV,EAAAA,gBAAgB,KAG7BH,EAAAW,UAAAW,YAAA,SAAYT,GACV,OAAO,IAAIV,EAAAA,gBAAgB,KAE7BH,EAAAW,UAAAY,eAAA,SAAeV,GACb,OAAO,IAAIV,EAAAA,gBAAgB,OAE7BH,EAAAW,UAAAa,aAAA,SAAaX,GACX,OAAO,IAAIV,EAAAA,gBAAgB,OAE7BH,EAAAW,UAAAc,kBAAA,SAAkBZ,GAChB,OAAO,IAAIV,EAAAA,gBAAgB,OAE7BH,EAAAW,UAAAe,kBAAA,SAAkBb,GAChB,OAAO,IAAIV,EAAAA,gBAAgB,OAE7BH,EAAAW,UAAAgB,aAAA,SAAad,GACX,OAAO,IAAIV,EAAAA,iBAAgB,IAE7BH,EAAAW,UAAAiB,aAAA,SAAaf,GACX,OAAO,IAAIV,EAAAA,gBAAgB,OAG7BH,EAAAW,UAAAkB,SAAA,SAASC,yBAvEVC,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAY,kHARzB,GCAA,IAAAC,EAAA,WAMA,SAAAA,KAKqC,2BALpCC,EAAAA,SAAQH,KAAA,CAAC,CACRI,UAAW,CACX,CAAEC,QAASC,EAAAA,gBAAiBC,YAAavC,QAGNkC,EAXrC","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\nimport { Injectable } from '@angular/core';\n\nimport { DaffOrder, DaffOrderTotal } from '@daffodil/order';\nimport { DaffOrderFacadeInterface } from '@daffodil/order/state';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffOrderFacade implements DaffOrderFacadeInterface {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  errors$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\n  orders$: BehaviorSubject<DaffOrder[]> = new BehaviorSubject([]);\n  orderIds$: BehaviorSubject<(string | number)[]> = new BehaviorSubject([]);\n  orderCount$: BehaviorSubject<number> = new BehaviorSubject(null);\n  orderEntities$: BehaviorSubject<Dictionary<DaffOrder>> = new BehaviorSubject({});\n\n  placedOrder$: BehaviorSubject<DaffOrder> = new BehaviorSubject(null);\n  hasPlacedOrder$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  getOrder$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder> {\n    return new BehaviorSubject(null)\n  }\n\n  getTotals$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['totals']> {\n    return new BehaviorSubject([])\n  }\n\n  getAppliedCodes$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['applied_codes']> {\n    return new BehaviorSubject([])\n  }\n\n  getItems$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['items']> {\n    return new BehaviorSubject([])\n  }\n\n  getBillingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['billing_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShippingAddresses$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipping_addresses']> {\n    return new BehaviorSubject([])\n  }\n\n  getShipments$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['shipments']> {\n    return new BehaviorSubject([])\n  }\n\n  getPayment$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['payment']> {\n    return new BehaviorSubject(null)\n  }\n\n  getInvoices$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['invoices']> {\n    return new BehaviorSubject([])\n  }\n\n  getCredits$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrder['credits']> {\n    return new BehaviorSubject([])\n  }\n  getGrandTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getSubtotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getShippingTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  getDiscountTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n  hasDiscount$(orderId: DaffOrder['id']): BehaviorSubject<boolean> {\n    return new BehaviorSubject(false);\n  };\n  getTaxTotal$(orderId: DaffOrder['id']): BehaviorSubject<DaffOrderTotal> {\n    return new BehaviorSubject(null)\n  };\n\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffOrderFacade } from '@daffodil/order/state';\n\nimport { MockDaffOrderFacade } from './mock-order-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffOrderFacade, useExisting: MockDaffOrderFacade }\n\t]\n})\nexport class DaffOrderTestingModule {}\n"]}