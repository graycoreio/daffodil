{"version":3,"sources":["ng://@daffodil/order/driver/magento/2.4.1/models/responses/order-item.ts","ng://@daffodil/order/driver/magento/2.4.1/transforms/responses/order.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-item.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-address.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-shipment-item.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-shipment-tracking.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-shipment.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-payment.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-invoice-item.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-invoice-total.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-invoice.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-credit-item.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-credit-total.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-credit.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order-total.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/fragments/order.ts","ng://@daffodil/order/driver/magento/2.4.1/queries/get-guest-orders.ts","ng://@daffodil/order/driver/magento/2.4.1/injection-tokens/fragments/order.ts","ng://@daffodil/order/driver/magento/2.4.1/validators/get-orders.ts","ng://@daffodil/order/driver/magento/2.4.1/errors/map.ts","ng://@daffodil/order/driver/magento/2.4.1/errors/codes.ts","ng://@daffodil/order/driver/magento/2.4.1/order.service.ts","ng://@daffodil/order/driver/magento/2.4.1/errors/transform.ts","ng://@daffodil/order/driver/magento/2.4.1/order-driver.module.ts"],"names":["Simple","Configurable","Bundle","transformTotals","totals","label","type","DaffOrderTotalTypeEnum","GrandTotal","value","grand_total","sort_order","Subtotal","subtotal","Shipping","total_shipping","Tax","total_tax","Discount","discounts","reduce","acc","discount","daffAdd","amount","transformCouponDiscount","code","transformConfigurableOption","option","attribute_label","value_label","transformBundleOption","option_label","values","product_name","transformItem","item","order","qty","d","rowTotal","product_sale_price","rowTotalWithDiscount","daffSubtract","__assign","DaffOrderItemType","item_id","qty_ordered","quantity_ordered","qty_canceled","quantity_canceled","qty_fulfilled","quantity_shipped","image","url","product_url_key","id","order_id","created_at","updated_at","product_id","parent_item_id","sku","product_sku","name","weight","price","discount_percent","Math","floor","discount_amount","tax_percent","tax_amount","row_total","row_total_with_discount","row_weight","tax_before_discount","product_type","MagentoOrderItemType","Composite","options","bundle_options","map","attributes","selected_options","transformAdditionalItemFields","transformAddress","address","prefix","suffix","firstname","middlename","lastname","telephone","email","street","street2","city","region","region_id","country","country_code","postcode","transformShipmentTracking","tracking","tracking_number","number","tracking_url","carrier","title","carrier_logo","transformShipment","shipment","carrier_title","method","shipping_method","method_description","items","shipmentItem","order_item","transformShipmentItem","transformPayment","payment","findAdditionalData","key","index","additional_data","findIndex","_a","payment_id","cc_type","cc_last4","cc_owner","cc_exp_month","cc_exp_year","transformInvoice","invoice","total","billing_address","shipping_address","invoiceItem","quantity_invoiced","transformInvoiceItem","transformCredit","credit","payment_methods","creditItem","quantity_refunded","transformCreditItem","daffMagentoTransformOrder","extra_attributes","customer_id","order_date","status","applied_codes","billing_addresses","shipping_addresses","shipments","invoices","credits","credit_memos","orderBundleItemSelectedOptionFragment","gql","templateObject_1","__makeTemplateObject","orderItemFragment","templateObject_2","orderAddressFragment","templateObject_1$1","__makeTemplateObject$1","orderShipmentItemFragment","templateObject_1$2","__makeTemplateObject$2","orderShipmentTrackingFragment","templateObject_1$3","__makeTemplateObject$3","orderShipmentFragment","templateObject_1$4","__makeTemplateObject$4","orderPaymentFragment","templateObject_1$5","__makeTemplateObject$5","orderInvoiceItemFragment","templateObject_1$6","__makeTemplateObject$6","orderInvoiceTotalFragment","templateObject_1$7","__makeTemplateObject$7","orderInvoiceFragment","templateObject_1$8","__makeTemplateObject$8","orderCreditItemFragment","templateObject_1$9","__makeTemplateObject$9","orderCreditTotalFragment","templateObject_1$a","__makeTemplateObject$a","orderCreditFragment","templateObject_1$b","__makeTemplateObject$b","orderTotalFragment","templateObject_1$c","__makeTemplateObject$c","orderFragment","templateObject_1$d","__makeTemplateObject$d","getGuestOrders","extraOrderFragments","templateObject_1$e","__makeTemplateObject$e","daffBuildFragmentNameSpread","apply","__spread","daffBuildFragmentDefinition","DaffMagentoExtraOrderFragments","InjectionToken","factory","validateGetOrdersResponse","response","data","graycoreGuestOrders","DaffOrderInvalidAPIResponseError","DaffOrderMagentoErrorMap","DaffCartNotFoundError","DaffOrderMagentoService","apollo","this","prototype","list","cartId","query","variables","pipe","result","catchError","err","throwError","error","daffTransformMagentoError","get","orderId","orders","orders_1","__values","orders_1_1","next","done","String","DaffOrderNotFoundError","Injectable","args","providedIn","Apollo","Inject","DaffOrderMagentoDriverModule","forRoot","ngModule","providers","provide","DaffOrderDriver","useExisting","NgModule","imports","CommonModule"],"mappings":"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","sourcesContent":["import { MagentoMoney } from '@daffodil/driver/magento'\n\nimport { MagentoDiscount } from './discount';\n\nexport enum MagentoOrderItemType {\n  Simple = 'simple',\n  Configurable = 'configurable',\n  Bundle = 'bundle'\n};\n\nexport interface MagentoOrderItemOption {\n  label: string;\n  value: string;\n};\n\nexport interface MagentoOrderItem {\n  id: string;\n  discounts: MagentoDiscount[];\n  product_name: string;\n  product_sale_price: MagentoMoney;\n  product_sku: string;\n  product_type: MagentoOrderItemType;\n  product_url_key: string;\n  quantity_canceled: number;\n  quantity_invoiced: number;\n  quantity_ordered: number;\n  quantity_refunded: number;\n  quantity_returned: number;\n  quantity_shipped: number;\n  selected_options: MagentoOrderItemOption[];\n  entered_options: MagentoOrderItemOption[];\n  status: string;\n}\n\nexport interface MagentoOrderBundleItemSelectedOption {\n  id: string;\n  label: string;\n  values: MagentoOrderBundleItemSelectedOptionValue[];\n};\n\nexport interface MagentoOrderBundleItemSelectedOptionValue {\n  id: string;\n  price: MagentoMoney;\n  product_name: string;\n  product_sku: string;\n  quantity: number;\n};\n\nexport interface MagentoOrderBundleItem extends MagentoOrderItem {\n  bundle_options: MagentoOrderBundleItemSelectedOption[];\n};\n","import { daffAdd, daffSubtract } from '@daffodil/core';\nimport {\n  DaffOrder,\n  DaffOrderTotal,\n  DaffOrderItem,\n  DaffOrderAddress,\n  DaffOrderShipment,\n  DaffOrderShipmentItem,\n  DaffOrderShipmentTracking,\n  DaffOrderPayment,\n  DaffOrderInvoice,\n  DaffOrderTotalTypeEnum,\n  DaffCompositeOrderItemOption,\n  DaffOrderItemType,\n  DaffConfigurableOrderItemAttribute,\n  DaffOrderCoupon\n} from '@daffodil/order';\n\nimport {\n  MagentoOrder,\n  MagentoOrderItem,\n  MagentoOrderShipment,\n  MagentoOrderAddress,\n  MagentoOrderShipmentItem,\n  MagentoOrderShipmentTracking,\n  MagentoOrderPayment,\n  MagentoOrderInvoice\n} from '../../models/responses/public_api';\nimport { MagentoOrderTotal } from '../../models/responses/order-total';\nimport { MagentoOrderCredit } from '../../models/responses/order-credit';\nimport { MagentoOrderCreditItem } from '../../models/responses/order-credit-item';\nimport { MagentoOrderBundleItem, MagentoOrderBundleItemSelectedOption, MagentoOrderItemOption, MagentoOrderItemType } from '../../models/responses/order-item';\nimport { MagentoDiscount } from '../../models/responses/discount';\nimport { MagentoOrderInvoiceItem } from '../../models/responses/order-invoice-item';\n\nfunction transformTotals(totals: MagentoOrderTotal): DaffOrderTotal[] {\n  return [\n    {\n      label: 'Grand Total',\n      type: DaffOrderTotalTypeEnum.GrandTotal,\n      value: totals.grand_total.value,\n      sort_order: 1\n    },\n    {\n      label: 'Subtotal',\n      type: DaffOrderTotalTypeEnum.Subtotal,\n      value: totals.subtotal.value,\n      sort_order: 0\n    },\n    {\n      label: 'Shipping',\n      type: DaffOrderTotalTypeEnum.Shipping,\n      value: totals.total_shipping.value,\n      sort_order: 2\n    },\n    {\n      label: 'Tax',\n      type: DaffOrderTotalTypeEnum.Tax,\n      value: totals.total_tax.value,\n      sort_order: 3\n    },\n    {\n      label: 'Discount',\n      type: DaffOrderTotalTypeEnum.Discount,\n      value: totals.discounts.reduce((acc, discount) => daffAdd(acc, discount.amount.value), 0),\n      sort_order: 4\n    }\n  ]\n}\n\nfunction transformCouponDiscount(discount: MagentoDiscount): DaffOrderCoupon {\n  return {\n    code: discount.label,\n  }\n}\n\nfunction transformConfigurableOption(option: MagentoOrderItemOption): DaffConfigurableOrderItemAttribute {\n  return {\n    attribute_label: option.label,\n\t  value_label: option.value\n  }\n}\n\nfunction transformBundleOption(option: MagentoOrderBundleItemSelectedOption): DaffCompositeOrderItemOption {\n  return {\n    option_label: option.label,\n\t  value_label: option.values && option.values[0] && option.values[0].product_name\n  }\n}\n\nfunction transformAdditionalItemFields(item: MagentoOrderItem) {\n  switch (item.product_type) {\n    case MagentoOrderItemType.Bundle:\n      return {\n        type: DaffOrderItemType.Composite,\n        options: (item as MagentoOrderBundleItem).bundle_options.map(transformBundleOption)\n      }\n    case MagentoOrderItemType.Configurable:\n      return {\n        type: DaffOrderItemType.Configurable,\n        attributes: item.selected_options.map(transformConfigurableOption)\n      }\n    case MagentoOrderItemType.Simple:\n      return {\n        type: DaffOrderItemType.Simple\n      }\n    default:\n      return {}\n  }\n}\n\nfunction transformItem(item: MagentoOrderItem, order: MagentoOrder, qty: number): DaffOrderItem {\n  const discount = item.discounts.reduce((acc, d) => daffAdd(acc, d.amount.value), 0);\n  const rowTotal = qty * item.product_sale_price.value;\n  const rowTotalWithDiscount = qty * daffSubtract(item.product_sale_price.value, discount);\n\n  return {\n    type: DaffOrderItemType.Simple,\n    item_id: null,\n    qty_ordered: item.quantity_ordered,\n    qty_canceled: item.quantity_canceled,\n    qty_fulfilled: item.quantity_shipped,\n    qty,\n    image: {\n      url: item.product_url_key,\n      id: null,\n      label: null\n    },\n    order_id: order.id,\n    created_at: null,\n    updated_at: null,\n    product_id: null,\n    parent_item_id: null,\n    sku: item.product_sku,\n    name: item.product_name,\n    weight: null,\n    price: item.product_sale_price.value,\n    discount_percent: Math.floor(discount / item.product_sale_price.value * 100),\n    discount_amount: discount,\n    tax_percent: null,\n    tax_amount: null,\n    row_total: rowTotal,\n    row_total_with_discount: rowTotalWithDiscount,\n    row_weight: null,\n    tax_before_discount: null,\n    ...transformAdditionalItemFields(item)\n  }\n}\n\nfunction transformAddress(address: MagentoOrderAddress, order: MagentoOrder): DaffOrderAddress {\n  return {\n    order_id: order.id,\n    prefix: address.prefix,\n    suffix: address.suffix,\n    firstname: address.firstname,\n    middlename: address.middlename,\n    lastname: address.lastname,\n    telephone: address.telephone,\n    email: null,\n    street: address.street[0],\n    street2: address.street[1],\n    city: address.city,\n    region: address.region_id,\n    country: address.country_code,\n    postcode: address.postcode\n  }\n}\n\nfunction transformShipmentItem(shipmentItem: MagentoOrderShipmentItem, order: MagentoOrder): DaffOrderShipmentItem {\n  return {\n    item: transformItem(shipmentItem.order_item, order, shipmentItem.quantity_shipped),\n    qty: shipmentItem.quantity_shipped\n  }\n}\n\nfunction transformShipmentTracking(tracking: MagentoOrderShipmentTracking): DaffOrderShipmentTracking {\n  return {\n    tracking_number: tracking.number,\n    tracking_url: null,\n    carrier: tracking.carrier,\n    title: tracking.title,\n    carrier_logo: null,\n  }\n}\n\nfunction transformShipment(shipment: MagentoOrderShipment, order: MagentoOrder): DaffOrderShipment {\n  return {\n    carrier: order.carrier,\n    carrier_title: null,\n    code: null,\n    method: order.shipping_method,\n    method_description: null,\n    tracking: shipment.tracking.map(transformShipmentTracking),\n    items: shipment.items.map(item => transformShipmentItem(item, order))\n  }\n}\n\nfunction transformPayment(payment: MagentoOrderPayment, order: MagentoOrder): DaffOrderPayment {\n  const findAdditionalData = key => {\n    const index = payment.additional_data.findIndex(({name}) => name === key);\n\n    return index > -1 ? payment.additional_data[index].value : null\n  }\n  return {\n    payment_id: null,\n    order_id: order.id,\n    created_at: null,\n    updated_at: null,\n    method: payment.type,\n    cc_type: findAdditionalData('cc_type'),\n    cc_last4: findAdditionalData('cc_last4'),\n    cc_owner: findAdditionalData('cc_owner'),\n    cc_exp_month: findAdditionalData('cc_exp_month'),\n    cc_exp_year: findAdditionalData('cc_exp_year')\n  }\n}\n\nfunction transformInvoiceItem(invoiceItem: MagentoOrderInvoiceItem, order: MagentoOrder): DaffOrderShipmentItem {\n  return {\n    item: transformItem(invoiceItem.order_item, order, invoiceItem.quantity_invoiced),\n    qty: invoiceItem.quantity_invoiced\n  }\n}\n\nfunction transformInvoice(invoice: MagentoOrderInvoice, order: MagentoOrder, payment: MagentoOrderPayment): DaffOrderInvoice {\n  return {\n    totals: transformTotals(invoice.total),\n    billing_address: transformAddress(order.billing_address, order),\n    shipping_address: transformAddress(order.shipping_address, order),\n    payment: transformPayment(payment, order),\n    items: invoice.items.map(item => transformInvoiceItem(item, order)),\n    shipping_method: null\n  }\n}\n\nfunction transformCreditItem(creditItem: MagentoOrderCreditItem, order: MagentoOrder): DaffOrderShipmentItem {\n  return {\n    item: transformItem(creditItem.order_item, order, creditItem.quantity_refunded),\n    qty: creditItem.quantity_refunded\n  }\n}\n\nfunction transformCredit(credit: MagentoOrderCredit, order: MagentoOrder): DaffOrderInvoice {\n  return {\n    totals: transformTotals(credit.total),\n    billing_address: transformAddress(order.billing_address, order),\n    shipping_address: transformAddress(order.shipping_address, order),\n    payment: transformPayment(order.payment_methods[0], order),\n    items: credit.items.map(item => transformCreditItem(item, order)),\n    shipping_method: null\n  }\n}\n\n/**\n * Transforms the MagentoOrder from the magento order query into a DaffOrder.\n */\nexport function daffMagentoTransformOrder(order: MagentoOrder): DaffOrder {\n  return {\n    extra_attributes: order,\n\n    id: order.number,\n    customer_id: null,\n    updated_at: null,\n    created_at: order.order_date,\n    status: order.status,\n\n    totals: transformTotals(order.total),\n    applied_codes: order.total.discounts.map(transformCouponDiscount),\n    items: order.items.map(item => transformItem(item, order, item.quantity_ordered)),\n    billing_addresses: [\n      transformAddress(order.billing_address, order)\n    ],\n    shipping_addresses: [\n      transformAddress(order.shipping_address, order)\n    ],\n    shipments: order.shipments.map(shipment => transformShipment(shipment, order)),\n    payment: transformPayment(order.payment_methods[0], order),\n    // TODO: find out if the index is the correct payment for invoice\n    invoices: order.invoices.map((invoice, index) => transformInvoice(invoice, order, order.payment_methods[index])),\n    credits: order.credit_memos.map(credit => transformCredit(credit, order)),\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const orderBundleItemSelectedOptionFragment = gql`\n  fragment orderBundleItemSelectedOption on ItemSelectedBundleOption {\n    __typename\n    id\n    label\n    values {\n      __typename\n      id\n      product_name\n    }\n  }\n`;\n\nexport const orderItemFragment = gql`\n  fragment orderItem on OrderItemInterface {\n    __typename\n    id\n    quantity_ordered\n    quantity_canceled\n    quantity_shipped\n    quantity_invoiced\n    product_url_key\n    product_sku\n    product_name\n    product_type\n    product_sale_price {\n      value\n    }\n    discounts {\n      amount {\n        value\n      }\n    }\n    selected_options {\n      label\n      value\n    }\n    ... on BundleOrderItem {\n      bundle_options {\n        ...orderBundleItemSelectedOption\n      }\n    }\n  }\n  ${orderBundleItemSelectedOptionFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderAddressFragment = gql`\n  fragment orderAddress on OrderAddress {\n    __typename\n    city\n    company\n    country_code\n    fax\n    firstname\n    middlename\n    lastname\n    postcode\n    prefix\n    region\n    region_id\n    street\n    suffix\n    telephone\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderItemFragment } from './order-item';\n\nexport const orderShipmentItemFragment = gql`\n  fragment orderShipmentItem on ShipmentItemInterface {\n    __typename\n    id\n    quantity_shipped\n    order_item {\n      ...orderItem\n    }\n  }\n  ${orderItemFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderShipmentTrackingFragment = gql`\n  fragment orderShipmentTracking on ShipmentTracking {\n    __typename\n    number\n    carrier\n    title\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderShipmentItemFragment } from './order-shipment-item';\nimport { orderShipmentTrackingFragment } from './order-shipment-tracking';\n\nexport const orderShipmentFragment = gql`\n  fragment orderShipment on OrderShipment {\n    __typename\n    id\n    tracking {\n      ...orderShipmentTracking\n    }\n    items {\n      ...orderShipmentItem\n    }\n  }\n  ${orderShipmentItemFragment}\n  ${orderShipmentTrackingFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderPaymentFragment = gql`\n  fragment orderPayment on OrderPaymentMethod {\n    __typename\n    name\n    type\n    additional_data {\n      name\n      value\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderItemFragment } from './order-item';\n\nexport const orderInvoiceItemFragment = gql`\n  fragment orderInvoiceItem on InvoiceItemInterface {\n    __typename\n    id\n    quantity_invoiced\n    order_item {\n      ...orderItem\n    }\n  }\n  ${orderItemFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderInvoiceTotalFragment = gql`\n  fragment orderInvoiceTotal on InvoiceTotal {\n    __typename\n    discounts {\n      amount {\n        value\n      }\n      label\n    }\n    grand_total {\n      value\n    }\n    subtotal {\n      value\n    }\n    total_tax {\n      value\n    }\n    total_shipping {\n      value\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderInvoiceItemFragment } from './order-invoice-item';\nimport { orderInvoiceTotalFragment } from './order-invoice-total';\n\nexport const orderInvoiceFragment = gql`\n  fragment orderInvoice on Invoice {\n    __typename\n    id\n    items {\n      ...orderInvoiceItem\n    }\n    total {\n      ...orderInvoiceTotal\n    }\n  }\n  ${orderInvoiceItemFragment}\n  ${orderInvoiceTotalFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { orderItemFragment } from './order-item';\n\nexport const orderCreditItemFragment = gql`\n  fragment orderCreditItem on CreditMemoItemInterface {\n    __typename\n    id\n    quantity_refunded\n    order_item {\n      ...orderItem\n    }\n  }\n  ${orderItemFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderCreditTotalFragment = gql`\n  fragment orderCreditTotal on CreditMemoTotal {\n    __typename\n    discounts {\n      amount {\n        value\n      }\n      label\n    }\n    grand_total {\n      value\n    }\n    subtotal {\n      value\n    }\n    total_tax {\n      value\n    }\n    total_shipping {\n      value\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderCreditItemFragment } from './order-credit-item';\nimport { orderCreditTotalFragment } from './order-credit-total';\n\nexport const orderCreditFragment = gql`\n  fragment orderCredit on CreditMemo {\n    __typename\n    id\n    items {\n      ...orderCreditItem\n    }\n    total {\n      ...orderCreditTotal\n    }\n  }\n  ${orderCreditItemFragment}\n  ${orderCreditTotalFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderTotalFragment = gql`\n  fragment orderTotal on OrderTotal {\n    __typename\n    discounts {\n      amount {\n        value\n      }\n      label\n    }\n    grand_total {\n      value\n    }\n    subtotal {\n      value\n    }\n    total_tax {\n      value\n    }\n    total_shipping {\n      value\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderItemFragment } from './order-item';\nimport { orderAddressFragment } from './order-address';\nimport { orderShipmentFragment } from './order-shipment';\nimport { orderPaymentFragment } from './order-payment';\nimport { orderInvoiceFragment } from './order-invoice';\nimport { orderCreditFragment } from './order-credit';\nimport { orderTotalFragment } from './order-total';\n\nexport const orderFragment = gql`\n  fragment order on GraycoreGuestOrder {\n    __typename\n    id\n    order_date\n    status\n    carrier\n    number\n    shipping_method\n    items {\n      ...orderItem\n    }\n    billing_address {\n      ...orderAddress\n    }\n    shipping_address {\n      ...orderAddress\n    }\n    shipments {\n      ...orderShipment\n    }\n    payment_methods {\n      ...orderPayment\n    }\n    invoices {\n      ...orderInvoice\n    }\n    credit_memos {\n      ...orderCredit\n    }\n    total {\n      ...orderTotal\n    }\n  }\n  ${orderItemFragment}\n  ${orderShipmentFragment}\n  ${orderPaymentFragment}\n  ${orderInvoiceFragment}\n  ${orderCreditFragment}\n  ${orderAddressFragment}\n  ${orderTotalFragment}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { orderFragment } from './fragments/public_api';\n\nexport const getGuestOrders = (extraOrderFragments: DocumentNode[] = []) => gql`\n  query GetGuestOrders($cartId: String!) {\n    graycoreGuestOrders(cartId: $cartId) {\n      items {\n        ...order\n        ${daffBuildFragmentNameSpread(...extraOrderFragments)}\n      }\n    }\n  }\n  ${orderFragment}\n  ${daffBuildFragmentDefinition(...extraOrderFragments)}\n`;\n","import { InjectionToken } from '@angular/core';\nimport { DocumentNode } from 'graphql';\n\n/**\n * An multi-provider injection token for providing extra GraphQL fragments that will be spread into order queries.\n * This can be used to retrieve additional data that is not covered by the standard Daffodil interfaces.\n * The data will appear in DaffOrder#extra_attributes.\n *\n * Fragment structure is platform-specific and this feature should be used with care.\n */\nexport const DaffMagentoExtraOrderFragments = new InjectionToken<DocumentNode[]>('DaffMagentoExtraOrderFragments', {factory: () => []});\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { DaffOrderInvalidAPIResponseError } from '@daffodil/order/driver';\n\nimport { MagentoGetGuestOrdersResponse } from '../queries/public_api';\n\nexport const validateGetOrdersResponse = (response: ApolloQueryResult<MagentoGetGuestOrdersResponse>) => {\n  if (response.data.graycoreGuestOrders.items) {\n    if (response.data.graycoreGuestOrders.items.reduce((acc, order) => acc && !!(\n      order.billing_address\n        && order.shipping_address\n        && order.payment_methods\n    ), true)) {\n      return response\n    } else {\n      throw new DaffOrderInvalidAPIResponseError('One of the orders does not contain required fields.')\n    }\n  } else {\n    throw new DaffOrderInvalidAPIResponseError('Get orders response does not contain a valid list of orders.')\n  }\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffCartNotFoundError } from '@daffodil/cart/driver';\n\nimport { MagentoOrderGraphQlErrorCode } from './codes';\n\nexport const DaffOrderMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoOrderGraphQlErrorCode.CART_NOT_FOUND]: DaffCartNotFoundError,\n};\n","export enum MagentoOrderGraphQlErrorCode {\n\tCART_NOT_FOUND = 'graphql-no-such-entity',\n}\n","import { DocumentNode } from 'graphql';\nimport { Inject, Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffCart } from '@daffodil/cart';\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n  DaffOrderNotFoundError\n} from '@daffodil/order/driver';\n\nimport { getGuestOrders, MagentoGetGuestOrdersResponse } from './queries/public_api';\nimport { validateGetOrdersResponse } from './validators/public_api';\nimport { transformMagentoOrderError } from './errors/transform';\nimport { daffMagentoTransformOrder } from './transforms/responses/order';\nimport { DaffMagentoExtraOrderFragments } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for orders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderMagentoService implements DaffOrderServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DaffMagentoExtraOrderFragments) public extraOrderFragments: DocumentNode[],\n  ) {}\n\n  list(cartId?: DaffCart['id']): Observable<DaffOrder[]> {\n    return this.apollo.query<MagentoGetGuestOrdersResponse>({\n      query: getGuestOrders(this.extraOrderFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(validateGetOrdersResponse),\n      map(result => result.data.graycoreGuestOrders.items.map(daffMagentoTransformOrder)),\n      catchError(err => throwError(transformMagentoOrderError(err)))\n    );\n  }\n\n  get(orderId: DaffOrder['id'], cartId?: DaffCart['id']): Observable<DaffOrder> {\n    return this.list(cartId).pipe(\n      map(orders => {\n        for (const order of orders) {\n          if (String(order.id) === String(orderId)) {\n            return order\n          }\n        }\n\n        // order not found\n        throw new DaffOrderNotFoundError(`Could not find an order with ID ${orderId}`);\n      }),\n    );\n  }\n}\n","import { daffTransformMagentoError } from '@daffodil/driver/magento';\n\nimport { DaffOrderMagentoErrorMap } from './map';\n\nexport function transformMagentoOrderError(error: any) {\n  return daffTransformMagentoError(error, DaffOrderMagentoErrorMap)\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffOrderDriver } from '@daffodil/order/driver';\n\nimport { DaffOrderMagentoService } from './order.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffOrderMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffOrderMagentoDriverModule> {\n    return {\n      ngModule: DaffOrderMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffOrderDriver,\n          useExisting: DaffOrderMagentoService\n        },\n      ]\n    };\n  }\n}\n"]}