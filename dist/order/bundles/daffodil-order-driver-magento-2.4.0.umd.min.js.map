{"version":3,"sources":["ng://@daffodil/order/driver/magento/2.4.0/transforms/responses/order.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-item.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-address.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-shipment-item.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-shipment-tracking.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-shipment.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-payment.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order-invoice.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/fragments/order.ts","ng://@daffodil/order/driver/magento/2.4.0/queries/get-guest-orders.ts","ng://@daffodil/order/driver/magento/2.4.0/injection-tokens/fragments/order.ts","ng://@daffodil/order/driver/magento/2.4.0/validators/get-orders.ts","ng://@daffodil/order/driver/magento/2.4.0/errors/map.ts","ng://@daffodil/order/driver/magento/2.4.0/errors/codes.ts","ng://@daffodil/order/driver/magento/2.4.0/order.service.ts","ng://@daffodil/order/driver/magento/2.4.0/errors/transform.ts","ng://@daffodil/order/driver/magento/2.4.0/order-driver.module.ts"],"names":["transformTotals","totals","label","type","DaffOrderTotalTypeEnum","GrandTotal","value","grand_total","sort_order","Subtotal","subtotal","Shipping","shipping","Tax","tax","Discount","discount","transformItem","item","item_id","DaffOrderItemType","Simple","qty_ordered","qty_canceled","qty_fulfilled","qty","image","url","id","order_id","Number","created_at","updated_at","product_id","parent_item_id","sku","name","weight","price","discount_percent","discount_amount","tax_percent","tax_amount","row_total","row_total_with_discount","row_weight","tax_before_discount","transformAddress","address","prefix","suffix","firstname","middlename","lastname","telephone","email","street","street2","city","region","region_id","country","country_code","postcode","transformShipmentItem","shipmentItem","transformShipmentTracking","tracking","tracking_number","tracking_url","carrier","title","carrier_logo","transformShipment","shipment","carrier_title","code","method","method_description","map","items","transformPayment","payment","payment_id","cc_type","cc_last4","cc_owner","cc_exp_month","cc_exp_year","transformInvoice","invoice","billing_address","shipping_address","shipping_method","daffMagentoTransformOrder","order","extra_attributes","order_number","customer_id","status","applied_codes","billing_addresses","shipping_addresses","shipments","invoices","credits","orderItemFragment","gql","templateObject_1","__makeTemplateObject","orderAddressFragment","templateObject_1$1","__makeTemplateObject$1","orderShipmentItemFragment","templateObject_1$2","__makeTemplateObject$2","orderShipmentTrackingFragment","templateObject_1$3","__makeTemplateObject$3","orderShipmentFragment","templateObject_1$4","__makeTemplateObject$4","orderPaymentFragment","templateObject_1$5","__makeTemplateObject$5","orderInvoiceFragment","templateObject_1$6","__makeTemplateObject$6","orderFragment","templateObject_1$7","__makeTemplateObject$7","getGuestOrders","extraOrderFragments","templateObject_1$8","__makeTemplateObject$8","daffBuildFragmentNameSpread","apply","__spread","daffBuildFragmentDefinition","DaffMagentoExtraOrderFragments","InjectionToken","factory","validateGetOrdersResponse","response","data","graycoreGuestOrders","orders","reduce","acc","DaffOrderInvalidAPIResponseError","DaffOrderMagentoErrorMap","_a","DaffCartNotFoundError","DaffOrderMagentoService","apollo","this","prototype","list","cartId","query","variables","pipe","result","catchError","err","throwError","error","daffTransformMagentoError","get","orderId","orders_1","__values","orders_1_1","next","done","String","DaffOrderNotFoundError","Injectable","args","providedIn","Apollo","Inject","DaffOrderMagentoDriverModule","forRoot","ngModule","providers","provide","DaffOrderDriver","useExisting","NgModule","imports","CommonModule"],"mappings":"mwCAyBA,SAASA,EAAgBC,GAOvB,MAAO,CACL,CACEC,MAAO,cACPC,KAAMC,EAAAA,uBAAuBC,WAC7BC,MAAOL,EAAOM,YACdC,WAAY,GAEd,CACEN,MAAO,WACPC,KAAMC,EAAAA,uBAAuBK,SAC7BH,MAAOL,EAAOS,SACdF,WAAY,GAEd,CACEN,MAAO,WACPC,KAAMC,EAAAA,uBAAuBO,SAC7BL,MAAOL,EAAOW,SACdJ,WAAY,GAEd,CACEN,MAAO,MACPC,KAAMC,EAAAA,uBAAuBS,IAC7BP,MAAOL,EAAOa,IACdN,WAAY,GAEd,CACEN,MAAO,WACPC,KAAMC,EAAAA,uBAAuBW,SAC7BT,MAAOL,EAAOe,SACdR,WAAY,IAKlB,SAASS,EAAcC,GACrB,MAAO,CACLC,QAAS,KACThB,KAAMiB,EAAAA,kBAAkBC,OACxBC,YAAaJ,EAAKI,YAClBC,aAAcL,EAAKK,aACnBC,cAAeN,EAAKM,cACpBC,IAAKP,EAAKO,IACVC,MAAO,CACLC,IAAKT,EAAKQ,MACVE,GAAI,KACJ1B,MAAO,MAET2B,SAAUC,OAAOZ,EAAKW,UACtBE,WAAYb,EAAKa,WACjBC,WAAYd,EAAKc,WACjBC,WAAYf,EAAKe,WACjBC,eAAgB,KAChBC,IAAKjB,EAAKiB,IACVC,KAAMlB,EAAKkB,KACXC,OAAQnB,EAAKmB,OACbC,MAAOpB,EAAKoB,MACZC,iBAAkBrB,EAAKqB,iBACvBC,gBAAiBtB,EAAKsB,gBACtBC,YAAavB,EAAKuB,YAClBC,WAAYxB,EAAKwB,WACjBC,UAAWzB,EAAKyB,UAChBC,wBAAyB1B,EAAK0B,wBAC9BC,WAAY3B,EAAK2B,WACjBC,oBAAqB5B,EAAK4B,qBAI9B,SAASC,EAAiBC,GACxB,MAAO,CACLnB,SAAUmB,EAAQnB,SAClBoB,OAAQD,EAAQC,OAChBC,OAAQF,EAAQE,OAChBC,UAAWH,EAAQG,UACnBC,WAAYJ,EAAQI,WACpBC,SAAUL,EAAQK,SAClBC,UAAWN,EAAQM,UACnBC,MAAOP,EAAQO,MACfC,OAAQR,EAAQQ,OAAO,GACvBC,QAAST,EAAQQ,OAAO,GACxBE,KAAMV,EAAQU,KACdC,OAAQX,EAAQY,UAChBC,QAASb,EAAQc,aACjBC,SAAUf,EAAQe,UAItB,SAASC,EAAsBC,GAC7B,MAAO,CACL/C,KAAMD,EAAcgD,EAAa/C,MACjCO,IAAKwC,EAAaxC,KAItB,SAASyC,EAA0BC,GACjC,MAAO,CACLC,gBAAiBD,EAASC,gBAC1BC,aAAc,KACdC,QAASH,EAASG,QAClBC,MAAOJ,EAASI,MAChBC,aAAc,MAIlB,SAASC,EAAkBC,GACzB,MAAO,CACLJ,QAAS,KACTK,cAAe,KACfC,KAAM,KACNC,OAAQ,KACRC,mBAAoB,KACpBX,SAAUO,EAASP,SAASY,IAAIb,GAChCc,MAAON,EAASM,MAAMD,IAAIf,IAI9B,SAASiB,EAAiBC,GACxB,MAAO,CACLC,WAAYD,EAAQC,WACpBtD,SAAUqD,EAAQrD,SAClBE,WAAY,KACZC,WAAY,KACZ6C,OAAQK,EAAQL,OAChBO,QAASF,EAAQE,QACjBC,SAAUH,EAAQG,SAClBC,SAAUJ,EAAQI,SAClBC,aAAcL,EAAQK,aACtBC,YAAaN,EAAQM,aAIzB,SAASC,EAAiBC,GACxB,MAAO,CACLzF,OAAQD,EAAgB0F,GACxBC,gBAAiB5C,EAAiB2C,EAAQC,iBAC1CC,iBAAkB7C,EAAiB2C,EAAQE,kBAC3CV,QAASD,EAAiBS,EAAQR,SAClCF,MAAOU,EAAQV,MAAMD,IAAIf,GACzB6B,gBAAiB,MAOrB,SAAgBC,EAA0BC,GACxC,MAAO,CACLC,iBAAkBD,EAElBnE,GAAImE,EAAME,aACVC,YAAaH,EAAMG,YACnBnE,WAAYgE,EAAMhE,WAClBC,WAAY+D,EAAM/D,WAClBmE,OAAQJ,EAAMI,OAEdlG,OAAQD,EAAgB+F,GACxBK,cAAeL,EAAMK,cAAcrB,IAAG,SAACH,GAAQ,MAAA,CAAEA,KAAIA,KACrDI,MAAOe,EAAMf,MAAMD,IAAI9D,GACvBoF,kBAAmB,CACjBtD,EAAiBgD,EAAMJ,kBAEzBW,mBAAoB,CAClBvD,EAAiBgD,EAAMH,mBAEzBW,UAAWR,EAAMQ,UAAUxB,IAAIN,GAC/BS,QAASD,EAAiBc,EAAMb,SAChCsB,SAAUT,EAAMS,SAASzB,IAAIU,GAC7BgB,QAASV,EAAMU,QAAQ1B,IAAIU,2MCpMlBiB,EAAoBC,EAAGC,IAAAA,EAAAC,EAAA,CAAA,2YAAA,CAAA,ghBCAvBC,EAAuBH,EAAGI,IAAAA,EAAAC,EAAA,CAAA,4PAAA,CAAA,iYCE1BC,EAA4BN,EAAGO,IAAAA,EAAAC,EAAA,CAAA,yHAAA,MAAA,CAAA,yHAOvB,QAAjBT,qICTSU,EAAgCT,EAAGU,IAAAA,EAAAC,EAAA,CAAA,6HAAA,CAAA,kQCGnCC,EAAwBZ,EAAGa,IAAAA,EAAAC,EAAA,CAAA,wKAAA,OAAA,MAAA,CAAA,wKASX,OACI,QAD7BR,EACAG,qICbSM,EAAuBf,EAAGgB,IAAAA,EAAAC,EAAA,CAAA,oLAAA,CAAA,yTCI1BC,EAAuBlB,EAAGmB,IAAAA,EAAAC,EAAA,CAAA,2UAAA,OAAA,OAAA,MAAA,CAAA,2UAoBV,OACL,OACA,QAFpBd,EACAH,EACAY,qICrBSM,EAAgBrB,EAAGsB,IAAAA,EAAAC,EAAA,CAAA,0iBAAA,OAAA,OAAA,OAAA,OAAA,MAAA,CAAA,0iBAoCX,OACI,OACD,OACA,OACA,QAJpBxB,EACAa,EACAG,EACAG,EACAf,kiBCxCSqB,EAAc,SAAIC,GAA6C,YAA7C,IAAAA,IAAAA,EAAA,IAA6CzB,EAAG0B,IAAAA,EAAAC,EAAA,CAAA,uIAAA,4BAAA,OAAA,MAAA,CAAA,uIAKlB,4BAI5C,OACsC,QAL7CC,EAAAA,4BAA2BC,WAAA,EAAAC,EAAIL,IAIrCJ,EACAU,EAAAA,4BAA2BF,WAAA,EAAAC,EAAIL,MCPtBO,EAAiC,IAAIC,EAAAA,eAA+B,iCAAkC,CAACC,QAAO,WAAQ,MAAA,MCJtHC,EAAyB,SAAIC,GACxC,GAAIA,EAASC,KAAKC,oBAAoBC,OAAQ,CAC5C,GAAIH,EAASC,KAAKC,oBAAoBC,OAAOC,OAAM,SAAEC,EAAKrD,GAAU,OAAAqD,MAClErD,EAAMJ,iBACDI,EAAMH,kBACNG,EAAMb,WACV,GACD,OAAO6D,EAEP,MAAM,IAAIM,EAAAA,iCAAiC,uDAG7C,MAAM,IAAIA,EAAAA,iCAAiC,iECblCC,IAAwBC,EAAA,ICJnB,0BDK8BC,EAAAA,4NEmBhDC,GAAA,WAIE,SAAAA,EACUC,EACuCtB,GADvCuB,KAAAD,OAAAA,EACuCC,KAAAvB,oBAAAA,SAGjDqB,EAAAG,UAAAC,KAAA,SAAKC,GACH,OAAOH,KAAKD,OAAOK,MAAqC,CACtDA,MAAO5B,EAAewB,KAAKvB,qBAC3B4B,UAAW,CACTF,OAAMA,KAEPG,KACDlF,EAAAA,IAAI+D,GACJ/D,EAAAA,IAAG,SAACmF,GAAU,OAAAA,EAAOlB,KAAKC,oBAAoBC,OAAOnE,IAAIe,KACzDqE,EAAAA,WAAU,SAACC,GAAO,OAAAC,EAAAA,YCvCmBC,EDuCmBF,ECtCrDG,EAAAA,0BAA0BD,EAAOhB,KAD1C,IAA2CgB,MD2CzCb,EAAAG,UAAAY,IAAA,SAAIC,EAA0BX,GAC5B,OAAOH,KAAKE,KAAKC,GAAQG,KACvBlF,EAAAA,IAAG,SAACmE,eACF,IAAoB,IAAAwB,EAAAC,GAAAzB,GAAM0B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAAvB,IAAM9E,EAAK6E,EAAAtK,MACd,GAAIyK,OAAOhF,EAAMnE,MAAQmJ,OAAON,GAC9B,OAAO1E,oGAKX,MAAM,IAAIiF,EAAAA,uBAAuB,mCAAmCP,2BAhC3EQ,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAxBLC,EAAAA,sCA6BJC,EAAAA,OAAMH,KAAA,CAACvC,mJANZ,GEzBA,IAAA2C,GAAA,WAOA,SAAAA,KAiBA,OAXSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,gBACTC,YAAanC,2BAZtBoC,EAAAA,SAAQX,KAAA,CAAC,CACRY,QAAS,CACPC,EAAAA,kBAeJT,EAxBA","sourcesContent":["import {\n  DaffOrder,\n  DaffOrderTotal,\n  DaffOrderItem,\n  DaffOrderAddress,\n  DaffOrderShipment,\n  DaffOrderShipmentItem,\n  DaffOrderShipmentTracking,\n  DaffOrderPayment,\n  DaffOrderInvoice,\n  DaffOrderTotalTypeEnum,\n  DaffOrderItemType\n} from '@daffodil/order';\n\nimport {\n  MagentoGraycoreOrder,\n  MagentoGraycoreOrderItem,\n  MagentoGraycoreOrderShipment,\n  MagentoGraycoreOrderAddress,\n  MagentoGraycoreOrderShipmentItem,\n  MagentoGraycoreOrderShipmentTracking,\n  MagentoGraycoreOrderPayment,\n  MagentoGraycoreOrderInvoice\n} from '../../models/responses/public_api';\n\nfunction transformTotals(totals: {\n  grand_total: number,\n  subtotal: number,\n  shipping: number,\n  discount: number,\n  tax: number,\n}): DaffOrderTotal[] {\n  return [\n    {\n      label: 'Grand Total',\n      type: DaffOrderTotalTypeEnum.GrandTotal,\n      value: totals.grand_total,\n      sort_order: 1\n    },\n    {\n      label: 'Subtotal',\n      type: DaffOrderTotalTypeEnum.Subtotal,\n      value: totals.subtotal,\n      sort_order: 0\n    },\n    {\n      label: 'Shipping',\n      type: DaffOrderTotalTypeEnum.Shipping,\n      value: totals.shipping,\n      sort_order: 2\n    },\n    {\n      label: 'Tax',\n      type: DaffOrderTotalTypeEnum.Tax,\n      value: totals.tax,\n      sort_order: 3\n    },\n    {\n      label: 'Discount',\n      type: DaffOrderTotalTypeEnum.Discount,\n      value: totals.discount,\n      sort_order: 4\n    }\n  ]\n}\n\nfunction transformItem(item: MagentoGraycoreOrderItem): DaffOrderItem {\n  return {\n    item_id: null,\n    type: DaffOrderItemType.Simple,\n    qty_ordered: item.qty_ordered,\n    qty_canceled: item.qty_canceled,\n    qty_fulfilled: item.qty_fulfilled,\n    qty: item.qty,\n    image: {\n      url: item.image,\n      id: null,\n      label: null\n    },\n    order_id: Number(item.order_id),\n    created_at: item.created_at,\n    updated_at: item.updated_at,\n    product_id: item.product_id,\n    parent_item_id: null,\n    sku: item.sku,\n    name: item.name,\n    weight: item.weight,\n    price: item.price,\n    discount_percent: item.discount_percent,\n    discount_amount: item.discount_amount,\n    tax_percent: item.tax_percent,\n    tax_amount: item.tax_amount,\n    row_total: item.row_total,\n    row_total_with_discount: item.row_total_with_discount,\n    row_weight: item.row_weight,\n    tax_before_discount: item.tax_before_discount\n  }\n}\n\nfunction transformAddress(address: MagentoGraycoreOrderAddress): DaffOrderAddress {\n  return {\n    order_id: address.order_id,\n    prefix: address.prefix,\n    suffix: address.suffix,\n    firstname: address.firstname,\n    middlename: address.middlename,\n    lastname: address.lastname,\n    telephone: address.telephone,\n    email: address.email,\n    street: address.street[0],\n    street2: address.street[1],\n    city: address.city,\n    region: address.region_id,\n    country: address.country_code,\n    postcode: address.postcode\n  }\n}\n\nfunction transformShipmentItem(shipmentItem: MagentoGraycoreOrderShipmentItem): DaffOrderShipmentItem {\n  return {\n    item: transformItem(shipmentItem.item),\n    qty: shipmentItem.qty\n  }\n}\n\nfunction transformShipmentTracking(tracking: MagentoGraycoreOrderShipmentTracking): DaffOrderShipmentTracking {\n  return {\n    tracking_number: tracking.tracking_number,\n    tracking_url: null,\n    carrier: tracking.carrier,\n    title: tracking.title,\n    carrier_logo: null,\n  }\n}\n\nfunction transformShipment(shipment: MagentoGraycoreOrderShipment): DaffOrderShipment {\n  return {\n    carrier: null,\n    carrier_title: null,\n    code: null,\n    method: null,\n    method_description: null,\n    tracking: shipment.tracking.map(transformShipmentTracking),\n    items: shipment.items.map(transformShipmentItem)\n  }\n}\n\nfunction transformPayment(payment: MagentoGraycoreOrderPayment): DaffOrderPayment {\n  return {\n    payment_id: payment.payment_id,\n    order_id: payment.order_id,\n    created_at: null,\n    updated_at: null,\n    method: payment.method,\n    cc_type: payment.cc_type,\n    cc_last4: payment.cc_last4,\n    cc_owner: payment.cc_owner,\n    cc_exp_month: payment.cc_exp_month,\n    cc_exp_year: payment.cc_exp_year\n  }\n}\n\nfunction transformInvoice(invoice: MagentoGraycoreOrderInvoice): DaffOrderInvoice {\n  return {\n    totals: transformTotals(invoice),\n    billing_address: transformAddress(invoice.billing_address),\n    shipping_address: transformAddress(invoice.shipping_address),\n    payment: transformPayment(invoice.payment),\n    items: invoice.items.map(transformShipmentItem),\n    shipping_method: null\n  }\n}\n\n/**\n * Transforms the MagentoGraycoreOrder from the magento order query into a DaffOrder.\n */\nexport function daffMagentoTransformOrder(order: MagentoGraycoreOrder): DaffOrder {\n  return {\n    extra_attributes: order,\n\n    id: order.order_number,\n    customer_id: order.customer_id,\n    created_at: order.created_at,\n    updated_at: order.updated_at,\n    status: order.status,\n\n    totals: transformTotals(order),\n    applied_codes: order.applied_codes.map(code => ({code})),\n    items: order.items.map(transformItem),\n    billing_addresses: [\n      transformAddress(order.billing_address)\n    ],\n    shipping_addresses: [\n      transformAddress(order.shipping_address)\n    ],\n    shipments: order.shipments.map(transformShipment),\n    payment: transformPayment(order.payment),\n    invoices: order.invoices.map(transformInvoice),\n    credits: order.credits.map(transformInvoice),\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const orderItemFragment = gql`\n  fragment orderItem on GraycoreOrderItem {\n    qty_ordered\n    image\n    qty_canceled\n    qty_fulfilled\n    order_id\n    created_at\n    updated_at\n    product_id\n    sku\n    name\n    weight\n    qty\n    price\n    discount_percent\n    discount_amount\n    tax_percent\n    tax_amount\n    row_total\n    row_total_with_discount\n    row_weight\n    tax_before_discount\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const orderAddressFragment = gql`\n  fragment orderAddress on GraycoreOrderAddress {\n    order_id\n    prefix\n    suffix\n    firstname\n    middlename\n    lastname\n    telephone\n    email\n    street\n    city\n    region\n    region_id\n    country_code\n    postcode\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderItemFragment } from './order-item';\n\nexport const orderShipmentItemFragment = gql`\n  fragment orderShipmentItem on GraycoreOrderShipmentItem {\n    qty\n    item {\n      ...orderItem\n    }\n  }\n  ${orderItemFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderShipmentTrackingFragment = gql`\n  fragment orderShipmentTracking on GraycoreOrderShipmentTracking {\n    tracking_number\n    carrier\n    title\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderShipmentItemFragment } from './order-shipment-item';\nimport { orderShipmentTrackingFragment } from './order-shipment-tracking';\n\nexport const orderShipmentFragment = gql`\n  fragment orderShipment on GraycoreOrderShipment {\n    tracking {\n      ...orderShipmentTracking\n    }\n    items {\n      ...orderShipmentItem\n    }\n  }\n  ${orderShipmentItemFragment}\n  ${orderShipmentTrackingFragment}\n`;\n","import gql from 'graphql-tag';\n\nexport const orderPaymentFragment = gql`\n  fragment orderPayment on GraycoreOrderPayment {\n    payment_id\n    order_id\n    method\n    cc_type\n    cc_last4\n    cc_owner\n    cc_exp_month\n    cc_exp_year\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { orderShipmentItemFragment } from './order-shipment-item';\nimport { orderAddressFragment } from './order-address';\nimport { orderPaymentFragment } from './order-payment';\n\nexport const orderInvoiceFragment = gql`\n  fragment orderInvoice on GraycoreOrderInvoice {\n    items {\n      ...orderShipmentItem\n    }\n    grand_total\n    subtotal\n    shipping\n    discount\n    tax\n    billing_address {\n      ...orderAddress\n    }\n    shipping_address {\n      ...orderAddress\n\t\t}\n\t\tpayment {\n\t\t\t...orderPayment\n\t\t}\n  }\n  ${orderShipmentItemFragment}\n  ${orderAddressFragment}\n  ${orderPaymentFragment}\n`;\n","import gql from 'graphql-tag';\nimport { orderItemFragment } from './order-item';\nimport { orderAddressFragment } from './order-address';\nimport { orderShipmentFragment } from './order-shipment';\nimport { orderPaymentFragment } from './order-payment';\nimport { orderInvoiceFragment } from './order-invoice';\n\nexport const orderFragment = gql`\n  fragment order on GraycoreOrder {\n    id\n    order_number\n    customer_id\n    created_at\n    updated_at\n    grand_total\n    subtotal\n    shipping\n    discount\n    tax\n    status\n    applied_codes\n    items {\n      ...orderItem\n    }\n    billing_address {\n      ...orderAddress\n    }\n    shipping_address {\n      ...orderAddress\n    }\n    shipments {\n      ...orderShipment\n    }\n    payment {\n      ...orderPayment\n    }\n    invoices {\n      ...orderInvoice\n    }\n    credits {\n      ...orderInvoice\n    }\n  }\n  ${orderItemFragment}\n  ${orderShipmentFragment}\n  ${orderPaymentFragment}\n  ${orderInvoiceFragment}\n  ${orderAddressFragment}\n`;\n","import { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { daffBuildFragmentNameSpread, daffBuildFragmentDefinition } from '@daffodil/core/graphql';\n\nimport { orderFragment } from './fragments/public_api';\n\nexport const getGuestOrders = (extraOrderFragments: DocumentNode[] = []) => gql`\n  query GetGuestOrders($cartId: String!) {\n    graycoreGuestOrders(cartId: $cartId) {\n      orders {\n        ...order\n        ${daffBuildFragmentNameSpread(...extraOrderFragments)}\n      }\n    }\n  }\n  ${orderFragment}\n  ${daffBuildFragmentDefinition(...extraOrderFragments)}\n`;\n","import { InjectionToken } from '@angular/core';\nimport { DocumentNode } from 'graphql';\n\n/**\n * An multi-provider injection token for providing extra GraphQL fragments that will be spread into order queries.\n * This can be used to retrieve additional data that is not covered by the standard Daffodil interfaces.\n * The data will appear in DaffOrder#extra_attributes.\n *\n * Fragment structure is platform-specific and this feature should be used with care.\n */\nexport const DaffMagentoExtraOrderFragments = new InjectionToken<DocumentNode[]>('DaffMagentoExtraOrderFragments', {factory: () => []});\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { DaffOrderInvalidAPIResponseError } from '@daffodil/order/driver';\n\nimport { MagentoGetGuestOrdersResponse } from '../queries/public_api';\n\nexport const validateGetOrdersResponse = (response: ApolloQueryResult<MagentoGetGuestOrdersResponse>) => {\n  if (response.data.graycoreGuestOrders.orders) {\n    if (response.data.graycoreGuestOrders.orders.reduce((acc, order) => acc && !!(\n      order.billing_address\n        && order.shipping_address\n        && order.payment\n    ), true)) {\n      return response\n    } else {\n      throw new DaffOrderInvalidAPIResponseError('One of the orders does not contain required fields.')\n    }\n  } else {\n    throw new DaffOrderInvalidAPIResponseError('Get orders response does not contain a valid list of orders.')\n  }\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffCartNotFoundError } from '@daffodil/cart/driver';\n\nimport { MagentoOrderGraphQlErrorCode } from './codes';\n\nexport const DaffOrderMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoOrderGraphQlErrorCode.CART_NOT_FOUND]: DaffCartNotFoundError,\n};\n","export enum MagentoOrderGraphQlErrorCode {\n\tCART_NOT_FOUND = 'graphql-no-such-entity',\n}\n","import { DocumentNode } from 'graphql';\nimport { Inject, Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffCart } from '@daffodil/cart';\nimport {\n  DaffOrder,\n} from '@daffodil/order';\nimport {\n  DaffOrderServiceInterface,\n  DaffOrderNotFoundError\n} from '@daffodil/order/driver';\n\nimport { getGuestOrders, MagentoGetGuestOrdersResponse } from './queries/public_api';\nimport { validateGetOrdersResponse } from './validators/public_api';\nimport { transformMagentoOrderError } from './errors/transform';\nimport { daffMagentoTransformOrder } from './transforms/responses/order';\nimport { DaffMagentoExtraOrderFragments } from './injection-tokens/public_api';\n\n/**\n * A service for making Magento GraphQL queries for orders.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffOrderMagentoService implements DaffOrderServiceInterface {\n  constructor(\n    private apollo: Apollo,\n    @Inject(DaffMagentoExtraOrderFragments) public extraOrderFragments: DocumentNode[],\n  ) {}\n\n  list(cartId?: DaffCart['id']): Observable<DaffOrder[]> {\n    return this.apollo.query<MagentoGetGuestOrdersResponse>({\n      query: getGuestOrders(this.extraOrderFragments),\n      variables: {\n        cartId\n      }\n    }).pipe(\n      map(validateGetOrdersResponse),\n      map(result => result.data.graycoreGuestOrders.orders.map(daffMagentoTransformOrder)),\n      catchError(err => throwError(transformMagentoOrderError(err)))\n    );\n  }\n\n  get(orderId: DaffOrder['id'], cartId?: DaffCart['id']): Observable<DaffOrder> {\n    return this.list(cartId).pipe(\n      map(orders => {\n        for (const order of orders) {\n          if (String(order.id) === String(orderId)) {\n            return order\n          }\n        }\n\n        // order not found\n        throw new DaffOrderNotFoundError(`Could not find an order with ID ${orderId}`);\n      }),\n    );\n  }\n}\n","import { daffTransformMagentoError } from '@daffodil/driver/magento';\n\nimport { DaffOrderMagentoErrorMap } from './map';\n\nexport function transformMagentoOrderError(error: any) {\n  return daffTransformMagentoError(error, DaffOrderMagentoErrorMap)\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffOrderDriver } from '@daffodil/order/driver';\n\nimport { DaffOrderMagentoService } from './order.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffOrderMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffOrderMagentoDriverModule> {\n    return {\n      ngModule: DaffOrderMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffOrderDriver,\n          useExisting: DaffOrderMagentoService\n        },\n      ]\n    };\n  }\n}\n"]}