{"version":3,"file":"daffodil-core-testing.js","sources":["ng://@daffodil/core/testing/factories/factory.ts","ng://@daffodil/core/testing/address/factories/address.factory.ts","ng://@daffodil/core/testing/angular/mocks/pipes/currency.ts","ng://@daffodil/core/testing/testing.module.ts"],"sourcesContent":["import { IDaffModelFactory } from './factory.interface';\nimport { range } from '@daffodil/core';\n\ninterface ArglessConstructable<T> {\n    new() : T;\n}\n\n\nexport abstract class DaffModelFactory<T extends Object> implements IDaffModelFactory<T> {\n    constructor(public type: ArglessConstructable<T>){\n\n    }\n\n    create(partial = {}) : T {\n        return {\n            ...new this.type() as any, // TODO: remove in TS 3.3\n            ...partial\n        }\n    }\n    \n    createMany(qty = 1, partial = {}) : T[] {\n        return range(0, qty - 1).map(() => this.create(partial));\n    }\n}","import { Injectable } from '@angular/core';\nimport { DaffAddress } from '@daffodil/core';\n\nimport * as faker from 'faker/locale/en_US';\nimport { DaffModelFactory } from '../../factories/factory';\n\n/**\n * @deprecated\n * Prefer the `MockDaffAddress` of daffodil/geography/testing`\n */\nexport class MockDaffAddress implements DaffAddress {\n  firstname = faker.name.firstName();\n  lastname = faker.name.lastName();\n  street = faker.address.streetName();\n  city = faker.address.city();\n  state = faker.address.stateAbbr();\n  email = faker.internet.email();\n  postcode = faker.address.zipCode();\n  telephone = faker.phone.phoneNumber();\n}\n\n/**\n * @deprecated\n * Prefer the `DaffAddressFactory` of `daffodil/geography/testing`\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAddressFactory extends DaffModelFactory<DaffAddress>{\n  constructor(){\n    super(MockDaffAddress);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * @docs\n * A mock CurrencyPipe that does nothing to a given input.\n * This pipe is useful for asserting that a CurrencyPipe is in use via a spy, \n * but ignoring the actual underlying implementation\n */\n@Pipe({name: 'currency'})\nexport class DaffMockCurrencyPipe implements PipeTransform {\n  transform(value: number) {};\n}\n","import { NgModule } from '@angular/core';\nimport { DaffMockCurrencyPipe } from './angular/mocks/pipes/currency';\n\n@NgModule({\n  declarations: [\n    DaffMockCurrencyPipe\n  ]\n})\nexport class DaffCoreTestingModule {}\n"],"names":["faker.name","faker.address","faker.internet","faker.phone","tslib_1.__extends"],"mappings":";;;;;;;;;;;;;AAGA,mCAEC;;;;;AAGD;;;;;IACI,0BAAmB,IAA6B;QAA7B,SAAI,GAAJ,IAAI,CAAyB;KAE/C;;;;;IAED,iCAAM;;;;IAAN,UAAO,OAAY;QAAZ,wBAAA,EAAA,YAAY;QACf,uCACO,IAAI,IAAI,CAAC,IAAI,EAAE,IACf,OAAO,EACb;KACJ;;;;;;IAED,qCAAU;;;;;IAAV,UAAW,GAAO,EAAE,OAAY;QAAhC,iBAEC;QAFU,oBAAA,EAAA,OAAO;QAAE,wBAAA,EAAA,YAAY;QAC5B,OAAO,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG;;;QAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAA,EAAC,CAAC;KAC5D;IACL,uBAAC;CAAA,IAAA;;;IAde,gCAAoC;;;;;;;;;;;ACCpD;;;;;IAAA;QACE,cAAS,GAAGA,IAAU,CAAC,SAAS,EAAE,CAAC;QACnC,aAAQ,GAAGA,IAAU,CAAC,QAAQ,EAAE,CAAC;QACjC,WAAM,GAAGC,OAAa,CAAC,UAAU,EAAE,CAAC;QACpC,SAAI,GAAGA,OAAa,CAAC,IAAI,EAAE,CAAC;QAC5B,UAAK,GAAGA,OAAa,CAAC,SAAS,EAAE,CAAC;QAClC,UAAK,GAAGC,QAAc,CAAC,KAAK,EAAE,CAAC;QAC/B,aAAQ,GAAGD,OAAa,CAAC,OAAO,EAAE,CAAC;QACnC,cAAS,GAAGE,KAAW,CAAC,WAAW,EAAE,CAAC;KACvC;IAAD,sBAAC;CAAA,IAAA;;;IARC,oCAAmC;;IACnC,mCAAiC;;IACjC,iCAAoC;;IACpC,+BAA4B;;IAC5B,gCAAkC;;IAClC,gCAA+B;;IAC/B,mCAAmC;;IACnC,oCAAsC;;;;;;AAOxC;IAGwCC,sCAA6B;IACnE;eACE,kBAAM,eAAe,CAAC;KACvB;;gBANF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;6BA3BD;CAgCC,CAJuC,gBAAgB;;;;;;AC5BxD;;;;;;AAQA;IAAA;KAGC;;;;;IADC,wCAAS;;;;IAAT,UAAU,KAAa,KAAI;IAAA,CAAC;;gBAF7B,IAAI,SAAC,EAAC,IAAI,EAAE,UAAU,EAAC;;IAGxB,2BAAC;CAHD;;;;;;ACRA;IAGA;KAKqC;;gBALpC,QAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,oBAAoB;qBACrB;iBACF;;IACmC,4BAAC;CALrC;;;;;;;;;;;;;;"}