{"version":3,"file":"daffodil-core-state.js","sources":["ng://@daffodil/core/state/operators/substream.pipe.ts","ng://@daffodil/core/state/loading/loading-state.enum.ts","ng://@daffodil/core/state/errors/transform-error-to-state-error.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\nimport { pipe } from 'rxjs';\nimport { scan, filter } from 'rxjs/operators';\n\nexport type ActionType = Action['type'];\nexport type ActionSequenceStep = ActionType | ActionType[];\nexport type ActionSequence = ActionSequenceStep[];\n\nconst compareActionSequenceStep = (step: ActionSequenceStep, action: Action): boolean => Array.isArray(step)\n  ? step.reduce((acc, type) => acc || action.type === type, false)\n  : action.type === step\n\n/**\n * Watches for a particular stream of actions in the specified order and\n * emits a list of those actions once all sequence steps have been matched.\n *\n * This will find the first occurence of the substream and not necessarily the most concise or recent substream.\n * For example, substream([A, B]) encountering an action stream of [A1, A2, B1, B2] will emit [A1, B1].\n * When a substream is found and emitted, the list is reset and it will continue to listen to the action stream.\n *\n * You can indicate that a particular step in the sequence can be matched by mutiple actions by passing an array for that step.\n * For example, if the first step of the sequence could be action A or action B: substream([[A, B], C]).\n * An action stream of [A1, C1] would cause substream to emit [A1, C1].\n * An action stream of [B1, C1] would cause substream to emit [B1, C1].\n * An action stream of [A1, B1, C1] would cause substream to emit [A1, C1].\n *\n * You can optionally pass a list of terminators.\n * If a terminator is encountered in the action stream, any partially matched substream is reset.\n * For example, substream([A, B], C) would not emit anything for an action stream of [A1, C1, B1].\n *\n * @param sequence The sequence of action types that define the substream to listen for.\n * @param terminators A list of terminators, any of which interrupt and reset a partially matched substream.\n */\nexport const substream = (sequence: ActionSequence, ...terminators: ActionType[]) => {\n  const isFullMatch = matchedSubstream => matchedSubstream.length === sequence.length;\n  const accumulateMatchedSubstream = (matchedSubstream, action) =>\n    compareActionSequenceStep(sequence[matchedSubstream.length], action)\n      ? [\n        ...matchedSubstream,\n        action\n      ]\n      : matchedSubstream;\n\n  return pipe(\n    scan<Action>((matchedSubstream, action) =>\n      terminators.indexOf(action.type) > -1\n        // terminator found, reset the list\n        ? []\n        : accumulateMatchedSubstream(\n          // reset the list if fully matched\n          isFullMatch(matchedSubstream) ? [] : matchedSubstream,\n          action\n        ),\n    []),\n    filter(isFullMatch)\n  )\n}\n","export enum DaffLoadingState {\n  Resolving = 'Resolving',\n\tMutating = 'Mutating',\n  Complete = 'Complete',\n}\n","import { DaffError } from '@daffodil/core';\n\nimport { DaffStateError } from './state-error.interface';\n\n/**\n * Transforms an error instance to a state error object.\n */\nexport function daffTransformErrorToStateError({code, message}: DaffError): DaffStateError {\n  return {code, message};\n}\n"],"names":[],"mappings":";;;;;;;;;IAQM,yBAAyB;;;;;AAAG,UAAC,IAAwB,EAAE,MAAc,IAAc,OAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;MACxG,IAAI,CAAC,MAAM;;;;;IAAC,UAAC,GAAG,EAAE,IAAI,IAAK,OAAA,GAAG,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,GAAA,GAAE,KAAK,CAAC;MAC9D,MAAM,CAAC,IAAI,KAAK,IAAI,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBxB,IAAa,SAAS;;;;;AAAG,UAAC,QAAwB;IAAE,qBAA4B;SAA5B,UAA4B,EAA5B,qBAA4B,EAA5B,IAA4B;QAA5B,oCAA4B;;;QACxE,WAAW;;;;IAAG,UAAA,gBAAgB,IAAI,OAAA,gBAAgB,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,GAAA,CAAA;;QAC7E,0BAA0B;;;;;IAAG,UAAC,gBAAgB,EAAE,MAAM;QAC1D,OAAA,yBAAyB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;uBAE7D,gBAAgB;gBACnB,MAAM;iBAEN,gBAAgB;KAAA,CAAA;IAEtB,OAAO,IAAI,CACT,IAAI;;;;;IAAS,UAAC,gBAAgB,EAAE,MAAM;QACpC,OAAA,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;cAEjC,EAAE;cACF,0BAA0B;;YAE1B,WAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,gBAAgB,EACrD,MAAM,CACP;KAAA,GACL,EAAE,CAAC,EACH,MAAM,CAAC,WAAW,CAAC,CACpB,CAAA;CACF,CAAA;;;;;;;;;;;;;ICvDC,WAAY,WAAW;IACxB,UAAW,UAAU;IACpB,UAAW,UAAU;;;;;;;;;;;;;;;;;ACIvB,SAAgB,8BAA8B,CAAC,EAA0B;QAAzB,cAAI,EAAE,oBAAO;IAC3D,OAAO,EAAC,IAAI,MAAA,EAAE,OAAO,SAAA,EAAC,CAAC;CACxB;;;;;;;;;;;;;;;;;;;"}