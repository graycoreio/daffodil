{"version":3,"file":"daffodil-paypal.js","sources":["ng://@daffodil/paypal/actions/paypal.actions.ts","ng://@daffodil/paypal/drivers/injection-tokens/paypal-transformer.token.ts","ng://@daffodil/paypal/drivers/injection-tokens/paypal-driver.token.ts","ng://@daffodil/paypal/drivers/injection-tokens/paypal-config.token.ts","ng://@daffodil/paypal/drivers/magento/mutations/generate-token.ts","ng://@daffodil/paypal/drivers/magento/paypal.service.ts","ng://@daffodil/paypal/drivers/magento/transformers/magento-paypal-transformer.service.ts","ng://@daffodil/paypal/drivers/magento/paypal-driver.module.ts","ng://@daffodil/paypal/effects/paypal.effects.ts","ng://@daffodil/paypal/reducers/paypal/paypal.reducer.ts","ng://@daffodil/paypal/reducers/paypal-reducers.ts","ng://@daffodil/paypal/paypal-state.module.ts","ng://@daffodil/paypal/paypal.module.ts","ng://@daffodil/paypal/selectors/paypal.selector.ts","ng://@daffodil/paypal/facades/paypal.facade.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { DaffPaypalTokenRequest } from '../models/paypal-token-request';\nimport { DaffPaypalTokenResponse } from '../models/paypal-token-response';\n\nexport enum DaffPaypalActionTypes {\n  GeneratePaypalExpressTokenAction = '[Daff Paypal] Generate Express Token Action',\n  GeneratePaypalExpressTokenSuccessAction = '[Daff Paypal] Generate Express Token Success Action',\n  GeneratePaypalExpressTokenFailureAction = '[Daff Paypal] Generate Express Token Failure Action'\n}\n\nexport class DaffGeneratePaypalExpressToken<T extends DaffPaypalTokenRequest = DaffPaypalTokenRequest> implements Action {\n  readonly type = DaffPaypalActionTypes.GeneratePaypalExpressTokenAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffGeneratePaypalExpressTokenSuccess<T extends DaffPaypalTokenResponse = DaffPaypalTokenResponse> implements Action {\n  readonly type = DaffPaypalActionTypes.GeneratePaypalExpressTokenSuccessAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffGeneratePaypalExpressTokenFailure implements Action {\n\treadonly type = DaffPaypalActionTypes.GeneratePaypalExpressTokenFailureAction;\n\t\n\tconstructor(public payload: string) {}\n}\n\nexport type DaffPaypalActions<\n\tT extends DaffPaypalTokenRequest = DaffPaypalTokenRequest, \n\tV extends DaffPaypalTokenResponse = DaffPaypalTokenResponse\n> =\n    | DaffGeneratePaypalExpressToken<T>\n    | DaffGeneratePaypalExpressTokenSuccess<V>\n    | DaffGeneratePaypalExpressTokenFailure;\n","import { InjectionToken } from '@angular/core';\n\nexport const DaffPaypalTransformer = new InjectionToken('DaffPaypalTransformer');","import { InjectionToken } from '@angular/core';\n\nexport const DaffPaypalDriver = new InjectionToken('DaffPaypalDriver');","import { InjectionToken } from '@angular/core';\n\nexport const DaffPaypalConfig = new InjectionToken('DaffPaypalConfig');","import gql from 'graphql-tag';\n\nexport const GenerateTokenMutation = gql`\n\tmutation GenerateToken($input: MagentoPaypalTokenRequest) {\n\t\tcreatePaypalExpressToken(input: $input) {\n\t\t\ttoken\n\t\t\tpaypal_urls {\n\t\t\t\tstart\n\t\t\t\tedit\n\t\t\t}\n\t\t}\n\t}\n`;\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffPaypalServiceInterface } from '../interfaces/paypal-service.interface';\nimport { DaffPaypalTransformer } from '../injection-tokens/paypal-transformer.token';\nimport { DaffPaypalTransformerInterface } from '../interfaces/paypal-transformer.interface';\nimport { GenerateTokenMutation } from './mutations/generate-token';\nimport { DaffPaypalTokenRequest } from '../../models/paypal-token-request';\nimport { DaffPaypalTokenResponse } from '../../models/paypal-token-response';\nimport { MagentoPaypalTokenResponse } from './models/response/magento-paypal-token-response';\nimport { DaffMagentoPaypalConfig } from './models/config';\nimport { DaffPaypalConfig } from '../injection-tokens/paypal-config.token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoPaypalService implements DaffPaypalServiceInterface {\n  \n  constructor(\n    private apollo: Apollo,\n\t\t@Inject(DaffPaypalTransformer) private transformer: DaffPaypalTransformerInterface<DaffPaypalTokenRequest, DaffPaypalTokenResponse>,\n\t\t@Inject(DaffPaypalConfig) private config: DaffMagentoPaypalConfig\n\t) {}\n\n  generateToken(tokenRequest: DaffPaypalTokenRequest): Observable<DaffPaypalTokenResponse> {\n    return this.apollo.mutate<MagentoPaypalTokenResponse>({\n      mutation: GenerateTokenMutation,\n      variables: {\n        input: this.transformer.transformOut(tokenRequest, this.config)\n      }\n    }).pipe(\n      map(result => {\n\t\t\t\treturn this.transformer.transformIn(result.data.createPaypalExpressToken)\n\t\t\t})\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffPaypalTokenRequest } from '../../../models/paypal-token-request';\nimport { DaffPaypalTokenResponse } from '../../../models/paypal-token-response';\nimport { MagentoPaypalTokenRequest } from '../models/request/magento-paypal-token-request';\nimport { DaffMagentoPaypalConfig } from '../models/config';\nimport { DaffPaypalTransformerInterface } from '../../interfaces/paypal-transformer.interface';\nimport { MagentoPaypalExpressToken } from '../models/response/magento-paypal-express-token';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class DaffMagentoPaypalTransformerService implements DaffPaypalTransformerInterface<DaffPaypalTokenRequest, DaffPaypalTokenResponse> {\n\ttransformOut(tokenRequest: DaffPaypalTokenRequest, config: DaffMagentoPaypalConfig): MagentoPaypalTokenRequest {\n\t\treturn {\n\t\t\tcart_id: tokenRequest.cartId,\n\t\t\tcode: config.code ? config.code : 'paypal_express',\n\t\t\turls: {\n\t\t\t\tcancel_url: config.cancel_url,\n\t\t\t\treturn_url: config.return_url,\n\t\t\t\tpending_url: config.pending_url,\n\t\t\t\tsuccess_url: config.success_url\n\t\t\t},\n\t\t\texpress_button: config.express_button ? config.express_button : false,\n\t\t\tuse_paypal_credit: config.use_paypal_credit ? config.use_paypal_credit : false\n\t\t};\n\t}\n\n\ttransformIn(tokenResponse: MagentoPaypalExpressToken): DaffPaypalTokenResponse {\n\t\treturn {\n\t\t\ttoken: tokenResponse.token,\n\t\t\turls: {\n\t\t\t\tstart: tokenResponse.paypal_urls.start,\n\t\t\t\tedit: tokenResponse.paypal_urls.edit\n\t\t\t}\n\t\t};\n\t}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffPaypalDriver } from '../injection-tokens/paypal-driver.token';\nimport { DaffMagentoPaypalService } from './paypal.service';\nimport { DaffPaypalTransformer } from '../injection-tokens/paypal-transformer.token';\nimport { DaffMagentoPaypalTransformerService } from './transformers/magento-paypal-transformer.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffPaypalMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffPaypalMagentoDriverModule> {\n    return {\n      ngModule: DaffPaypalMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffPaypalDriver,\n          useExisting: DaffMagentoPaypalService\n        },\n        {\n          provide: DaffPaypalTransformer,\n          useExisting: DaffMagentoPaypalTransformerService\n        }\n      ]\n    };\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { Action } from '@ngrx/store';\n\nimport { \n\tDaffPaypalActionTypes, \n\tDaffGeneratePaypalExpressToken, \n\tDaffGeneratePaypalExpressTokenSuccess,\n\tDaffGeneratePaypalExpressTokenFailure \n} from '../actions/paypal.actions';\nimport { DaffPaypalServiceInterface } from '../drivers/interfaces/paypal-service.interface';\nimport { DaffPaypalDriver } from '../drivers/injection-tokens/paypal-driver.token';\nimport { DaffPaypalTokenRequest } from '../models/paypal-token-request';\nimport { DaffPaypalTokenResponse } from '../models/paypal-token-response';\n\n@Injectable()\nexport class DaffPaypalEffects<T extends DaffPaypalTokenRequest, V extends DaffPaypalTokenResponse>{\n\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffPaypalDriver) private driver: DaffPaypalServiceInterface<T, V>) { }\n\n  generatePaypalExpressToken$: Observable<Action> = createEffect(() => this.actions$.pipe(\n    ofType(DaffPaypalActionTypes.GeneratePaypalExpressTokenAction),\n    switchMap((action: DaffGeneratePaypalExpressToken<T>) => {\n\t\t\treturn this.driver.generateToken(action.payload).pipe(\n\t\t\t\tmap((resp: V) => {\n\t\t\t\t\treturn new DaffGeneratePaypalExpressTokenSuccess(resp);\n\t\t\t\t}),\n\t\t\t\tcatchError(error => {\n\t\t\t\t\treturn of(new DaffGeneratePaypalExpressTokenFailure('Failed to retrieve token'));\n\t\t\t\t})\n\t\t\t)\n\t\t})\n\t));\n}","import { DaffPaypalReducerState } from './paypal-reducer.interface';\nimport { DaffPaypalTokenResponse } from '../../models/paypal-token-response';\nimport { DaffPaypalActions, DaffPaypalActionTypes } from '../../actions/paypal.actions';\nimport { DaffPaypalTokenRequest } from '../../models/paypal-token-request';\n\nexport const initialState: DaffPaypalReducerState<any> = {\n\tpaypalTokenResponse: null,\n\tloading: false,\n\terror: null\n}\n\nexport function daffPaypalReducer <T extends DaffPaypalTokenRequest, V extends DaffPaypalTokenResponse>\n\t(state: DaffPaypalReducerState<V> = initialState, action: DaffPaypalActions<T, V>): DaffPaypalReducerState<V> {\n  switch (action.type) {\n\t\tcase DaffPaypalActionTypes.GeneratePaypalExpressTokenAction:\n\t\t\treturn {...state, loading: true};\n    case DaffPaypalActionTypes.GeneratePaypalExpressTokenSuccessAction:\n\t\t\treturn {...state, paypalTokenResponse: action.payload, loading: false, error: null};\n\t\tcase DaffPaypalActionTypes.GeneratePaypalExpressTokenFailureAction:\n\t\t\treturn {...state, error: action.payload, loading: false, paypalTokenResponse: null};\n    default:\n      return state;\n  }\n}\n","import { daffPaypalReducer } from './paypal/paypal.reducer';\n\nexport const daffPaypalReducers = {\n\tpaypal: daffPaypalReducer\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DaffPaypalEffects } from './effects/paypal.effects';\nimport { daffPaypalReducers } from './reducers/paypal-reducers';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature('paypal', daffPaypalReducers),\n    EffectsModule.forFeature([DaffPaypalEffects])\n  ]\n})\nexport class DaffPaypalStateModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffPaypalStateModule } from './paypal-state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DaffPaypalStateModule\n  ]\n})\nexport class DaffPaypalModule { }\n","import { createSelector, createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffPaypalReducerState } from '../reducers/paypal/paypal-reducer.interface';\nimport { DaffPaypalReducersState } from '../reducers/paypal-reducers.interface';\nimport { DaffPaypalTokenResponse } from '../models/paypal-token-response';\n\nexport interface DaffPaypalMemoizedSelectors<T extends DaffPaypalTokenResponse = DaffPaypalTokenResponse> {\n\tselectPaypalFeatureState: MemoizedSelector<object, DaffPaypalReducersState<T>>;\n\tselectPaypalState: MemoizedSelector<object, DaffPaypalReducerState<T>>;\n\tselectPaypalTokenResponse: MemoizedSelector<object, T>;\n\tselectPaypalLoading: MemoizedSelector<object, boolean>;\n\tselectPaypalError: MemoizedSelector<object, string>;\n\tselectPaypalToken: MemoizedSelector<object, string>;\n\tselectPaypalStartUrl: MemoizedSelector<object, string>;\n\tselectPaypalEditUrl: MemoizedSelector<object, string>;\n}\n\nconst createPaypalSelectors = <T extends DaffPaypalTokenResponse>(): DaffPaypalMemoizedSelectors<T> => {\n\n\t/**\n\t * Paypal Feature State\n\t */\n\tconst selectPaypalFeatureState = createFeatureSelector<DaffPaypalReducersState<T>>('paypal');\n\n\t/**\n\t * Paypal State\n\t */\n\tconst selectPaypalState = createSelector(selectPaypalFeatureState, (state: DaffPaypalReducersState<T>) => state.paypal);\n\n\tconst selectPaypalTokenResponse = createSelector(selectPaypalState,(state: DaffPaypalReducerState<T>) => state.paypalTokenResponse);\n\n\tconst selectPaypalLoading = createSelector(selectPaypalState,(state: DaffPaypalReducerState<T>) => state.loading);\n\n\tconst selectPaypalError = createSelector(selectPaypalState,(state: DaffPaypalReducerState<T>) => state.error);\n\n\tconst selectPaypalToken = createSelector(selectPaypalTokenResponse,(state: T) => state.token);\n\n\tconst selectPaypalStartUrl = createSelector(selectPaypalTokenResponse,(state: T) => state.urls.start);\n\n\tconst selectPaypalEditUrl = createSelector(selectPaypalTokenResponse,(state: T) => state.urls.edit);\n\t\n\treturn { \n\t\tselectPaypalFeatureState,\n\t\tselectPaypalState,\n\t\tselectPaypalTokenResponse,\n\t\tselectPaypalLoading,\n\t\tselectPaypalError,\n\t\tselectPaypalToken,\n\t\tselectPaypalStartUrl,\n\t\tselectPaypalEditUrl\n\t}\n}\n\nexport const getDaffPaypalSelectors = (() => {\n\tlet cache;\n\treturn <T extends DaffPaypalTokenResponse = DaffPaypalTokenResponse>(): DaffPaypalMemoizedSelectors<T> => cache = cache \n\t\t? cache \n\t\t: createPaypalSelectors<T>();\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store, select, Action } from '@ngrx/store';\n\nimport { DaffPaypalModule } from '../paypal.module';\nimport { DaffPaypalReducersState } from '../reducers/paypal-reducers.interface';\nimport { DaffPaypalFacadeInterface } from '../interfaces/paypal-facade.interface';\nimport { DaffPaypalTokenResponse } from '../models/paypal-token-response';\nimport { getDaffPaypalSelectors } from '../selectors/paypal.selector';\n\n@Injectable({\n  providedIn: DaffPaypalModule\n})\nexport class DaffPaypalFacade<T extends DaffPaypalTokenResponse = DaffPaypalTokenResponse> implements DaffPaypalFacadeInterface<T> {\n  /**\n   * The entire DaffPaypalTokenResponse object.\n   */\n\tpaypalTokenResponse$: Observable<T>;\n\t/**\n\t * The paypal token nonce.\n\t */\n\tpaypalToken$: Observable<string>;\n\t/**\n\t * A URL for the PayPal login page.\n\t */\n\tpaypalStartUrl$: Observable<string>;\n\t/**\n\t * A PayPal URL that allows a customer to edit their checkout details.\n\t */\n\tpaypalEditUrl$: Observable<string>;\n  /**\n   * The loading state for retrieving a single paypal.\n   */\n  loading$: Observable<boolean>;\n  /**\n   * Errors associated with retrieving a single paypal.\n   */\n  error$: Observable<string>;\n\n  constructor(private store: Store<DaffPaypalReducersState<T>>) {\n\t\tconst {\n\t\t\tselectPaypalTokenResponse,\n\t\t\tselectPaypalToken,\n\t\t\tselectPaypalStartUrl,\n\t\t\tselectPaypalEditUrl,\n\t\t\tselectPaypalLoading,\n\t\t\tselectPaypalError\n\t\t} = getDaffPaypalSelectors<T>();\n\n    this.paypalTokenResponse$ = this.store.pipe(select(selectPaypalTokenResponse));\n    this.paypalToken$ = this.store.pipe(select(selectPaypalToken));\n    this.paypalStartUrl$ = this.store.pipe(select(selectPaypalStartUrl));\n    this.paypalEditUrl$ = this.store.pipe(select(selectPaypalEditUrl));\n    this.loading$ = this.store.pipe(select(selectPaypalLoading));\n    this.error$ = this.store.pipe(select(selectPaypalError));\n  }\n\n  /**\n   * Dispatches the given action.\n   * @param action action to dispatch.\n   */\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAME,kCAAmC,6CAA6C;IAChF,yCAA0C,qDAAqD;IAC/F,yCAA0C,qDAAqD;;;;;AAGjG;;;;IAGE,wCAAmB,OAAU;QAAV,YAAO,GAAP,OAAO,CAAG;QAFpB,SAAI,GAAG,qBAAqB,CAAC,gCAAgC,CAAC;KAEtC;IACnC,qCAAC;CAAA,IAAA;;;IAHC,8CAAuE;;IAE3D,iDAAiB;;;;;AAG/B;;;;IAGE,+CAAmB,OAAU;QAAV,YAAO,GAAP,OAAO,CAAG;QAFpB,SAAI,GAAG,qBAAqB,CAAC,uCAAuC,CAAC;KAE7C;IACnC,4CAAC;CAAA,IAAA;;;IAHC,qDAA8E;;IAElE,wDAAiB;;AAG/B;IAGC,+CAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAFzB,SAAI,GAAG,qBAAqB,CAAC,uCAAuC,CAAC;KAExC;IACvC,4CAAC;CAAA,IAAA;;;IAHA,qDAA8E;;IAElE,wDAAsB;;;;;;;AC1BnC;AAEA,IAAa,qBAAqB,GAAG,IAAI,cAAc,CAAC,uBAAuB,CAAC;;;;;;ACFhF;AAEA,IAAa,gBAAgB,GAAG,IAAI,cAAc,CAAC,kBAAkB,CAAC;;;;;;ACFtE;AAEA,IAAa,gBAAgB,GAAG,IAAI,cAAc,CAAC,kBAAkB,CAAC;;;;;;;ACAtE,IAAa,qBAAqB,GAAG,GAAG,yQAAA,sMAUvC,IAAA;;;;;;;ACZD;IAoBE,kCACU,MAAc,EACe,WAA4F,EACjG,MAA+B;QAFvD,WAAM,GAAN,MAAM,CAAQ;QACe,gBAAW,GAAX,WAAW,CAAiF;QACjG,WAAM,GAAN,MAAM,CAAyB;KAC9D;;;;;IAEH,gDAAa;;;;IAAb,UAAc,YAAoC;QAAlD,iBAWC;QAVC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAA6B;YACpD,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE;gBACT,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC;aAChE;SACF,CAAC,CAAC,IAAI,CACL,GAAG;;;;QAAC,UAAA,MAAM;YACZ,OAAO,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;SACzE,EAAC,CACA,CAAC;KACH;;gBAtBF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAdQ,MAAM;gDAmBZ,MAAM,SAAC,qBAAqB;gDAC5B,MAAM,SAAC,gBAAgB;;;mCAvB1B;CAeA,IAuBC;;;;;;IAjBG,0CAAsB;;;;;IACxB,+CAAmI;;;;;IACnI,0CAAiE;;;;;;;ACvBnE;IASA;KA4BC;;;;;;IAxBA,0DAAY;;;;;IAAZ,UAAa,YAAoC,EAAE,MAA+B;QACjF,OAAO;YACN,OAAO,EAAE,YAAY,CAAC,MAAM;YAC5B,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,gBAAgB;YAClD,IAAI,EAAE;gBACL,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,WAAW,EAAE,MAAM,CAAC,WAAW;aAC/B;YACD,cAAc,EAAE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,GAAG,KAAK;YACrE,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,GAAG,KAAK;SAC9E,CAAC;KACF;;;;;IAED,yDAAW;;;;IAAX,UAAY,aAAwC;QACnD,OAAO;YACN,KAAK,EAAE,aAAa,CAAC,KAAK;YAC1B,IAAI,EAAE;gBACL,KAAK,EAAE,aAAa,CAAC,WAAW,CAAC,KAAK;gBACtC,IAAI,EAAE,aAAa,CAAC,WAAW,CAAC,IAAI;aACpC;SACD,CAAC;KACF;;gBA3BD,UAAU,SAAC;oBACX,UAAU,EAAE,MAAM;iBAClB;;;8CAXD;CASA;;;;;;ACTA;IAQA;KAqBC;;;;IAfQ,qCAAO;;;IAAd;QACE,OAAO;YACL,QAAQ,EAAE,6BAA6B;YACvC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,gBAAgB;oBACzB,WAAW,EAAE,wBAAwB;iBACtC;gBACD;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,WAAW,EAAE,mCAAmC;iBACjD;aACF;SACF,CAAC;KACH;;gBApBF,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,YAAY;qBACb;iBACF;;IAiBD,oCAAC;CArBD;;;;;;ACRA;;;AAiBA;IAGE,2BACU,QAAiB,EACS,MAAwC;QAF5E,iBAEiF;QADvE,aAAQ,GAAR,QAAQ,CAAS;QACS,WAAM,GAAN,MAAM,CAAkC;QAE5E,gCAA2B,GAAuB,YAAY;;;QAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CACrF,MAAM,CAAC,qBAAqB,CAAC,gCAAgC,CAAC,EAC9D,SAAS;;;;QAAC,UAAC,MAAyC;YACrD,OAAO,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CACpD,GAAG;;;;YAAC,UAAC,IAAO;gBACX,OAAO,IAAI,qCAAqC,CAAC,IAAI,CAAC,CAAC;aACvD,EAAC,EACF,UAAU;;;;YAAC,UAAA,KAAK;gBACf,OAAO,EAAE,CAAC,IAAI,qCAAqC,CAAC,0BAA0B,CAAC,CAAC,CAAC;aACjF,EAAC,CACF,CAAA;SACD,EAAC,CACF,GAAA,EAAC,CAAC;KAd+E;;gBALlF,UAAU;;;;gBAfF,OAAO;gDAoBX,MAAM,SAAC,gBAAgB;;IAe5B,wBAAC;CApBD,IAoBC;;;IAbC,wDAYE;;;;;IAfA,qCAAyB;;;;;IACzB,mCAA0E;;;;;;;;ACjB9E,IAAa,YAAY,GAAgC;IACxD,mBAAmB,EAAE,IAAI;IACzB,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,IAAI;CACX;;;;;;;AAED,SAAgB,iBAAiB,CAC/B,KAA+C,EAAE,MAA+B;IAAhF,sBAAA,EAAA,oBAA+C;IAC/C,QAAQ,MAAM,CAAC,IAAI;QACnB,KAAK,qBAAqB,CAAC,gCAAgC;YAC1D,oBAAW,KAAK,IAAE,OAAO,EAAE,IAAI,IAAE;QAChC,KAAK,qBAAqB,CAAC,uCAAuC;YACnE,oBAAW,KAAK,IAAE,mBAAmB,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,IAAE;QACrF,KAAK,qBAAqB,CAAC,uCAAuC;YACjE,oBAAW,KAAK,IAAE,KAAK,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,mBAAmB,EAAE,IAAI,IAAE;QACnF;YACE,OAAO,KAAK,CAAC;KAChB;CACF;;;;;;ACvBD;AAEA,IAAa,kBAAkB,GAAG;IACjC,MAAM,EAAE,iBAAiB;CACzB;;;;;;ACJD;IAOA;KAMqC;;gBANpC,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,kBAAkB,CAAC;wBACpD,aAAa,CAAC,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC;qBAC9C;iBACF;;IACmC,4BAAC;CANrC;;;;;;ACPA;IAKA;KAMiC;;gBANhC,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,YAAY;wBACZ,qBAAqB;qBACtB;iBACF;;IAC+B,uBAAC;CANjC;;;;;;ACLA;;;;AAMA,0CASC;;;IARA,+DAA+E;;IAC/E,wDAAuE;;IACvE,gEAAuD;;IACvD,0DAAuD;;IACvD,wDAAoD;;IACpD,wDAAoD;;IACpD,2DAAuD;;IACvD,0DAAsD;;;IAGjD,qBAAqB;;;;AAAG;;;;;QAKvB,wBAAwB,GAAG,qBAAqB,CAA6B,QAAQ,CAAC;;;;;QAKtF,iBAAiB,GAAG,cAAc,CAAC,wBAAwB;;;;IAAE,UAAC,KAAiC,IAAK,OAAA,KAAK,CAAC,MAAM,GAAA,EAAC;;QAEjH,yBAAyB,GAAG,cAAc,CAAC,iBAAiB;;;;IAAC,UAAC,KAAgC,IAAK,OAAA,KAAK,CAAC,mBAAmB,GAAA,EAAC;;QAE7H,mBAAmB,GAAG,cAAc,CAAC,iBAAiB;;;;IAAC,UAAC,KAAgC,IAAK,OAAA,KAAK,CAAC,OAAO,GAAA,EAAC;;QAE3G,iBAAiB,GAAG,cAAc,CAAC,iBAAiB;;;;IAAC,UAAC,KAAgC,IAAK,OAAA,KAAK,CAAC,KAAK,GAAA,EAAC;;QAEvG,iBAAiB,GAAG,cAAc,CAAC,yBAAyB;;;;IAAC,UAAC,KAAQ,IAAK,OAAA,KAAK,CAAC,KAAK,GAAA,EAAC;;QAEvF,oBAAoB,GAAG,cAAc,CAAC,yBAAyB;;;;IAAC,UAAC,KAAQ,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,KAAK,GAAA,EAAC;;QAE/F,mBAAmB,GAAG,cAAc,CAAC,yBAAyB;;;;IAAC,UAAC,KAAQ,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,IAAI,GAAA,EAAC;IAEnG,OAAO;QACN,wBAAwB,0BAAA;QACxB,iBAAiB,mBAAA;QACjB,yBAAyB,2BAAA;QACzB,mBAAmB,qBAAA;QACnB,iBAAiB,mBAAA;QACjB,iBAAiB,mBAAA;QACjB,oBAAoB,sBAAA;QACpB,mBAAmB,qBAAA;KACnB,CAAA;CACD,CAAA;;;;;AAEsC;;QAClC,KAAK;IACT;;;;IAAO,cAAmG,OAAA,KAAK,GAAG,KAAK;UACpH,KAAK;UACL,qBAAqB,EAAK,GAAA,EAAC;CAC9B;;AALD,IAAa,sBAAsB,GAAG,QAKlC;;;;;;AC1DJ;;;AAUA;IA6BE,0BAAoB,KAAwC;QAAxC,UAAK,GAAL,KAAK,CAAmC;QACtD,IAAA,6BAOyB,EAN9B,wDAAyB,EACzB,wCAAiB,EACjB,8CAAoB,EACpB,4CAAmB,EACnB,4CAAmB,EACnB,wCAC8B;QAE7B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;KAC1D;;;;;;;;;;IAMD,mCAAQ;;;;;IAAR,UAAS,MAAc;QACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC7B;;gBArDF,UAAU,SAAC;oBACV,UAAU,EAAE,gBAAgB;iBAC7B;;;;gBAVQ,KAAK;;;2BAFd;CAUA,IAsDC;;;;;;IA/CA,gDAAoC;;;;;IAIpC,wCAAiC;;;;;IAIjC,2CAAoC;;;;;IAIpC,0CAAmC;;;;;IAIlC,oCAA8B;;;;;IAI9B,kCAA2B;;;;;IAEf,iCAAgD;;;;;;;;;;;;;;;"}