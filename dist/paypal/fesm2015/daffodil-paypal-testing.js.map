{"version":3,"file":"daffodil-paypal-testing.js","sources":["ng://@daffodil/paypal/testing/factories/paypal-token-response.factory.ts","ng://@daffodil/paypal/testing/inmemory-backend/paypal.service.ts","ng://@daffodil/paypal/testing/drivers/testing/paypal.service.ts","ng://@daffodil/paypal/testing/drivers/in-memory/paypal.service.ts","ng://@daffodil/paypal/testing/drivers/in-memory/paypal-driver.module.ts","ng://@daffodil/paypal/testing/drivers/testing/paypal-driver.module.ts","ng://@daffodil/paypal/testing/helpers/mock-paypal-facade.ts","ng://@daffodil/paypal/testing/helpers/paypal-testing.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffPaypalTokenResponse } from '@daffodil/paypal';\n\nexport class MockPaypalTokenResponse implements DaffPaypalTokenResponse {\n  token = 'tokenstring';\n  urls = {\n\t\tstart: faker.internet.url(),\n\t\tedit: faker.internet.url()\n\t};\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffPaypalTokenResponseFactory extends DaffModelFactory<DaffPaypalTokenResponse>{\n  constructor(){\n    super(MockPaypalTokenResponse);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfoUtilities,\n  ParsedRequestUrl,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffPaypalTokenResponse } from '@daffodil/paypal';\n\nimport { DaffPaypalTokenResponseFactory } from '../factories/paypal-token-response.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendPaypalService implements InMemoryDbService {\n  paypalTokenResponse: DaffPaypalTokenResponse;\n\n  constructor(private paypalTokenResponseFactory: DaffPaypalTokenResponseFactory) {\n    this.paypalTokenResponse = this.paypalTokenResponseFactory.create();\n  }\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  createDb(): any {\n    return {\n      paypalTokenResponse: this.paypalTokenResponse\n    };\n  }\n\n  get(reqInfo: any) {\n    return reqInfo.utils.createResponse$(() => {\n      return {\n        body: this.paypalTokenResponse,\n        status: STATUS.OK\n      };\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffPaypalTokenRequest, DaffPaypalTokenResponse, DaffPaypalServiceInterface } from '@daffodil/paypal';\n\nimport { DaffPaypalTokenResponseFactory } from '../../factories/paypal-token-response.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingPaypalService implements DaffPaypalServiceInterface<DaffPaypalTokenRequest, DaffPaypalTokenResponse> {\n \n  constructor(\n    private paypalTokenResponseFactory: DaffPaypalTokenResponseFactory) {}\n\n  generateToken(tokenRequest: DaffPaypalTokenRequest): Observable<DaffPaypalTokenResponse> {\n    return of(this.paypalTokenResponseFactory.create());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { DaffPaypalServiceInterface, DaffPaypalTokenRequest, DaffPaypalTokenResponse } from '@daffodil/paypal';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryPaypalService implements DaffPaypalServiceInterface<DaffPaypalTokenRequest, DaffPaypalTokenResponse> {\n  url = '/api/paypal/';\n\n  constructor(private http: HttpClient) {}\n\n  generateToken(tokenRequest: DaffPaypalTokenRequest): Observable<DaffPaypalTokenResponse> {\n    return this.http.get<DaffPaypalTokenResponse>(this.url + tokenRequest.cartId);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffPaypalDriver } from '@daffodil/paypal';\n\nimport { DaffInMemoryPaypalService } from './paypal.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffPaypalInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffPaypalInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffPaypalDriver,\n          useExisting: DaffInMemoryPaypalService\n        }\n      ]\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffPaypalDriver } from '@daffodil/paypal';\n\nimport { DaffTestingPaypalService } from './paypal.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffPaypalTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffPaypalTestingDriverModule,\n      providers: [\n        {\n          provide: DaffPaypalDriver,\n          useExisting: DaffTestingPaypalService\n        }\n      ]\n    };\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { DaffPaypalFacadeInterface, DaffPaypalTokenResponse } from '@daffodil/paypal';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffPaypalFacade implements DaffPaypalFacadeInterface {\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\tpaypalTokenResponse$: BehaviorSubject<DaffPaypalTokenResponse> = new BehaviorSubject(null);\n\tpaypalToken$: BehaviorSubject<string> = new BehaviorSubject(null);\n\tpaypalStartUrl$: BehaviorSubject<string> = new BehaviorSubject(null);\n\tpaypalEditUrl$: BehaviorSubject<string> = new BehaviorSubject(null);\n  error$: BehaviorSubject<string> = new BehaviorSubject(null);\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffPaypalFacade } from '@daffodil/paypal';\n\nimport { MockDaffPaypalFacade } from './mock-paypal-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffPaypalFacade, useExisting: MockDaffPaypalFacade }\n\t]\n})\nexport class DaffPaypalTestingModule { }\n"],"names":["faker.internet"],"mappings":"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"}