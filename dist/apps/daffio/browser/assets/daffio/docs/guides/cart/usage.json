{
  "id": "guides/cart/usage",
  "title": "Usage",
  "contents": "\n<div class=\"content\">\n<h1 id=\"usage\">Usage</h1>\n<ul>\n<li><a href=\"#usage\">Usage</a><ul>\n<li><a href=\"#interacting-with-platforms\">Interacting with Platforms</a></li>\n<li><a href=\"#using-routing-guards\">Using Routing Guards</a></li>\n<li><a href=\"#providing-platform-agnostic-payment-ids\">Providing Platform-Agnostic Payment IDs</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"interacting-with-platforms\">Interacting with Platforms</h2>\n<p>Interacting with platforms through the Daffodil facade is the recommended method. See <a href=\"./state.md#using-the-facade\">using the facade</a>.</p>\n<p>It is possible to interact with platforms by directly calling the drivers. While this requires more work to integrate into components, it offers greater flexibility. See <a href=\"./drivers.md\">the drivers guide</a> for more information.</p>\n<h2 id=\"using-routing-guards\">Using Routing Guards</h2>\n<p><code>@daffodil/cart</code> provides a number of routing guards to prevent access to certain pages until specific data becomes available.</p>\n<p>The following example illustrates using the <code>DaffShippingAddressGuard</code> to prevent accessing the shipping method page of checkout until a shipping address has been set.</p>\n<pre><code class=\"language-typescript\">import {\n  DaffShippingAddressGuard,\n  DaffCartShippingAddressGuardRedirectUrl\n} from &#39;@daffodil/cart&#39;;\n\n@NgModule({\n  imports: [\n    ...,\n    RouterModule.forRoot([\n      {\n        path: &#39;checkout/shipping&#39;,\n        component: CheckoutShippingComponent,\n        canActivate: [DaffShippingAddressGuard]\n      },\n      {\n        path: &#39;&#39;,\n        component: HomepageComponent,\n      },\n    ])\n  ],\n  providers: [\n    {\n      provide: DaffCartShippingAddressGuardRedirectUrl,\n      useValue: &#39;/&#39;\n    }\n  ]\n})\nclass AppModule {}</code></pre>\n<blockquote>\n<p>The <code>&#39;checkout/shipping&#39;</code> route&#39;s activation was guarded with the <code>DaffShippingAddressGuard</code>, ensuring that page cannot be accessed unless the cart has a valid shipping address set. The <code>DaffCartShippingAddressGuardRedirectUrl</code> token is used to configure the path to which the user is redirected when and if the activation fails.</p>\n</blockquote>\n<h2 id=\"providing-platform-agnostic-payment-ids\">Providing Platform-Agnostic Payment IDs</h2>\n<p>The cart facade provides a field (<code>paymentId$</code>) for agnostic payment IDs. The IDs must be user-supplied to prevent circular package dependencies. Provide an object for the <code>DaffCartPaymentMethodIdMap</code> token. The keys of this object should be cart payment methods and the values should be strings.</p>\n<pre><code class=\"language-typescript\">import {\n  DaffCartPaymentMethodIdMap,\n  DaffCartFacade,\n  DaffCartPaymentMethod\n} from &#39;@daffodil/cart&#39;;\n\n@NgModule({\n  ...,\n  providers: [\n    {\n      provide: DaffCartPaymentMethodIdMap,\n      useValue: {\n        authorizenet_accept_js: &#39;authorizenet&#39;,\n        payflowpro: &#39;paypal&#39;\n      }\n    }\n  ]\n})\nclass AppModule {}\n\n@Component({})\nclass CartComponent implements OnInit {\n  paymentID$: Observable&lt;string&gt;;\n\n  constructor(private cartFacade: DaffCartFacade) {}\n\n  ngOnInit() {\n    this.paymentID$ = this.cartFacade.paymentId$;\n  }\n\n  setPayment(info) {\n    this.cartFacade.dispatch(new DaffCartPaymentUpdate({\n      method: &#39;authorizenet_accept_js&#39;,\n      payment_info: info\n    }));\n  }\n}</code></pre>\n<blockquote>\n<p>When <code>setPayment</code> is called, the cart payment method will be updated. After this update is finished, the <code>this.paymentID$</code> stream will emit <code>&#39;authorizenet&#39;</code>.</p>\n</blockquote>\n\n</div>\n"
}