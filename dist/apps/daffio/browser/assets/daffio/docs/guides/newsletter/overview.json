{
  "id": "guides/newsletter/overview",
  "title": "Daffodil Newsletter",
  "contents": "\n<div class=\"content\">\n<h1 id=\"daffodil-newsletter\">Daffodil Newsletter</h1>\n<p>The <code>@daffodil/newsletter</code> library allows you to quickly scaffold a &quot;newsletter&quot; subscription UI feature in an Angular application. It supports drivers for a variety of ecommerce platforms in order to make connecting your UI to your platform&#39;s newsletter feature easy. <!-- talk about supported platforms --></p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><p><a href=\"#getting-started\">Getting Started</a></p>\n<ul>\n<li><a href=\"#setting-up-your-appmodule\">Setting up your AppModule</a></li>\n<li><a href=\"#utilizing-inside-your-component\">Utilizing inside your Component</a></li>\n</ul>\n</li>\n<li><p><a href=\"#sending-a-newsletter-subscription-to-your-platform&#39;s-backend\">Sending a Newsletter Subscription</a></p>\n<ul>\n<li><a href=\"#using-the-facade\">Using the facade</a></li>\n</ul>\n</li>\n<li><p><a href=\"#live-demo\">Live Demo</a></p>\n</li>\n</ul>\n<h1 id=\"getting-started\">Getting Started</h1>\n<p>This overview assumes that you have already set up an Angular project and have gone through the <a href=\"./installation.md\">Newsletter installation guide</a>. If you have not, we recommend you do that first.</p>\n<h2 id=\"setting-up-your-appmodule\">Setting up your AppModule</h2>\n<p>To get started, import the <code>StoreModule</code> and the <code>DaffNewsletterModule</code> at the top of your app.module file.</p>\n<pre><code class=\"language-typescript\">import { DaffNewsletterModule } from &#39;@daffodil/newsletter&#39;;\nimport { StoreModule } from &#39;@ngrx/store&#39;;</code></pre>\n<p>Then import the <code>DaffNewsletterModule</code> in your app.module. Afterwards, also import <code>StoreModule.forRoot({})</code>, as this will be relevant later on when utilizing the redux and state management features of the newsletter module.</p>\n<pre><code class=\"language-typescript\">@ngModule({\n  imports:[\n    StoreModule.forRoot({}),\n    DaffNewsletterModule\n  ]\n})</code></pre>\n<h2 id=\"utilizing-inside-your-component\">Utilizing inside your component</h2>\n<p>The <code>DaffNewsletterModule</code> provides a <code>DaffNewsletterFacade</code> that wraps the complexities of the library into one place. This facade will handle sending your newsletter subscription to your application&#39;s backend and and can also be utilized to build your UI with behaviors common to a newsletter.</p>\n<p>To inject the facade inside your component, include an instance of <code>DaffNewsletterFacade</code> in your component&#39;s constructor.</p>\n<pre><code class=\"language-typescript\">export class NewsletterComponent {\n  constructor(public newsletterFacade: DaffNewsletterFacade) {}\n}</code></pre>\n<h1 id=\"sending-a-newsletter-subscription-to-your-platforms-backend\">Sending a Newsletter Subscription to your platform&#39;s backend</h1>\n<p>The <code>DaffNewsletterFacade</code> supports sending a <code>DaffNewsletterSubmission</code> when sending a subscription to your platform&#39;s backend.</p>\n<pre><code class=\"language-typescript\">export interface DaffNewsletterSubmission {\n  email: string;\n}</code></pre>\n<p>The <code>DaffNewsletterSubmission</code> is the default object and only contains a value of <code>email</code>. To learn how to customize your submission, read the <a href=\"./advanced/customizing-submission-data.md\">customizing submission data guide</a>.</p>\n<h2 id=\"using-the-facade\">Using the facade</h2>\n<p>Once the <code>DaffNewsletterFacade</code> has been set up in your component, it can now be used to send off your newsletter data. To do so, the facade will dispatch an action of type <code>DaffNewsletterSubscribe&lt;T&gt;()</code> with <code>T</code> being the type of submission your object you are using. In addition, it will also update three observable streams of <code>success$</code>, <code>error$</code>, and <code>loading$</code>. These can be used to enhance your application&#39;s UI.</p>\n<pre><code class=\"language-typescript\">import { DaffNewsletterSubscribe, DaffNewsletterSubmission, DaffNewsletterFacade } from &#39;@daffodil/newsletter&#39;;\n\nexport class NewsletterComponent implements OnInit{\n  ngOnInit(){\n    success$: Observable&lt;boolean&gt; = this.newsletterFacade.success$;\n    error$: Observable&lt;string&gt; = this.newsletterFacade.error$;\n    loading$: Observable&lt;boolean&gt; = this.newsletterFacade.loading$;\n  }\n\n\n  email:string = &quot;JohnDoe@email.com&quot;\n\n  constructor(public newsletterFacade: DaffNewsletterFacade) {\n  }\n  submitData() {\n      this.newsletterFacade.dispatch(new DaffNewsletterSubscribe&lt;DaffNewsletterSubmission&gt;(this.email));\n  }\n\n}</code></pre>\n<blockquote>\n<p>In this example, three observable streams are assigned from <code>newsletterFacade</code>. Then when <code>submitData</code> is called, the <code>newsletterFacade</code> will call its <code>dispatch</code> function which will send your data off to the backend and update the three observable streams.</p>\n</blockquote>\n<h1 id=\"live-demo\">Live Demo</h1>\n<p><a href=\"https://stackblitz.com/edit/daff-newsletter-example\">Checkout a live example of the <code>DaffNewsletter</code> library in action!</a></p>\n\n</div>\n"
}