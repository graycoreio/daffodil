{
  "id": "guides/authorizenet",
  "title": "@daffodil/authorizenet",
  "contents": "\n<div class=\"content\">\n<h1 id=\"daffodilauthorizenet\">@daffodil/authorizenet</h1>\n<p>Building and maintaining a model and code for an ecommerce store is complex and mentally taxing. <code>@daffodil/authorizenet</code>\nprovides clear interfaces, models, services, and redux state for the frontend of an ecommerce store so that you don&#39;t have to.</p>\n<p>The authorizenet module manages the acceptJs calls, state, selectors, and models for making a payment token request to authorize.net.</p>\n<h2 id=\"installation\">Installation</h2>\n<pre><code>npm install @daffodil/authorizenet</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p>This package does most of the setup for you. All you need to do is import the <code>DaffAuthorizeNetStateModule</code> into your app, and either provide your own <code>DaffAuthorizeNetDriver</code> or just use the default one by importing <code>DaffAuthorizeNetDriverModule.forRoot()</code>. To set your authorizenet authentication details, provide a <code>DaffAuthorizeNetConfig</code> through the <code>DaffAuthorizeNetConfigToken</code> injection token. </p>\n<p>Call the <code>DaffAuthorizeNetGenerateToken</code> action with a <code>DaffAuthorizeNetTokenRequest</code> to generate a payment nonce. Access the payment nonce through the <code>DaffAuthorizeNetFacade</code>.</p>\n<h2 id=\"extension-and-customization\">Extension and customization</h2>\n<p>If you feel like what our services return just won&#39;t cut it for your business needs, no problem! All of the reducers, effects, selectors, actions, and facades are 100% reusable with a customized model and service. If this module doesn&#39;t provide all of the fields you require on the payment info that is passed to the cart, you can inject a custom service through the DaffAuthorizeNetDriver token and extend the <code>DaffAuthorizeNetTokenRequest</code> model with a custom model.</p>\n\n</div>\n"
}