{
  "id": "guides/contact/overview",
  "title": "Daffodil Contact",
  "contents": "\n<div class=\"content\">\n<h1 id=\"daffodil-contact\">Daffodil Contact</h1>\n<p>The <code>@daffodil/contact</code> library allows you quickly to scaffold a contact form UI feature in an Angular application. It supports drivers for a variety of ecommerce platforms in order to make connecting your UI to your platform&#39;s contact feature easy. <!-- talk about supported platforms --></p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><p><a href=\"#getting-started\">Getting Started</a></p>\n<ul>\n<li><a href=\"#setting-up-your-appmodule\">Setting up your AppModule</a></li>\n<li><a href=\"#utilizing-inside-your-component\">Utilizing inside your Component</a></li>\n</ul>\n</li>\n<li><p><a href=\"#sending-a-contact-form-to-your-platform&#39;s-backend\">Sending a Contact Form</a></p>\n<ul>\n<li><a href=\"#using-the-facade\">Using the facade</a></li>\n</ul>\n</li>\n<li><p><a href=\"#live-demo\">Live Demo</a></p>\n</li>\n<li><p><a href=\"#supported-drivers\">Supported Drivers</a></p>\n</li>\n</ul>\n<h1 id=\"getting-started\">Getting Started</h1>\n<p>This overview assumes that you have already set up an Angular project and have gone through the <a href=\"./installation.md\">contact installation guide</a>. If you have not, we recommend you do that first.</p>\n<h2 id=\"setting-up-your-appmodule\">Setting up your AppModule</h2>\n<p>To get started, import the <code>DaffContactModule</code> in your app.module. Next, import <code>StoreModule.forRoot({})</code>, which will be relevant later on when utilizing the redux and state management features of the contact module.</p>\n<pre><code class=\"language-typescript\">@ngModule({\n  imports:[\n    StoreModule.forRoot({}),\n    DaffContactModule\n  ]\n})</code></pre>\n<h2 id=\"utilizing-inside-your-component\">Utilizing inside your component</h2>\n<p>The <code>DaffContactModule</code> provides a <code>DaffContactFacade</code> that wraps the complexities of the library into one place. This facade will handle sending your contact form to your application&#39;s backend and can also be utilized to build your UI with behaviors common to a contact.</p>\n<p>To inject the facade inside your component, include an instance of <code>DaffContactFacade</code> in your component&#39;s constructor.</p>\n<pre><code class=\"language-typescript\">export class contactComponent {\n  constructor(public contactFacade: DaffContactFacade) {}\n}</code></pre>\n<h1 id=\"sending-a-contact-form-to-your-platforms-backend\">Sending a Contact Form to your platform&#39;s backend</h1>\n<p>The <code>DaffContactFacade</code> is built generically, so feel free to create your own submission object that represents your app&#39;s contact form. A simple example is given below.</p>\n<pre><code class=\"language-typescript\">export interface ContactForm {\n  email: string;\n}</code></pre>\n<p>The <code>ContactForm</code> only contains a value of <code>email</code> and will represent the payload of data that is sent when a user submits their contact form.</p>\n<h2 id=\"using-the-facade\">Using the facade</h2>\n<p>Once the <code>DaffContactFacade</code> has been set up in your component, it can now be used to send off your contact data. To do so, use the <code>facade.dispatch()</code> method to dispatch a <code>DaffContactSubscribe&lt;T&gt;()</code> action with T being the type of submission object you are using. In addition, it will also update three observable streams of <code>success$</code>, <code>error$</code>, and <code>loading$</code>. These can be used to enhance your application&#39;s UI.</p>\n<pre><code class=\"language-typescript\">import { DaffContactSubscribe, DaffContactSubmission, DaffContactFacade } from &#39;@daffodil/contact&#39;;\n\nexport class contactComponent implements OnInit{\n  ngOnInit(){\n    success$: Observable&lt;boolean&gt; = this.contactFacade.success$;\n    error$: Observable&lt;string&gt; = this.contactFacade.error$;\n    loading$: Observable&lt;boolean&gt; = this.contactFacade.loading$;\n  }\n\n\n  email:string = &quot;JohnDoe@email.com&quot;\n\n  constructor(public contactFacade: DaffContactFacade){}\n  submitData(){\n    this.contactFacade.dispatch(new DaffContactSubscribe&lt;DaffContactSubmission&gt;(this.email));\n  }\n\n}</code></pre>\n<blockquote>\n<p>In this example, three observable streams are assigned from <code>contactFacade</code>. Then when <code>submitData</code> is called, the <code>contactFacade</code> will call its <code>dispatch</code> function which will send your data off to the backend and update the three observable streams.</p>\n</blockquote>\n<h1 id=\"live-demo\">Live Demo</h1>\n<p><a href=\"\">Checkout a live example of the <code>DaffContact</code> library in action!</a></p>\n<h1 id=\"supported-drivers\">Supported Drivers</h1>\n<ul>\n<li><a href=\"./drivers/in-memory-driver.md\">Daffodil&#39;s In-memory-driver</a></li>\n<li><a href=\"./drivers/hubspot-forms-driver.md\">Hubspot Form Driver</a></li>\n</ul>\n\n</div>\n"
}