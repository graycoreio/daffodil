{
  "id": "guides/paypal",
  "title": "@daffodil/paypal",
  "contents": "\n<div class=\"content\">\n<h1 id=\"daffodilpaypal\">@daffodil/paypal</h1>\n<p>Building and maintaining a model and code for an ecommerce store is complex and mentally taxing. <code>@daffodil/paypal</code>\nprovides clear interfaces, models, factories, services, and redux state for the frontend of an ecommerce store so that you don&#39;t have to.</p>\n<p>The paypal module manages the graphQL calls, state, selectors, and models for making a payment token request to paypal. Requests should be made through the <code>DaffGeneratePaypalExpressToken</code> action through the <code>DaffPaypalFacade</code>. Selection of the retrieved token and other pertinent fields (including navigation urls for paypal) can also be done through the <code>DaffPaypalFacade</code>.</p>\n<p>Right now, the <code>@daffodil/paypal</code> package supports an in-memory for developing locally (but this will not enable an entire workflow of the paypal process, because this requires a configured sandbox url) and a magento driver.</p>\n<h2 id=\"installation\">Installation</h2>\n<pre><code>npm install @daffodil/paypal</code></pre>\n<p>To use the <code>@daffodil/paypal</code> with an <code>in-memory-web-api</code>, import the <code>DaffPaypalInMemoryDriverModule.forRoot()</code> into your app.module. To use <code>@daffodil/paypal</code> with a magento backend, import the <code>DaffPaypalMagentoDriverModule.forRoot()</code> into your app.module. To set your paypal urls (the urls that are given to paypal to direct the customer back to your site), use the <code>DaffPaypalConfig</code> injection token. </p>\n<h2 id=\"extension-and-customization\">Extension and customization</h2>\n<p>If you feel like what our services return just won&#39;t cut it for your business needs, no problem! All of the reducers, effects, selectors, actions, and facades are 100% reusable with a customized model and service. If the <code>DaffPaypalTokenResponse</code> doesn&#39;t have all of the necessary fields you require, you&#39;ll need to provide three things.</p>\n<ol>\n<li>A custom service that implements the <code>DaffPaypalServiceInterface</code>. This should be injected with the <code>DaffPaypalDriver</code> injection token to override the default service.</li>\n<li>A custom service that implements the <code>DaffPaypalTransformerInterface</code>. This should be injected with the <code>DaffPaypalTransformer</code> injection token to override the default transformer.</li>\n<li>Define a model that extends the <code>DaffPaypalTokenResponse</code> and/or the <code>DaffPaypalTokenRequest</code>.\nThese steps should allow you to make supported requests to paypal in whatever way you&#39;d like, while still being compatible with the daffodil redux state, because all redux components are generically defined.</li>\n</ol>\n\n</div>\n"
}