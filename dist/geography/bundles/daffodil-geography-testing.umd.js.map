{"version":3,"file":"daffodil-geography-testing.umd.js","sources":["ng://@daffodil/geography/testing/factories/address.factory.ts","ng://@daffodil/geography/testing/factories/personal-address.factory.ts","ng://@daffodil/geography/testing/factories/country.factory.ts","ng://@daffodil/geography/testing/factories/subdivision.factory.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffAddress } from '@daffodil/geography';\n\nimport * as faker from 'faker/locale/en_US';\n\nexport class MockDaffAddress implements DaffAddress {\n  street = faker.address.streetName();\n  street2 = faker.address.secondaryAddress();\n  city = faker.address.city();\n  region = faker.address.stateAbbr();\n  postcode = faker.address.zipCode();\n  country = faker.address.zipCode();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAddressFactory extends DaffModelFactory<DaffAddress>{\n  constructor(){\n    super(MockDaffAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffPersonalAddress } from '@daffodil/geography';\n\nimport { MockDaffAddress } from './address.factory';\n\nexport class MockDaffPersonalAddress extends MockDaffAddress implements DaffPersonalAddress {\n  prefix = faker.name.prefix();\n  suffix = faker.name.suffix();\n  firstname = faker.name.firstName();\n  middlename = faker.name.firstName();\n  lastname = faker.name.lastName();\n  email = faker.internet.email();\n  telephone = faker.phone.phoneNumber();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffPersonalAddressFactory extends DaffModelFactory<DaffPersonalAddress>{\n  constructor() {\n    super(MockDaffPersonalAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCountry implements DaffCountry {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tname_en = faker.random.word();\n\talpha2 = faker.random.alphaNumeric(2);\n\talpha3 = faker.random.alphaNumeric(3);\n\tsubdivisions = [];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCountryFactory extends DaffModelFactory<DaffCountry> {\n  constructor() {\n    super(MockCountry);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffSubdivision } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockSubdivision implements DaffSubdivision {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tiso_3166_2 = faker.random.alphaNumeric(2);\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffSubdivisionFactory extends DaffModelFactory<DaffSubdivision> {\n  constructor() {\n    super(MockSubdivision);\n  }\n}\n"],"names":["faker.address","Injectable","DaffModelFactory","__extends","faker.name","faker.internet","faker.phone","faker.random"],"mappings":"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"}