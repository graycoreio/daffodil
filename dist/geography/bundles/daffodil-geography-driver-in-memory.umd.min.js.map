{"version":3,"sources":["ng://@daffodil/geography/driver/in-memory/drivers/geography.service.ts","ng://@daffodil/geography/driver/in-memory/drivers/geography-driver.module.ts","ng://@daffodil/geography/driver/in-memory/backend/geography.service.ts"],"names":["DaffInMemoryGeographyService","http","this","url","prototype","get","countryId","pipe","catchError","error","throwError","DaffCountryNotFoundError","map","result","list","Injectable","args","providedIn","HttpClient","DaffGeographyInMemoryDriverModule","forRoot","ngModule","providers","provide","DaffGeographyDriver","useExisting","NgModule","imports","CommonModule","DaffInMemoryBackendGeographyService","countryFactory","subdivisionFactory","_this","countries","createMany","forEach","country","subdivisions","createDb","reqInfo","seedData","utils","getJsonBody","req","createResponse$","body","id","getCountry","listCountries","status","STATUS","OK","collection","find","DaffCountryFactory","DaffSubdivisionFactory"],"mappings":"w8BAAA,IAAAA,EAAA,WAmBE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAFpBC,KAAAC,IAAM,wBAINH,EAAAI,UAAAC,IAAA,SAAIC,GACF,OAAOJ,KAAKD,KAAKI,IAAoBH,KAAKC,IAAG,IAAIG,GAAaC,KAC/DC,EAAAA,WAAU,SAAEC,GAAiB,OAAAC,EAAAA,WAAWC,EAAAA,4BACxCC,EAAAA,IAAG,SAACC,GAAU,OAAAA,MAIfb,EAAAI,UAAAU,KAAA,WACE,OAAOZ,KAAKD,KAAKI,IAAsBH,KAAKC,IAAG,0BAhBlDY,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAbLC,EAAAA,+IADT,GCAA,IAAAC,EAAA,WASA,SAAAA,KAiBA,OAXSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,oBACTC,YAAazB,0BAZtB0B,EAAAA,SAAQV,KAAA,CAAC,CACRW,QAAS,CACPC,EAAAA,kBAeJT,EA1BA,GCiBAU,EAAA,WAME,SAAAA,EACUC,EACAC,GAFV,IAAAC,EAAA9B,KACUA,KAAA4B,eAAAA,EACA5B,KAAA6B,mBAAAA,EAER7B,KAAK+B,UAAY/B,KAAK4B,eAAeI,WAAW,GAChDhC,KAAK+B,UAAUE,QAAO,SAACC,GAAW,OAAAA,EAAQC,aAAeL,EAAKD,mBAAmBG,WAAW,YAQ9FL,EAAAzB,UAAAkC,SAAA,SAASC,GACP,GAAIA,EAAS,KACLC,EAAWD,EAAQE,MAAMC,YAAYH,EAAQI,KAAKV,UACpDO,IACFtC,KAAK+B,UAAYO,GAIrB,MAAO,CACLP,UAAW/B,KAAK+B,YAOpBJ,EAAAzB,UAAAC,IAAA,SAAIkC,GAAJ,IAAAP,EAAA9B,KACE,OAAOqC,EAAQE,MAAMG,gBAAe,WAAO,MAAA,CACzCC,KAAMN,EAAQO,GAAKd,EAAKe,WAAWR,GAAWP,EAAKgB,cAAcT,GACjEU,OAAQC,EAAAA,OAAOC,OAIXtB,EAAAzB,UAAA2C,WAAR,SAAmBR,GACjB,OAAOA,EAAQa,WAAWC,KAAI,SAACjB,GAAW,OAAAA,EAAQU,KAAOP,EAAQO,MAG3DjB,EAAAzB,UAAA4C,cAAR,SAAsBT,GACpB,OAAOA,EAAQa,gCA/ClBrC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARZqC,EAAAA,0BACAC,EAAAA,wMAMF","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  DaffCountry,\n} from '@daffodil/geography';\nimport {\n  DaffGeographyServiceInterface,\n  DaffCountryNotFoundError\n} from '@daffodil/geography/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryGeographyService implements DaffGeographyServiceInterface<DaffCountry> {\n  url = '/api/countries';\n\n  constructor(private http: HttpClient) {}\n\n  get(countryId: DaffCountry['id']): Observable<DaffCountry> {\n    return this.http.get<DaffCountry>(`${this.url}/${countryId}`).pipe(\n\t\t\tcatchError((error: Error) => throwError(DaffCountryNotFoundError)),\n\t\t\tmap(result => result)\n\t\t);\n  }\n\n  list(): Observable<DaffCountry[]> {\n    return this.http.get<DaffCountry[]>(`${this.url}/`);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffGeographyDriver,\n} from '@daffodil/geography/driver';\n\nimport { DaffInMemoryGeographyService } from './geography.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffGeographyInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffGeographyInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffGeographyDriver,\n          useExisting: DaffInMemoryGeographyService\n        },\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfo,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffInMemoryDataServiceInterface } from '@daffodil/core/testing';\nimport { DaffCountry } from '@daffodil/geography';\nimport {\n  DaffCountryFactory,\n  DaffSubdivisionFactory\n} from '@daffodil/geography/testing';\n\n/**\n * An in-memory service that stubs out the backend services for getting countries.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendGeographyService implements InMemoryDbService, DaffInMemoryDataServiceInterface {\n  countries: DaffCountry[];\n\n  constructor(\n    private countryFactory: DaffCountryFactory,\n    private subdivisionFactory: DaffSubdivisionFactory\n  ) {\n    this.countries = this.countryFactory.createMany(5);\n    this.countries.forEach(country => country.subdivisions = this.subdivisionFactory.createMany(5))\n  }\n\n  /**\n   * Creates a fake database of countries for the geography inmemory backend service.\n   *\n   * @returns A fake database of an array of countries\n   */\n  createDb(reqInfo: RequestInfo): any {\n    if (reqInfo) {\n      const seedData = reqInfo.utils.getJsonBody(reqInfo.req).countries;\n      if (seedData) {\n        this.countries = seedData;\n      }\n    }\n\n    return {\n      countries: this.countries\n    };\n  }\n\n  /**\n   * Responds to GET requests.\n   */\n  get(reqInfo: RequestInfo): any {\n    return reqInfo.utils.createResponse$(() => ({\n      body: reqInfo.id ? this.getCountry(reqInfo) : this.listCountries(reqInfo),\n      status: STATUS.OK\n    }))\n  }\n\n  private getCountry(reqInfo: RequestInfo) {\n    return reqInfo.collection.find(country => country.id === reqInfo.id)\n  }\n\n  private listCountries(reqInfo: RequestInfo) {\n    return reqInfo.collection\n  }\n}\n"]}