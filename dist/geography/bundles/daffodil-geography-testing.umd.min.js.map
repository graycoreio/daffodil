{"version":3,"sources":["ng://@daffodil/geography/testing/factories/address.factory.ts","ng://@daffodil/geography/testing/factories/personal-address.factory.ts","ng://@daffodil/geography/testing/factories/country.factory.ts","ng://@daffodil/geography/testing/factories/subdivision.factory.ts"],"names":["this","street","faker.address","streetName","street2","secondaryAddress","city","region","stateAbbr","postcode","zipCode","country","DaffAddressFactory","_super","call","MockDaffAddress","__extends","Injectable","args","providedIn","DaffModelFactory","MockDaffPersonalAddress","_this","apply","arguments","prefix","faker.name","suffix","firstname","firstName","middlename","lastname","lastName","email","faker.internet","telephone","faker.phone","phoneNumber","DaffPersonalAddressFactory","id","String","faker.random","number","min","max","name","word","name_en","alpha2","alphaNumeric","alpha3","subdivisions","DaffCountryFactory","MockCountry","iso_3166_2","DaffSubdivisionFactory","MockSubdivision"],"mappings":"00BAOA,WACEA,KAAAC,OAASC,EAAAA,QAAcC,aACvBH,KAAAI,QAAUF,EAAAA,QAAcG,mBACxBL,KAAAM,KAAOJ,EAAAA,QAAcI,OACrBN,KAAAO,OAASL,EAAAA,QAAcM,YACvBR,KAAAS,SAAWP,EAAAA,QAAcQ,UACzBV,KAAAW,QAAUT,EAAAA,QAAcQ,WAG1B,IAAAE,EAAA,SAAAC,GAIE,SAAAD,WACEC,EAAAC,KAAAd,KAAMe,IAAgBf,YAFcgB,EAAAJ,EAAAC,uBAHvCI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJADd,CAGwCC,EAAAA,iYCXxC,SAAAC,IAAA,IAAAC,EAAA,OAAAT,GAAAA,EAAAU,MAAAvB,KAAAwB,YAAAxB,YACEsB,EAAAG,OAASC,EAAAA,KAAWD,SACpBH,EAAAK,OAASD,EAAAA,KAAWC,SACpBL,EAAAM,UAAYF,EAAAA,KAAWG,YACvBP,EAAAQ,WAAaJ,EAAAA,KAAWG,YACxBP,EAAAS,SAAWL,EAAAA,KAAWM,WACtBV,EAAAW,MAAQC,EAAAA,SAAeD,QACvBX,EAAAa,UAAYC,EAAAA,MAAYC,gBAC1B,OAR6CrB,EAAAA,EAAAA,GAQ7CK,GAR6CN,GAU7C,IAAAuB,EAAA,SAAAzB,GAIE,SAAAyB,WACEzB,EAAAC,KAAAd,KAAMqB,IAAwBrB,YAFcgB,EAAAA,EAAAA,uBAH/CC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJADd,CAGgDC,EAAAA,qXCdhD,WACEpB,KAAAuC,GAAKC,OAAOC,EAAAA,OAAaC,OAAO,CAACC,IAAK,EAAGC,IAAK,OAC9C5C,KAAA6C,KAAOJ,EAAAA,OAAaK,OACrB9C,KAAA+C,QAAUN,EAAAA,OAAaK,OACvB9C,KAAAgD,OAASP,EAAAA,OAAaQ,aAAa,GACnCjD,KAAAkD,OAAST,EAAAA,OAAaQ,aAAa,GACnCjD,KAAAmD,aAAe,IAGhB,IAAAC,EAAA,SAAAvC,GAIE,SAAAuC,WACEvC,EAAAC,KAAAd,KAAMqD,IAAYrD,YAFkBgB,EAAAA,EAAAA,uBAHvCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJADd,CAGwCC,EAAAA,qXCZxC,WACEpB,KAAAuC,GAAKC,OAAOC,EAAAA,OAAaC,OAAO,CAACC,IAAK,EAAGC,IAAK,OAC9C5C,KAAA6C,KAAOJ,EAAAA,OAAaK,OACrB9C,KAAAsD,WAAab,EAAAA,OAAaQ,aAAa,IAGxC,IAAAM,EAAA,SAAA1C,GAIE,SAAA0C,WACE1C,EAAAC,KAAAd,KAAMwD,IAAgBxD,YAFkBgB,EAAAA,EAAAA,uBAH3CC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJADd,CAG4CC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffAddress } from '@daffodil/geography';\n\nimport * as faker from 'faker/locale/en_US';\n\nexport class MockDaffAddress implements DaffAddress {\n  street = faker.address.streetName();\n  street2 = faker.address.secondaryAddress();\n  city = faker.address.city();\n  region = faker.address.stateAbbr();\n  postcode = faker.address.zipCode();\n  country = faker.address.zipCode();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAddressFactory extends DaffModelFactory<DaffAddress>{\n  constructor(){\n    super(MockDaffAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffPersonalAddress } from '@daffodil/geography';\n\nimport { MockDaffAddress } from './address.factory';\n\nexport class MockDaffPersonalAddress extends MockDaffAddress implements DaffPersonalAddress {\n  prefix = faker.name.prefix();\n  suffix = faker.name.suffix();\n  firstname = faker.name.firstName();\n  middlename = faker.name.firstName();\n  lastname = faker.name.lastName();\n  email = faker.internet.email();\n  telephone = faker.phone.phoneNumber();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffPersonalAddressFactory extends DaffModelFactory<DaffPersonalAddress>{\n  constructor() {\n    super(MockDaffPersonalAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCountry implements DaffCountry {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tname_en = faker.random.word();\n\talpha2 = faker.random.alphaNumeric(2);\n\talpha3 = faker.random.alphaNumeric(3);\n\tsubdivisions = [];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCountryFactory extends DaffModelFactory<DaffCountry> {\n  constructor() {\n    super(MockCountry);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffSubdivision } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockSubdivision implements DaffSubdivision {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tiso_3166_2 = faker.random.alphaNumeric(2);\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffSubdivisionFactory extends DaffModelFactory<DaffSubdivision> {\n  constructor() {\n    super(MockSubdivision);\n  }\n}\n"]}