{"version":3,"file":"daffodil-geography-state.umd.js","sources":["ng://@daffodil/geography/state/reducers/geography/geography-initial-state.ts","ng://@daffodil/geography/state/actions/geography.actions.ts","ng://@daffodil/geography/state/reducers/geography/geography.reducer.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-adapter.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-initial-state.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities.reducer.ts","ng://@daffodil/geography/state/reducers/geography-reducers.ts","ng://@daffodil/geography/state/reducers/geography-store-feature-key.ts","ng://@daffodil/geography/state/selectors/geography-feature.selector.ts","ng://@daffodil/geography/state/selectors/country-entities.selector.ts","ng://@daffodil/geography/state/selectors/geography.selector.ts","ng://@daffodil/geography/state/selectors/geography-all.selector.ts","ng://@daffodil/geography/state/facades/geography/geography.facade.ts","ng://@daffodil/geography/state/effects/geography.effects.ts","ng://@daffodil/geography/state/geography-state.module.ts"],"sourcesContent":["import { DaffGeographyReducerState } from './geography-state.interface';\n\nexport const daffGeographyInitialState: DaffGeographyReducerState = {\n  loading: false,\n  errors: [],\n};\n","import { Action } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nexport enum DaffGeographyActionTypes {\n  CountryLoadAction = '[DaffGeography] Country Load Action',\n  CountryLoadSuccessAction = '[DaffGeography] Country Load Success Action',\n  CountryLoadFailureAction = '[DaffGeography] Country Load Failure Action',\n  CountryListAction = '[DaffGeography] Country List Action',\n  CountryListSuccessAction = '[DaffGeography] Country List Success Action',\n  CountryListFailureAction = '[DaffGeography] Country List Failure Action',\n}\n\nexport class DaffCountryLoad<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadAction;\n\n  constructor(public payload: T['id']) {}\n}\n\nexport class DaffCountryLoadSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadSuccessAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffCountryLoadFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport class DaffCountryList implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListAction;\n}\n\nexport class DaffCountryListSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListSuccessAction;\n\n  constructor(public payload: T[]) {}\n}\n\nexport class DaffCountryListFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport type DaffGeographyActions<T extends DaffCountry> =\n  | DaffCountryLoad<T>\n  | DaffCountryLoadSuccess<T>\n  | DaffCountryLoadFailure\n  | DaffCountryList\n  | DaffCountryListSuccess<T>\n  | DaffCountryListFailure;\n","import { daffGeographyInitialState } from './geography-initial-state';\nimport { DaffGeographyReducerState } from './geography-state.interface';\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { DaffCountry } from '@daffodil/geography';\n\nexport function daffGeographyReducer<T extends DaffCountry>(\n  state = daffGeographyInitialState,\n  action: DaffGeographyActions<T>\n): DaffGeographyReducerState {\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadAction:\n    case DaffGeographyActionTypes.CountryListAction:\n      return { ...state, loading: true };\n\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return {\n        ...state,\n        errors: [],\n        loading: false,\n      };\n\n    case DaffGeographyActionTypes.CountryLoadFailureAction:\n    case DaffGeographyActionTypes.CountryListFailureAction:\n      return {\n        ...state,\n        errors: [\n          ...state.errors,\n          action.payload\n        ],\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\n/**\n * Country Adapter for changing/overwriting entity state.\n */\nexport const getCountryAdapter = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): EntityAdapter<T> =>\n    cache = cache || createEntityAdapter<T>();\n})();\n","import { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\n\n/**\n * Initial state for country entity state.\n */\nexport const daffCountryEntitiesInitialState: DaffCountryEntityState<any> = getCountryAdapter().getInitialState();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\nimport { daffCountryEntitiesInitialState } from './country-entities-initial-state';\n\n/**\n * Reducer function that catches actions and changes/overwrites country entities state.\n */\nexport function daffCountryEntitiesReducer<T extends DaffCountry = DaffCountry>(\n  state = daffCountryEntitiesInitialState,\n  action: DaffGeographyActions<T>\n): DaffCountryEntityState<T> {\n  const adapter = getCountryAdapter<T>();\n\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n      return adapter.upsertOne({\n        ...action.payload,\n        loaded: true\n      }, state);\n\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return adapter.upsertMany(\n        action.payload.map(country => ({\n          ...country,\n          // defer to the loaded state of the country already in state (if it exists) but init field to false if it does not\n          loaded: (state.entities[country.id] && state.entities[country.id].loaded) || false,\n          // if the country coming in has no subdivisions and the same country in state does, use the subdivisions in state\n          subdivisions: country.subdivisions.length === 0 && state.entities[country.id] && state.entities[country.id].subdivisions.length > 0\n            ? state.entities[country.id].subdivisions\n            : country.subdivisions\n        })),\n        state\n      );\n\n    default:\n      return state;\n  }\n}\n","import { daffGeographyReducer } from './geography/geography.reducer';\nimport { daffCountryEntitiesReducer } from './country-entities/country-entities.reducer';\n\nexport const daffGeographyReducers = {\n  geography: daffGeographyReducer,\n  countries: daffCountryEntitiesReducer\n}\n","export const DAFF_GEOGRAPHY_STORE_FEATURE_KEY = 'daffGeography';\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from '../reducers/public_api';\n\nexport interface DaffGeographyFeatureSelector<T extends DaffCountry = DaffCountry> {\n  selectGeographyFeatureState: MemoizedSelector<object, DaffGeographyFeatureState<T>>\n}\n\nexport const getDaffGeographyFeatureStateSelector = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyFeatureSelector<T> =>\n    cache = cache || {\n      selectGeographyFeatureState: createFeatureSelector<DaffGeographyFeatureState<T>>(DAFF_GEOGRAPHY_STORE_FEATURE_KEY)\n    }\n})();\n","import { createSelector, MemoizedSelector, MemoizedSelectorWithProps } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport {\n  DaffCountry,\n} from '@daffodil/geography';\n\nimport {\n  getCountryAdapter,\n  DaffCountryEntityState\n} from '../reducers/public_api';\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffCountryEntitySelectors<T extends DaffCountry> {\n  selectCountryEntitiesState: MemoizedSelector<object, DaffCountryEntityState<T>>;\n  selectCountryIds: MemoizedSelector<object, string[] | number[]>;\n  selectCountryEntities: MemoizedSelector<object, Dictionary<T>>;\n  selectAllCountries: MemoizedSelector<object, T[]>;\n  selectCountryTotal: MemoizedSelector<object, number>;\n  selectCountry: MemoizedSelectorWithProps<object, {id: string | number}, T>;\n  selectCountrySubdivisions: MemoizedSelectorWithProps<object, {id: string | number}, T['subdivisions']>;\n  selectIsCountryFullyLoaded: MemoizedSelector<object, boolean>;\n}\n\nconst createCountryEntitySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectCountryEntitiesState = createSelector(\n    selectGeographyFeatureState,\n    state => state.countries\n  )\n  const { selectIds, selectEntities, selectAll, selectTotal } = getCountryAdapter<T>().getSelectors(selectCountryEntitiesState);\n\n  const selectCountry = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => countries[props.id]\n  )\n\n  const selectCountrySubdivisions = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country ? country.subdivisions : []\n    }\n  )\n\n  const selectIsCountryFullyLoaded = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props: {id: T['id']}) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country && country.loaded\n    }\n  );\n\n  return {\n    selectCountryEntitiesState,\n    /**\n     * Selector for country IDs.\n     */\n    selectCountryIds: selectIds,\n    /**\n     * Selector for country entities.\n     */\n    selectCountryEntities: selectEntities,\n    /**\n     * Selector for all countries.\n     */\n    selectAllCountries: selectAll,\n    /**\n     * Selector for total number of countries.\n     */\n    selectCountryTotal: selectTotal,\n    /**\n     * Selector for a specific country.\n     */\n    selectCountry,\n    /**\n     * Selector for a specific country's subdivisions.\n     */\n    selectCountrySubdivisions,\n    /**\n     * Selector for checking if a country has been fully loaded.\n     * If true, then a country's subdivisions will be populated if any exist.\n     */\n    selectIsCountryFullyLoaded\n  }\n}\n\nexport const getDaffCountryEntitySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry>(): DaffCountryEntitySelectors<T> =>\n    cache = cache || createCountryEntitySelectors<T>()\n})();\n\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\nimport {\n  DaffGeographyReducerState,\n} from '../reducers/public_api';\n\nexport interface DaffGeographySelectors {\n  selectGeographyState: MemoizedSelector<object, DaffGeographyReducerState>;\n  selectGeographyLoading: MemoizedSelector<object, boolean>;\n  selectGeographyErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createGeographySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectGeographyState = createSelector(\n    selectGeographyFeatureState,\n    state => state.geography\n  );\n\n  const selectGeographyLoading = createSelector(\n    selectGeographyState,\n    state => state.loading\n  );\n\n  const selectGeographyErrors = createSelector(\n    selectGeographyState,\n    state => state.errors\n  );\n\n  return {\n    selectGeographyState,\n    selectGeographyLoading,\n    selectGeographyErrors\n  }\n}\n\nexport const getGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographySelectors =>\n    cache = cache || createGeographySelectors<T>()\n})();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffCountryEntitySelectors, getDaffCountryEntitySelectors } from './country-entities.selector';\nimport { DaffGeographySelectors, getGeographySelectors } from './geography.selector';\nimport { DaffGeographyFeatureSelector, getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffGeographyAllSelectors<T extends DaffCountry = DaffCountry> extends\n  DaffCountryEntitySelectors<T>,\n  DaffGeographySelectors,\n  DaffGeographyFeatureSelector<T> {}\n\nexport const getDaffGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyAllSelectors<T> =>\n    cache = cache || {\n      ...getGeographySelectors<T>(),\n      ...getDaffCountryEntitySelectors<T>(),\n      ...getDaffGeographyFeatureStateSelector<T>()\n    }\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Action, Store, select } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState } from '../../reducers/public_api';\nimport {\n  getDaffGeographySelectors, DaffGeographyAllSelectors\n} from '../../selectors/public_api';\nimport { DaffGeographyFacadeInterface } from './geography-facade.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffGeographyFacade<T extends DaffCountry = DaffCountry> implements DaffGeographyFacadeInterface<T> {\n  loading$: Observable<boolean>;\n  errors$: Observable<string[]>;\n\n  countries$: Observable<T[]>;\n  countryIds$: Observable<(string | number)[]>;\n  countryCount$: Observable<number>;\n  countryEntities$: Observable<Dictionary<T>>;\n\n  private _selectCountry: DaffGeographyAllSelectors<T>['selectCountry'];\n  private _selectCountrySubdivisions: DaffGeographyAllSelectors<T>['selectCountrySubdivisions'];\n  private _selectIsCountryFullyLoaded: DaffGeographyAllSelectors<T>['selectIsCountryFullyLoaded'];\n\n  constructor(private store: Store<DaffGeographyFeatureState<T>>) {\n    const {\n      selectCountryIds,\n      selectCountryEntities,\n      selectAllCountries,\n      selectCountryTotal,\n      selectGeographyLoading,\n      selectGeographyErrors,\n      selectCountry,\n      selectCountrySubdivisions,\n      selectIsCountryFullyLoaded\n    } = getDaffGeographySelectors<T>();\n\n    this._selectCountry = selectCountry;\n    this._selectCountrySubdivisions = selectCountrySubdivisions;\n    this._selectIsCountryFullyLoaded = selectIsCountryFullyLoaded;\n\n    this.loading$ = this.store.pipe(select(selectGeographyLoading));\n    this.errors$ = this.store.pipe(select(selectGeographyErrors));\n\n    this.countries$ = this.store.pipe(select(selectAllCountries));\n    this.countryIds$ = this.store.pipe(select(selectCountryIds));\n    this.countryCount$ = this.store.pipe(select(selectCountryTotal));\n    this.countryEntities$ = this.store.pipe(select(selectCountryEntities));\n  }\n\n  getCountry(id: T['id']): Observable<T> {\n    return this.store.pipe(select(this._selectCountry, { id }))\n  }\n\n  getCountrySubdivisions(id: T['id']): Observable<T['subdivisions']> {\n    return this.store.pipe(select(this._selectCountrySubdivisions, { id }))\n  }\n\n  isCountryFullyLoaded(id: T['id']): Observable<boolean> {\n    return this.store.pipe(select(this._selectIsCountryFullyLoaded, { id }))\n  }\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { DaffCountry } from '@daffodil/geography';\nimport { DaffGeographyServiceInterface, DaffGeographyDriver } from '@daffodil/geography/driver';\n\nimport {\n  DaffGeographyActionTypes,\n  DaffCountryLoad,\n  DaffCountryLoadSuccess,\n  DaffCountryLoadFailure,\n  DaffCountryList,\n  DaffCountryListSuccess,\n  DaffCountryListFailure,\n} from '../actions/public_api';\n\n@Injectable()\nexport class DaffGeographyEffects<T extends DaffCountry> {\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffGeographyDriver) private driver: DaffGeographyServiceInterface<T>,\n  ) {}\n\n  @Effect()\n  get$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryLoadAction),\n    switchMap((action: DaffCountryLoad<T>) => this.driver.get(action.payload).pipe(\n      map(resp => new DaffCountryLoadSuccess(resp)),\n      catchError(error => of(new DaffCountryLoadFailure('Failed to load country')))\n    )),\n  )\n\n  @Effect()\n  list$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryListAction),\n    switchMap((action: DaffCountryList) => this.driver.list().pipe(\n      map(resp => new DaffCountryListSuccess(resp)),\n      catchError(error => of(new DaffCountryListFailure('Failed to list the countries')))\n    ))\n  )\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DaffGeographyEffects } from './effects/geography.effects';\nimport { daffGeographyReducers, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from './reducers/public_api';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(DAFF_GEOGRAPHY_STORE_FEATURE_KEY, daffGeographyReducers),\n    EffectsModule.forFeature([\n      DaffGeographyEffects,\n    ]),\n  ]\n})\nexport class DaffGeographyStateModule {}\n"],"names":["createEntityAdapter","createFeatureSelector","createSelector","store","select","Injectable","Store","ofType","switchMap","map","catchError","of","Actions","Inject","DaffGeographyDriver","Effect","NgModule","StoreModule","EffectsModule"],"mappings":"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"}