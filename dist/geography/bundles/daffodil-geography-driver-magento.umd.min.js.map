{"version":3,"sources":["ng://@daffodil/geography/driver/magento/transforms/responses/subdivision.service.ts","ng://@daffodil/geography/driver/magento/transforms/responses/country.service.ts","ng://@daffodil/geography/driver/magento/queries/fragments/country.ts","ng://@daffodil/geography/driver/magento/queries/fragments/region.ts","ng://@daffodil/geography/driver/magento/queries/get-countries.ts","ng://@daffodil/geography/driver/magento/queries/get-country.ts","ng://@daffodil/geography/driver/magento/validators/get-countries.ts","ng://@daffodil/geography/driver/magento/errors/map.ts","ng://@daffodil/geography/driver/magento/errors/codes.ts","ng://@daffodil/geography/driver/magento/errors/transform.ts","ng://@daffodil/geography/driver/magento/geography.service.ts","ng://@daffodil/geography/driver/magento/geography-driver.module.ts"],"names":["DaffMagentoSubdivisionTransformer","prototype","transform","region","__assign","magento_region","id","String","name","iso_3166_2","code","Injectable","args","providedIn","DaffMagentoCountryTransformer","subdivisionTransformer","this","transformSubdivisions","regions","_this","map","country","__assign$1","magento_country","subdivisions","available_regions","full_name_locale","name_en","full_name_english","alpha2","two_letter_abbreviation","alpha3","three_letter_abbreviation","countryFragment","gql","templateObject_1","__makeTemplateObject","regionFragment","templateObject_1$1","__makeTemplateObject$1","getCountries","templateObject_1$2","__makeTemplateObject$2","getCountry","templateObject_1$3","__makeTemplateObject$3","validateGetCountriesResponse","response","data","countries","DaffGeographyInvalidAPIResponseError","DaffGeographyMagentoErrorMap","_a","DaffCountryNotFoundError","transformMagentoGeographyError","error","daffTransformMagentoError","DaffGeographyMagentoService","apollo","countryTransformer","list","query","pipe","result","catchError","err","throwError","get","countryId","variables","Apollo","DaffGeographyMagentoDriverModule","forRoot","ngModule","providers","provide","DaffGeographyDriver","useExisting","NgModule","imports","CommonModule"],"mappings":"koCASAA,EAAA,WAAA,SAAAA,YAOEA,EAAAC,UAAAC,UAAA,SAAUC,GACR,OAAOA,EAAMC,EACR,CAACC,eAAgBF,GAAO,CAE3BG,GAAIC,OAAOJ,EAAOG,IAClBE,KAAML,EAAOK,KACbC,WAAYN,EAAOO,OACjB,0BAdPC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,uOCCAC,EAAA,WAIE,SAAAA,EAAmBC,GAAAC,KAAAD,uBAAAA,SAEXD,EAAAb,UAAAgB,sBAAR,SAA8BC,GAA9B,IAAAC,EAAAH,KACE,OAAOE,EAAQE,IAAG,SAACjB,GAAU,OAAAgB,EAAKJ,uBAAuBb,UAAUC,MAMrEW,EAAAb,UAAAC,UAAA,SAAUmB,GACR,OAAOA,EAAOC,EACT,CAACC,gBAAiBF,GAAQ,CAE7BG,aAAcR,KAAKC,sBAAsBI,EAAQI,mBAAqB,IAEtEnB,GAAIe,EAAQf,GACZE,KAAMa,EAAQK,iBACdC,QAASN,EAAQO,kBACjBC,OAAQR,EAAQS,wBAChBC,OAAQV,EAAQW,4BACd,0BAxBPrB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPLb,2HAMT,mJCRaiC,EAAkBC,EAAGC,IAAAA,EAAAC,EAAA,CAAA,6JAAA,CAAA,kSCArBC,EAAiBH,EAAGI,IAAAA,EAAAC,EAAA,CAAA,sEAAA,CAAA,2MCEpBC,EAAeN,EAAGO,IAAAA,EAAAC,EAAA,CAAA,8EAAA,MAAA,CAAA,8EAMZ,QAAfT,qICNSU,EAAaT,EAAGU,IAAAA,EAAAC,EAAA,CAAA,sKAAA,OAAA,MAAA,CAAA,sKASV,OACD,QADdZ,EACAI,GCRSS,EAA4B,SAAIC,GAC3C,GAAIA,EAASC,KAAKC,UAChB,OAAOF,EAEP,MAAM,IAAIG,EAAAA,qCAAqC,uECLtCC,IAA4BC,EAAA,ICJpB,0BDKkCC,EAAAA,4BEFvD,SAAgBC,EAA+BC,GAC7C,OAAOC,EAAAA,0BAA0BD,EAAOJ,GCc1C,IAAAM,EAAA,WAIE,SAAAA,EACUC,EACDC,GADC3C,KAAA0C,OAAAA,EACD1C,KAAA2C,mBAAAA,SAGTF,EAAAxD,UAAA2D,KAAA,WAAA,IAAAzC,EAAAH,KACE,OAAOA,KAAK0C,OAAOG,MAAmC,CACpDA,MAAOrB,IACNsB,KACD1C,EAAAA,IAAI0B,GACJ1B,EAAAA,IAAG,SAAC2C,GAAU,OAAAA,EAAOf,KAAKC,UAAU7B,IAAG,SAACC,GAAW,OAAAF,EAAKwC,mBAAmBzD,UAAUmB,OACrF2C,EAAAA,WAAU,SAACC,GAAO,OAAAC,EAAAA,WAAWZ,EAA+BW,QAIhER,EAAAxD,UAAAkE,IAAA,SAAIC,GAAJ,IAAAjD,EAAAH,KACE,OAAOA,KAAK0C,OAAOG,MAAiC,CAClDA,MAAOlB,EACP0B,UAAW,CACTD,UAASA,KAEVN,KACD1C,EAAAA,IAAG,SAAC2C,GAAU,OAAA5C,EAAKwC,mBAAmBzD,UAAU6D,EAAOf,KAAK3B,WAC5D2C,EAAAA,WAAU,SAACC,GAAO,OAAAC,EAAAA,WAAWZ,EAA+BW,4BA3BjEtD,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAnBLyD,EAAAA,cAQAxD,gJAUT,GCnBA,IAAAyD,EAAA,WAOA,SAAAA,KAiBA,OAXSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,oBACTC,YAAapB,0BAZtBqB,EAAAA,SAAQlE,KAAA,CAAC,CACRmE,QAAS,CACPC,EAAAA,kBAeJT,EAxBA","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffSubdivision } from '@daffodil/geography';\n\nimport { MagentoRegion } from '../../models/responses/region';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoSubdivisionTransformer {\n  /**\n   * Transforms the MagentoRegion from the magento region query into a DaffSubdivision.\n   */\n  transform(region: MagentoRegion): DaffSubdivision {\n    return region ? {\n      ...{magento_region: region},\n\n      id: String(region.id),\n      name: region.name,\n      iso_3166_2: region.code\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffMagentoSubdivisionTransformer } from './subdivision.service';\nimport { MagentoCountry } from '../../models/responses/country';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCountryTransformer {\n  constructor(public subdivisionTransformer: DaffMagentoSubdivisionTransformer) {}\n\n  private transformSubdivisions(regions: MagentoCountry['available_regions']): DaffCountry['subdivisions'] {\n    return regions.map(region => this.subdivisionTransformer.transform(region))\n  }\n\n  /**\n   * Transforms the MagentoCountry from the magento country query into a DaffCountry.\n   */\n  transform(country: MagentoCountry): DaffCountry {\n    return country ? {\n      ...{magento_country: country},\n\n      subdivisions: this.transformSubdivisions(country.available_regions || []),\n\n      id: country.id,\n      name: country.full_name_locale,\n      name_en: country.full_name_english,\n      alpha2: country.two_letter_abbreviation,\n      alpha3: country.three_letter_abbreviation,\n    } : null\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const countryFragment = gql`\n  fragment country on Country {\n    id\n    full_name_english\n    full_name_locale\n    three_letter_abbreviation\n    two_letter_abbreviation\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const regionFragment = gql`\n  fragment region on Region {\n    code\n    id\n    name\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { countryFragment } from './fragments/public_api';\n\nexport const getCountries = gql`\n  query GetCountries {\n    countries {\n      ...country\n    }\n  }\n  ${countryFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { countryFragment, regionFragment } from './fragments/public_api';\n\nexport const getCountry = gql`\n  query GetCountry($countryId: String!) {\n    country(id: $countryId) {\n      ...country\n      available_regions {\n        ...region\n      }\n    }\n  }\n  ${countryFragment}\n  ${regionFragment}\n`;\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { DaffGeographyInvalidAPIResponseError } from '@daffodil/geography/driver';\n\nimport { MagentoGetCountriesResponse } from '../queries/public_api';\n\nexport const validateGetCountriesResponse = (response: ApolloQueryResult<MagentoGetCountriesResponse>) => {\n  if (response.data.countries) {\n    return response\n  } else {\n    throw new DaffGeographyInvalidAPIResponseError('Get countries response does not contain a valid list of countries.')\n  }\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffCountryNotFoundError } from '@daffodil/geography/driver';\n\nimport { MagentoGeographyGraphQlErrorCode } from './codes';\n\nexport const DaffGeographyMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoGeographyGraphQlErrorCode.COUNTRY_NOT_FOUND]: DaffCountryNotFoundError,\n};\n","export enum MagentoGeographyGraphQlErrorCode {\n\tCOUNTRY_NOT_FOUND = 'graphql-no-such-entity',\n}\n","import { daffTransformMagentoError } from '@daffodil/driver/magento';\n\nimport { DaffGeographyMagentoErrorMap } from './map';\n\nexport function transformMagentoGeographyError(error: any) {\n  return daffTransformMagentoError(error, DaffGeographyMagentoErrorMap)\n}\n","import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffCountry } from '@daffodil/geography';\nimport { DaffGeographyServiceInterface } from '@daffodil/geography/driver';\n\nimport { DaffMagentoCountryTransformer } from './transforms/responses/country.service';\nimport { getCountries, MagentoGetCountriesResponse } from './queries/public_api';\nimport { getCountry } from './queries/get-country';\nimport { MagentoGetCountryResponse } from './queries/responses/get-country';\nimport { validateGetCountriesResponse } from './validators/public_api';\nimport { transformMagentoGeographyError } from './errors/transform';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffGeographyMagentoService implements DaffGeographyServiceInterface<DaffCountry> {\n  constructor(\n    private apollo: Apollo,\n    public countryTransformer: DaffMagentoCountryTransformer,\n  ) {}\n\n  list(): Observable<DaffCountry[]> {\n    return this.apollo.query<MagentoGetCountriesResponse>({\n      query: getCountries,\n    }).pipe(\n      map(validateGetCountriesResponse),\n      map(result => result.data.countries.map(country => this.countryTransformer.transform(country))),\n      catchError(err => throwError(transformMagentoGeographyError(err)))\n    );\n  }\n\n  get(countryId: DaffCountry['id']): Observable<DaffCountry> {\n    return this.apollo.query<MagentoGetCountryResponse>({\n      query: getCountry,\n      variables: {\n        countryId\n      }\n    }).pipe(\n      map(result => this.countryTransformer.transform(result.data.country)),\n      catchError(err => throwError(transformMagentoGeographyError(err)))\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffGeographyDriver } from '@daffodil/geography/driver'\n\nimport { DaffGeographyMagentoService } from './geography.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffGeographyMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffGeographyMagentoDriverModule> {\n    return {\n      ngModule: DaffGeographyMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffGeographyDriver,\n          useExisting: DaffGeographyMagentoService\n        }\n      ]\n    };\n  }\n}\n"]}