{"version":3,"sources":["ng://@daffodil/geography/state/reducers/geography/geography-initial-state.ts","ng://@daffodil/geography/state/actions/geography.actions.ts","ng://@daffodil/geography/state/reducers/geography/geography.reducer.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-adapter.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-initial-state.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities.reducer.ts","ng://@daffodil/geography/state/reducers/geography-reducers.ts","ng://@daffodil/geography/state/selectors/geography-feature.selector.ts","ng://@daffodil/geography/state/reducers/geography-store-feature-key.ts","ng://@daffodil/geography/state/selectors/country-entities.selector.ts","ng://@daffodil/geography/state/selectors/geography.selector.ts","ng://@daffodil/geography/state/selectors/geography-all.selector.ts","ng://@daffodil/geography/state/facades/geography/geography.facade.ts","ng://@daffodil/geography/state/effects/geography.effects.ts","ng://@daffodil/geography/state/geography-state.module.ts"],"names":["daffGeographyInitialState","loading","errors","CountryLoadAction","CountryLoadSuccessAction","CountryLoadFailureAction","CountryListAction","CountryListSuccessAction","CountryListFailureAction","payload","this","type","DaffGeographyActionTypes","DaffCountryLoadFailure","DaffCountryList","DaffCountryListFailure","daffGeographyReducer","state","action","__assign","__spread","cache","getCountryAdapter","createEntityAdapter","daffCountryEntitiesInitialState","getInitialState","daffCountryEntitiesReducer","adapter","upsertOne","__assign$1","loaded","upsertMany","map","country","entities","id","subdivisions","length","daffGeographyReducers","geography","countries","getDaffGeographyFeatureStateSelector","selectGeographyFeatureState","createFeatureSelector","createCountryEntitySelectors","selectCountryEntitiesState","createSelector","_a","getSelectors","selectIds","selectEntities","selectAll","selectTotal","selectCountry","props","selectCountrySubdivisions","projector","selectIsCountryFullyLoaded","selectCountryIds","selectCountryEntities","selectAllCountries","selectCountryTotal","getDaffCountryEntitySelectors","createGeographySelectors","selectGeographyState","selectGeographyLoading","selectGeographyErrors","getGeographySelectors","getDaffGeographySelectors","__assign$2","DaffGeographyFacade","store","_selectCountry","_selectCountrySubdivisions","_selectIsCountryFullyLoaded","loading$","pipe","select","errors$","countries$","countryIds$","countryCount$","countryEntities$","prototype","getCountry","getCountrySubdivisions","isCountryFullyLoaded","dispatch","Injectable","args","providedIn","Store","DaffGeographyEffects","actions$","driver","_this","get$","ofType","switchMap","get","resp","DaffCountryLoadSuccess","catchError","error","of","list$","list","DaffCountryListSuccess","Actions","Inject","DaffGeographyDriver","__decorate","Effect","DaffGeographyStateModule","NgModule","imports","StoreModule","forFeature","EffectsModule"],"mappings":"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","sourcesContent":["import { DaffGeographyReducerState } from './geography-state.interface';\n\nexport const daffGeographyInitialState: DaffGeographyReducerState = {\n  loading: false,\n  errors: [],\n};\n","import { Action } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nexport enum DaffGeographyActionTypes {\n  CountryLoadAction = '[DaffGeography] Country Load Action',\n  CountryLoadSuccessAction = '[DaffGeography] Country Load Success Action',\n  CountryLoadFailureAction = '[DaffGeography] Country Load Failure Action',\n  CountryListAction = '[DaffGeography] Country List Action',\n  CountryListSuccessAction = '[DaffGeography] Country List Success Action',\n  CountryListFailureAction = '[DaffGeography] Country List Failure Action',\n}\n\nexport class DaffCountryLoad<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadAction;\n\n  constructor(public payload: T['id']) {}\n}\n\nexport class DaffCountryLoadSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadSuccessAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffCountryLoadFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport class DaffCountryList implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListAction;\n}\n\nexport class DaffCountryListSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListSuccessAction;\n\n  constructor(public payload: T[]) {}\n}\n\nexport class DaffCountryListFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport type DaffGeographyActions<T extends DaffCountry> =\n  | DaffCountryLoad<T>\n  | DaffCountryLoadSuccess<T>\n  | DaffCountryLoadFailure\n  | DaffCountryList\n  | DaffCountryListSuccess<T>\n  | DaffCountryListFailure;\n","import { daffGeographyInitialState } from './geography-initial-state';\nimport { DaffGeographyReducerState } from './geography-state.interface';\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { DaffCountry } from '@daffodil/geography';\n\nexport function daffGeographyReducer<T extends DaffCountry>(\n  state = daffGeographyInitialState,\n  action: DaffGeographyActions<T>\n): DaffGeographyReducerState {\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadAction:\n    case DaffGeographyActionTypes.CountryListAction:\n      return { ...state, loading: true };\n\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return {\n        ...state,\n        errors: [],\n        loading: false,\n      };\n\n    case DaffGeographyActionTypes.CountryLoadFailureAction:\n    case DaffGeographyActionTypes.CountryListFailureAction:\n      return {\n        ...state,\n        errors: [\n          ...state.errors,\n          action.payload\n        ],\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\n/**\n * Country Adapter for changing/overwriting entity state.\n */\nexport const getCountryAdapter = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): EntityAdapter<T> =>\n    cache = cache || createEntityAdapter<T>();\n})();\n","import { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\n\n/**\n * Initial state for country entity state.\n */\nexport const daffCountryEntitiesInitialState: DaffCountryEntityState<any> = getCountryAdapter().getInitialState();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\nimport { daffCountryEntitiesInitialState } from './country-entities-initial-state';\n\n/**\n * Reducer function that catches actions and changes/overwrites country entities state.\n */\nexport function daffCountryEntitiesReducer<T extends DaffCountry = DaffCountry>(\n  state = daffCountryEntitiesInitialState,\n  action: DaffGeographyActions<T>\n): DaffCountryEntityState<T> {\n  const adapter = getCountryAdapter<T>();\n\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n      return adapter.upsertOne({\n        ...action.payload,\n        loaded: true\n      }, state);\n\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return adapter.upsertMany(\n        action.payload.map(country => ({\n          ...country,\n          // defer to the loaded state of the country already in state (if it exists) but init field to false if it does not\n          loaded: (state.entities[country.id] && state.entities[country.id].loaded) || false,\n          // if the country coming in has no subdivisions and the same country in state does, use the subdivisions in state\n          subdivisions: country.subdivisions.length === 0 && state.entities[country.id] && state.entities[country.id].subdivisions.length > 0\n            ? state.entities[country.id].subdivisions\n            : country.subdivisions\n        })),\n        state\n      );\n\n    default:\n      return state;\n  }\n}\n","import { daffGeographyReducer } from './geography/geography.reducer';\nimport { daffCountryEntitiesReducer } from './country-entities/country-entities.reducer';\n\nexport const daffGeographyReducers = {\n  geography: daffGeographyReducer,\n  countries: daffCountryEntitiesReducer\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from '../reducers/public_api';\n\nexport interface DaffGeographyFeatureSelector<T extends DaffCountry = DaffCountry> {\n  selectGeographyFeatureState: MemoizedSelector<object, DaffGeographyFeatureState<T>>\n}\n\nexport const getDaffGeographyFeatureStateSelector = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyFeatureSelector<T> =>\n    cache = cache || {\n      selectGeographyFeatureState: createFeatureSelector<DaffGeographyFeatureState<T>>(DAFF_GEOGRAPHY_STORE_FEATURE_KEY)\n    }\n})();\n","export const DAFF_GEOGRAPHY_STORE_FEATURE_KEY = 'daffGeography';\n","import { createSelector, MemoizedSelector, MemoizedSelectorWithProps } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport {\n  DaffCountry,\n} from '@daffodil/geography';\n\nimport {\n  getCountryAdapter,\n  DaffCountryEntityState\n} from '../reducers/public_api';\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffCountryEntitySelectors<T extends DaffCountry> {\n  selectCountryEntitiesState: MemoizedSelector<object, DaffCountryEntityState<T>>;\n  selectCountryIds: MemoizedSelector<object, string[] | number[]>;\n  selectCountryEntities: MemoizedSelector<object, Dictionary<T>>;\n  selectAllCountries: MemoizedSelector<object, T[]>;\n  selectCountryTotal: MemoizedSelector<object, number>;\n  selectCountry: MemoizedSelectorWithProps<object, {id: string | number}, T>;\n  selectCountrySubdivisions: MemoizedSelectorWithProps<object, {id: string | number}, T['subdivisions']>;\n  selectIsCountryFullyLoaded: MemoizedSelector<object, boolean>;\n}\n\nconst createCountryEntitySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectCountryEntitiesState = createSelector(\n    selectGeographyFeatureState,\n    state => state.countries\n  )\n  const { selectIds, selectEntities, selectAll, selectTotal } = getCountryAdapter<T>().getSelectors(selectCountryEntitiesState);\n\n  const selectCountry = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => countries[props.id]\n  )\n\n  const selectCountrySubdivisions = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country ? country.subdivisions : []\n    }\n  )\n\n  const selectIsCountryFullyLoaded = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props: {id: T['id']}) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country && country.loaded\n    }\n  );\n\n  return {\n    selectCountryEntitiesState,\n    /**\n     * Selector for country IDs.\n     */\n    selectCountryIds: selectIds,\n    /**\n     * Selector for country entities.\n     */\n    selectCountryEntities: selectEntities,\n    /**\n     * Selector for all countries.\n     */\n    selectAllCountries: selectAll,\n    /**\n     * Selector for total number of countries.\n     */\n    selectCountryTotal: selectTotal,\n    /**\n     * Selector for a specific country.\n     */\n    selectCountry,\n    /**\n     * Selector for a specific country's subdivisions.\n     */\n    selectCountrySubdivisions,\n    /**\n     * Selector for checking if a country has been fully loaded.\n     * If true, then a country's subdivisions will be populated if any exist.\n     */\n    selectIsCountryFullyLoaded\n  }\n}\n\nexport const getDaffCountryEntitySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry>(): DaffCountryEntitySelectors<T> =>\n    cache = cache || createCountryEntitySelectors<T>()\n})();\n\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\nimport {\n  DaffGeographyReducerState,\n} from '../reducers/public_api';\n\nexport interface DaffGeographySelectors {\n  selectGeographyState: MemoizedSelector<object, DaffGeographyReducerState>;\n  selectGeographyLoading: MemoizedSelector<object, boolean>;\n  selectGeographyErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createGeographySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectGeographyState = createSelector(\n    selectGeographyFeatureState,\n    state => state.geography\n  );\n\n  const selectGeographyLoading = createSelector(\n    selectGeographyState,\n    state => state.loading\n  );\n\n  const selectGeographyErrors = createSelector(\n    selectGeographyState,\n    state => state.errors\n  );\n\n  return {\n    selectGeographyState,\n    selectGeographyLoading,\n    selectGeographyErrors\n  }\n}\n\nexport const getGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographySelectors =>\n    cache = cache || createGeographySelectors<T>()\n})();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffCountryEntitySelectors, getDaffCountryEntitySelectors } from './country-entities.selector';\nimport { DaffGeographySelectors, getGeographySelectors } from './geography.selector';\nimport { DaffGeographyFeatureSelector, getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffGeographyAllSelectors<T extends DaffCountry = DaffCountry> extends\n  DaffCountryEntitySelectors<T>,\n  DaffGeographySelectors,\n  DaffGeographyFeatureSelector<T> {}\n\nexport const getDaffGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyAllSelectors<T> =>\n    cache = cache || {\n      ...getGeographySelectors<T>(),\n      ...getDaffCountryEntitySelectors<T>(),\n      ...getDaffGeographyFeatureStateSelector<T>()\n    }\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Action, Store, select } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState } from '../../reducers/public_api';\nimport {\n  getDaffGeographySelectors, DaffGeographyAllSelectors\n} from '../../selectors/public_api';\nimport { DaffGeographyFacadeInterface } from './geography-facade.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffGeographyFacade<T extends DaffCountry = DaffCountry> implements DaffGeographyFacadeInterface<T> {\n  loading$: Observable<boolean>;\n  errors$: Observable<string[]>;\n\n  countries$: Observable<T[]>;\n  countryIds$: Observable<(string | number)[]>;\n  countryCount$: Observable<number>;\n  countryEntities$: Observable<Dictionary<T>>;\n\n  private _selectCountry: DaffGeographyAllSelectors<T>['selectCountry'];\n  private _selectCountrySubdivisions: DaffGeographyAllSelectors<T>['selectCountrySubdivisions'];\n  private _selectIsCountryFullyLoaded: DaffGeographyAllSelectors<T>['selectIsCountryFullyLoaded'];\n\n  constructor(private store: Store<DaffGeographyFeatureState<T>>) {\n    const {\n      selectCountryIds,\n      selectCountryEntities,\n      selectAllCountries,\n      selectCountryTotal,\n      selectGeographyLoading,\n      selectGeographyErrors,\n      selectCountry,\n      selectCountrySubdivisions,\n      selectIsCountryFullyLoaded\n    } = getDaffGeographySelectors<T>();\n\n    this._selectCountry = selectCountry;\n    this._selectCountrySubdivisions = selectCountrySubdivisions;\n    this._selectIsCountryFullyLoaded = selectIsCountryFullyLoaded;\n\n    this.loading$ = this.store.pipe(select(selectGeographyLoading));\n    this.errors$ = this.store.pipe(select(selectGeographyErrors));\n\n    this.countries$ = this.store.pipe(select(selectAllCountries));\n    this.countryIds$ = this.store.pipe(select(selectCountryIds));\n    this.countryCount$ = this.store.pipe(select(selectCountryTotal));\n    this.countryEntities$ = this.store.pipe(select(selectCountryEntities));\n  }\n\n  getCountry(id: T['id']): Observable<T> {\n    return this.store.pipe(select(this._selectCountry, { id }))\n  }\n\n  getCountrySubdivisions(id: T['id']): Observable<T['subdivisions']> {\n    return this.store.pipe(select(this._selectCountrySubdivisions, { id }))\n  }\n\n  isCountryFullyLoaded(id: T['id']): Observable<boolean> {\n    return this.store.pipe(select(this._selectIsCountryFullyLoaded, { id }))\n  }\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { DaffCountry } from '@daffodil/geography';\nimport { DaffGeographyServiceInterface, DaffGeographyDriver } from '@daffodil/geography/driver';\n\nimport {\n  DaffGeographyActionTypes,\n  DaffCountryLoad,\n  DaffCountryLoadSuccess,\n  DaffCountryLoadFailure,\n  DaffCountryList,\n  DaffCountryListSuccess,\n  DaffCountryListFailure,\n} from '../actions/public_api';\n\n@Injectable()\nexport class DaffGeographyEffects<T extends DaffCountry> {\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffGeographyDriver) private driver: DaffGeographyServiceInterface<T>,\n  ) {}\n\n  @Effect()\n  get$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryLoadAction),\n    switchMap((action: DaffCountryLoad<T>) => this.driver.get(action.payload).pipe(\n      map(resp => new DaffCountryLoadSuccess(resp)),\n      catchError(error => of(new DaffCountryLoadFailure('Failed to load country')))\n    )),\n  )\n\n  @Effect()\n  list$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryListAction),\n    switchMap((action: DaffCountryList) => this.driver.list().pipe(\n      map(resp => new DaffCountryListSuccess(resp)),\n      catchError(error => of(new DaffCountryListFailure('Failed to list the countries')))\n    ))\n  )\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DaffGeographyEffects } from './effects/geography.effects';\nimport { daffGeographyReducers, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from './reducers/public_api';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(DAFF_GEOGRAPHY_STORE_FEATURE_KEY, daffGeographyReducers),\n    EffectsModule.forFeature([\n      DaffGeographyEffects,\n    ]),\n  ]\n})\nexport class DaffGeographyStateModule {}\n"]}