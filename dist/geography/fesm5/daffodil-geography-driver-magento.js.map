{"version":3,"file":"daffodil-geography-driver-magento.js","sources":["ng://@daffodil/geography/driver/magento/transforms/responses/subdivision.service.ts","ng://@daffodil/geography/driver/magento/transforms/responses/country.service.ts","ng://@daffodil/geography/driver/magento/queries/fragments/country.ts","ng://@daffodil/geography/driver/magento/queries/fragments/region.ts","ng://@daffodil/geography/driver/magento/queries/get-countries.ts","ng://@daffodil/geography/driver/magento/queries/get-country.ts","ng://@daffodil/geography/driver/magento/validators/get-countries.ts","ng://@daffodil/geography/driver/magento/errors/codes.ts","ng://@daffodil/geography/driver/magento/errors/map.ts","ng://@daffodil/geography/driver/magento/errors/transform.ts","ng://@daffodil/geography/driver/magento/geography.service.ts","ng://@daffodil/geography/driver/magento/geography-driver.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffSubdivision } from '@daffodil/geography';\n\nimport { MagentoRegion } from '../../models/responses/region';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoSubdivisionTransformer {\n  /**\n   * Transforms the MagentoRegion from the magento region query into a DaffSubdivision.\n   */\n  transform(region: MagentoRegion): DaffSubdivision {\n    return region ? {\n      ...{magento_region: region},\n\n      id: String(region.id),\n      name: region.name,\n      iso_3166_2: region.code\n    } : null\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffMagentoSubdivisionTransformer } from './subdivision.service';\nimport { MagentoCountry } from '../../models/responses/country';\n\n/**\n * Transforms magento carts into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoCountryTransformer {\n  constructor(public subdivisionTransformer: DaffMagentoSubdivisionTransformer) {}\n\n  private transformSubdivisions(regions: MagentoCountry['available_regions']): DaffCountry['subdivisions'] {\n    return regions.map(region => this.subdivisionTransformer.transform(region))\n  }\n\n  /**\n   * Transforms the MagentoCountry from the magento country query into a DaffCountry.\n   */\n  transform(country: MagentoCountry): DaffCountry {\n    return country ? {\n      ...{magento_country: country},\n\n      subdivisions: this.transformSubdivisions(country.available_regions || []),\n\n      id: country.id,\n      name: country.full_name_locale,\n      name_en: country.full_name_english,\n      alpha2: country.two_letter_abbreviation,\n      alpha3: country.three_letter_abbreviation,\n    } : null\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const countryFragment = gql`\n  fragment country on Country {\n    id\n    full_name_english\n    full_name_locale\n    three_letter_abbreviation\n    two_letter_abbreviation\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const regionFragment = gql`\n  fragment region on Region {\n    code\n    id\n    name\n  }\n`;\n","import gql from 'graphql-tag';\n\nimport { countryFragment } from './fragments/public_api';\n\nexport const getCountries = gql`\n  query GetCountries {\n    countries {\n      ...country\n    }\n  }\n  ${countryFragment}\n`;\n","import gql from 'graphql-tag';\n\nimport { countryFragment, regionFragment } from './fragments/public_api';\n\nexport const getCountry = gql`\n  query GetCountry($countryId: String!) {\n    country(id: $countryId) {\n      ...country\n      available_regions {\n        ...region\n      }\n    }\n  }\n  ${countryFragment}\n  ${regionFragment}\n`;\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { DaffGeographyInvalidAPIResponseError } from '@daffodil/geography/driver';\n\nimport { MagentoGetCountriesResponse } from '../queries/public_api';\n\nexport const validateGetCountriesResponse = (response: ApolloQueryResult<MagentoGetCountriesResponse>) => {\n  if (response.data.countries) {\n    return response\n  } else {\n    throw new DaffGeographyInvalidAPIResponseError('Get countries response does not contain a valid list of countries.')\n  }\n}\n","export enum MagentoGeographyGraphQlErrorCode {\n\tCOUNTRY_NOT_FOUND = 'graphql-no-such-entity',\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffCountryNotFoundError } from '@daffodil/geography/driver';\n\nimport { MagentoGeographyGraphQlErrorCode } from './codes';\n\nexport const DaffGeographyMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoGeographyGraphQlErrorCode.COUNTRY_NOT_FOUND]: DaffCountryNotFoundError,\n};\n","import { daffTransformMagentoError } from '@daffodil/driver/magento';\n\nimport { DaffGeographyMagentoErrorMap } from './map';\n\nexport function transformMagentoGeographyError(error: any) {\n  return daffTransformMagentoError(error, DaffGeographyMagentoErrorMap)\n}\n","import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\n\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { DaffCountry } from '@daffodil/geography';\nimport { DaffGeographyServiceInterface } from '@daffodil/geography/driver';\n\nimport { DaffMagentoCountryTransformer } from './transforms/responses/country.service';\nimport { getCountries, MagentoGetCountriesResponse } from './queries/public_api';\nimport { getCountry } from './queries/get-country';\nimport { MagentoGetCountryResponse } from './queries/responses/get-country';\nimport { validateGetCountriesResponse } from './validators/public_api';\nimport { transformMagentoGeographyError } from './errors/transform';\n\n/**\n * A service for making Magento GraphQL queries for carts.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffGeographyMagentoService implements DaffGeographyServiceInterface<DaffCountry> {\n  constructor(\n    private apollo: Apollo,\n    public countryTransformer: DaffMagentoCountryTransformer,\n  ) {}\n\n  list(): Observable<DaffCountry[]> {\n    return this.apollo.query<MagentoGetCountriesResponse>({\n      query: getCountries,\n    }).pipe(\n      map(validateGetCountriesResponse),\n      map(result => result.data.countries.map(country => this.countryTransformer.transform(country))),\n      catchError(err => throwError(transformMagentoGeographyError(err)))\n    );\n  }\n\n  get(countryId: DaffCountry['id']): Observable<DaffCountry> {\n    return this.apollo.query<MagentoGetCountryResponse>({\n      query: getCountry,\n      variables: {\n        countryId\n      }\n    }).pipe(\n      map(result => this.countryTransformer.transform(result.data.country)),\n      catchError(err => throwError(transformMagentoGeographyError(err)))\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffGeographyDriver } from '@daffodil/geography/driver'\n\nimport { DaffGeographyMagentoService } from './geography.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffGeographyMagentoDriverModule {\n  static forRoot(): ModuleWithProviders<DaffGeographyMagentoDriverModule> {\n    return {\n      ngModule: DaffGeographyMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffGeographyDriver,\n          useExisting: DaffGeographyMagentoService\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}