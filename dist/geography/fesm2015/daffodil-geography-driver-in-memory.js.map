{"version":3,"file":"daffodil-geography-driver-in-memory.js","sources":["ng://@daffodil/geography/driver/in-memory/drivers/geography.service.ts","ng://@daffodil/geography/driver/in-memory/drivers/geography-driver.module.ts","ng://@daffodil/geography/driver/in-memory/backend/geography.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  DaffCountry,\n} from '@daffodil/geography';\nimport {\n  DaffGeographyServiceInterface,\n  DaffCountryNotFoundError\n} from '@daffodil/geography/driver';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryGeographyService implements DaffGeographyServiceInterface<DaffCountry> {\n  url = '/api/countries';\n\n  constructor(private http: HttpClient) {}\n\n  get(countryId: DaffCountry['id']): Observable<DaffCountry> {\n    return this.http.get<DaffCountry>(`${this.url}/${countryId}`).pipe(\n\t\t\tcatchError((error: Error) => throwError(DaffCountryNotFoundError)),\n\t\t\tmap(result => result)\n\t\t);\n  }\n\n  list(): Observable<DaffCountry[]> {\n    return this.http.get<DaffCountry[]>(`${this.url}/`);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffGeographyDriver,\n} from '@daffodil/geography/driver';\n\nimport { DaffInMemoryGeographyService } from './geography.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffGeographyInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffGeographyInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffGeographyDriver,\n          useExisting: DaffInMemoryGeographyService\n        },\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfo,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffInMemoryDataServiceInterface } from '@daffodil/core/testing';\nimport { DaffCountry } from '@daffodil/geography';\nimport {\n  DaffCountryFactory,\n  DaffSubdivisionFactory\n} from '@daffodil/geography/testing';\n\n/**\n * An in-memory service that stubs out the backend services for getting countries.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendGeographyService implements InMemoryDbService, DaffInMemoryDataServiceInterface {\n  countries: DaffCountry[];\n\n  constructor(\n    private countryFactory: DaffCountryFactory,\n    private subdivisionFactory: DaffSubdivisionFactory\n  ) {\n    this.countries = this.countryFactory.createMany(5);\n    this.countries.forEach(country => country.subdivisions = this.subdivisionFactory.createMany(5))\n  }\n\n  /**\n   * Creates a fake database of countries for the geography inmemory backend service.\n   *\n   * @returns A fake database of an array of countries\n   */\n  createDb(reqInfo: RequestInfo): any {\n    if (reqInfo) {\n      const seedData = reqInfo.utils.getJsonBody(reqInfo.req).countries;\n      if (seedData) {\n        this.countries = seedData;\n      }\n    }\n\n    return {\n      countries: this.countries\n    };\n  }\n\n  /**\n   * Responds to GET requests.\n   */\n  get(reqInfo: RequestInfo): any {\n    return reqInfo.utils.createResponse$(() => ({\n      body: reqInfo.id ? this.getCountry(reqInfo) : this.listCountries(reqInfo),\n      status: STATUS.OK\n    }))\n  }\n\n  private getCountry(reqInfo: RequestInfo) {\n    return reqInfo.collection.find(country => country.id === reqInfo.id)\n  }\n\n  private listCountries(reqInfo: RequestInfo) {\n    return reqInfo.collection\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAgBa,4BAA4B;;;;IAGvC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,gBAAgB,CAAC;KAEiB;;;;;IAExC,GAAG,CAAC,SAA4B;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,GAAG,IAAI,CAAC,GAAG,IAAI,SAAS,EAAE,CAAC,CAAC,IAAI,CACnE,UAAU;;;;QAAC,CAAC,KAAY,KAAK,UAAU,CAAC,wBAAwB,CAAC,EAAC,EAClE,GAAG;;;;QAAC,MAAM,IAAI,MAAM,EAAC,CACrB,CAAC;KACD;;;;IAED,IAAI;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;KACrD;;;YAjBF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YAdQ,UAAU;;;;;IAgBjB,2CAAuB;;;;;IAEX,4CAAwB;;;;;;;ACnBtC,MAca,iCAAiC;;;;IAC5C,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,iCAAiC;YAC3C,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,mBAAmB;oBAC5B,WAAW,EAAE,4BAA4B;iBAC1C;aACF;SACF,CAAC;KACH;;;YAhBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;aACF;;;;;;;;;;;;ACbD;;;AAoBA,MAAa,mCAAmC;;;;;IAG9C,YACU,cAAkC,EAClC,kBAA0C;QAD1C,mBAAc,GAAd,cAAc,CAAoB;QAClC,uBAAkB,GAAlB,kBAAkB,CAAwB;QAElD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO;;;;QAAC,OAAO,IAAI,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,EAAC,CAAA;KAChG;;;;;;;IAOD,QAAQ,CAAC,OAAoB;QAC3B,IAAI,OAAO,EAAE;;kBACL,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS;YACjE,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;aAC3B;SACF;QAED,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;KACH;;;;;;IAKD,GAAG,CAAC,OAAoB;QACtB,OAAO,OAAO,CAAC,KAAK,CAAC,eAAe;;;QAAC,OAAO;YAC1C,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;YACzE,MAAM,EAAE,MAAM,CAAC,EAAE;SAClB,CAAC,EAAC,CAAA;KACJ;;;;;;IAEO,UAAU,CAAC,OAAoB;QACrC,OAAO,OAAO,CAAC,UAAU,CAAC,IAAI;;;;QAAC,OAAO,IAAI,OAAO,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,EAAC,CAAA;KACrE;;;;;;IAEO,aAAa,CAAC,OAAoB;QACxC,OAAO,OAAO,CAAC,UAAU,CAAA;KAC1B;;;YAhDF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YATC,kBAAkB;YAClB,sBAAsB;;;;;IAUtB,wDAAyB;;;;;IAGvB,6DAA0C;;;;;IAC1C,iEAAkD;;;;;;;;;;;;;;;;;;;;"}