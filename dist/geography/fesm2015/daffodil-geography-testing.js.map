{"version":3,"file":"daffodil-geography-testing.js","sources":["ng://@daffodil/geography/testing/factories/address.factory.ts","ng://@daffodil/geography/testing/factories/personal-address.factory.ts","ng://@daffodil/geography/testing/factories/country.factory.ts","ng://@daffodil/geography/testing/factories/subdivision.factory.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffAddress } from '@daffodil/geography';\n\nimport * as faker from 'faker/locale/en_US';\n\nexport class MockDaffAddress implements DaffAddress {\n  street = faker.address.streetName();\n  street2 = faker.address.secondaryAddress();\n  city = faker.address.city();\n  region = faker.address.stateAbbr();\n  postcode = faker.address.zipCode();\n  country = faker.address.zipCode();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAddressFactory extends DaffModelFactory<DaffAddress>{\n  constructor(){\n    super(MockDaffAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffPersonalAddress } from '@daffodil/geography';\n\nimport { MockDaffAddress } from './address.factory';\n\nexport class MockDaffPersonalAddress extends MockDaffAddress implements DaffPersonalAddress {\n  prefix = faker.name.prefix();\n  suffix = faker.name.suffix();\n  firstname = faker.name.firstName();\n  middlename = faker.name.firstName();\n  lastname = faker.name.lastName();\n  email = faker.internet.email();\n  telephone = faker.phone.phoneNumber();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffPersonalAddressFactory extends DaffModelFactory<DaffPersonalAddress>{\n  constructor() {\n    super(MockDaffPersonalAddress);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCountry implements DaffCountry {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tname_en = faker.random.word();\n\talpha2 = faker.random.alphaNumeric(2);\n\talpha3 = faker.random.alphaNumeric(3);\n\tsubdivisions = [];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCountryFactory extends DaffModelFactory<DaffCountry> {\n  constructor() {\n    super(MockCountry);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffSubdivision } from '@daffodil/geography';\n\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockSubdivision implements DaffSubdivision {\n  id = String(faker.random.number({min: 1, max: 1000}));\n  name = faker.random.word();\n\tiso_3166_2 = faker.random.alphaNumeric(2);\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffSubdivisionFactory extends DaffModelFactory<DaffSubdivision> {\n  constructor() {\n    super(MockSubdivision);\n  }\n}\n"],"names":["faker.address","faker.name","faker.internet","faker.phone","faker.random"],"mappings":";;;;;;;;AAAA,MAOa,eAAe;IAA5B;QACE,WAAM,GAAGA,OAAa,CAAC,UAAU,EAAE,CAAC;QACpC,YAAO,GAAGA,OAAa,CAAC,gBAAgB,EAAE,CAAC;QAC3C,SAAI,GAAGA,OAAa,CAAC,IAAI,EAAE,CAAC;QAC5B,WAAM,GAAGA,OAAa,CAAC,SAAS,EAAE,CAAC;QACnC,aAAQ,GAAGA,OAAa,CAAC,OAAO,EAAE,CAAC;QACnC,YAAO,GAAGA,OAAa,CAAC,OAAO,EAAE,CAAC;KACnC;CAAA;;;IANC,iCAAoC;;IACpC,kCAA2C;;IAC3C,+BAA4B;;IAC5B,iCAAmC;;IACnC,mCAAmC;;IACnC,kCAAkC;;AAMpC,MAAa,kBAAmB,SAAQ,gBAA6B;IACnE;QACE,KAAK,CAAC,eAAe,CAAC,CAAC;KACxB;;;YANF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;AClBD,MAQa,uBAAwB,SAAQ,eAAe;IAA5D;;QACE,WAAM,GAAGC,IAAU,CAAC,MAAM,EAAE,CAAC;QAC7B,WAAM,GAAGA,IAAU,CAAC,MAAM,EAAE,CAAC;QAC7B,cAAS,GAAGA,IAAU,CAAC,SAAS,EAAE,CAAC;QACnC,eAAU,GAAGA,IAAU,CAAC,SAAS,EAAE,CAAC;QACpC,aAAQ,GAAGA,IAAU,CAAC,QAAQ,EAAE,CAAC;QACjC,UAAK,GAAGC,QAAc,CAAC,KAAK,EAAE,CAAC;QAC/B,cAAS,GAAGC,KAAW,CAAC,WAAW,EAAE,CAAC;KACvC;CAAA;;;IAPC,yCAA6B;;IAC7B,yCAA6B;;IAC7B,4CAAmC;;IACnC,6CAAoC;;IACpC,2CAAiC;;IACjC,wCAA+B;;IAC/B,4CAAsC;;AAMxC,MAAa,0BAA2B,SAAQ,gBAAqC;IACnF;QACE,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAChC;;;YANF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;ACpBD,MAOa,WAAW;IAAxB;QACE,OAAE,GAAG,MAAM,CAACC,MAAY,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACtD,SAAI,GAAGA,MAAY,CAAC,IAAI,EAAE,CAAC;QAC5B,YAAO,GAAGA,MAAY,CAAC,IAAI,EAAE,CAAC;QAC9B,WAAM,GAAGA,MAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACtC,WAAM,GAAGA,MAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACtC,iBAAY,GAAG,EAAE,CAAC;KAClB;CAAA;;;IANC,yBAAsD;;IACtD,2BAA2B;;IAC5B,8BAA8B;;IAC9B,6BAAsC;;IACtC,6BAAsC;;IACtC,mCAAkB;;AAMnB,MAAa,kBAAmB,SAAQ,gBAA6B;IACnE;QACE,KAAK,CAAC,WAAW,CAAC,CAAC;KACpB;;;YANF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;AClBD,MAOa,eAAe;IAA5B;QACE,OAAE,GAAG,MAAM,CAACA,MAAY,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACtD,SAAI,GAAGA,MAAY,CAAC,IAAI,EAAE,CAAC;QAC5B,eAAU,GAAGA,MAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;KAC1C;CAAA;;;IAHC,6BAAsD;;IACtD,+BAA2B;;IAC5B,qCAA0C;;AAM3C,MAAa,sBAAuB,SAAQ,gBAAiC;IAC3E;QACE,KAAK,CAAC,eAAe,CAAC,CAAC;KACxB;;;YANF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}