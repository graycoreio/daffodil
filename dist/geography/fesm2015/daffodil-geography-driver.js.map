{"version":3,"file":"daffodil-geography-driver.js","sources":["ng://@daffodil/geography/driver/errors/country-not-found.ts","ng://@daffodil/geography/driver/errors/invalid-api-response.ts","ng://@daffodil/geography/driver/interfaces/geography-service.interface.ts"],"sourcesContent":["import { DaffError, DaffInheritableError } from '@daffodil/core';\n\nexport class DaffCountryNotFoundError extends DaffInheritableError implements DaffError {\n  public readonly code: string = 'DAFF_GEOGRAPHY_COUNTRY_NOT_FOUND';\n\n\tconstructor(public message: string) {\n\t\tsuper(message);\n\t}\n}\n","import { DaffError, DaffInheritableError } from '@daffodil/core';\n\nexport class DaffGeographyInvalidAPIResponseError extends DaffInheritableError implements DaffError {\n  public readonly code: string = 'DAFF_GEOGRAPHY_INVALID_API_RESPONSE';\n\n\tconstructor(public message: string) {\n\t\tsuper(message);\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nexport const DaffGeographyDriver = new InjectionToken('DaffGeographyDriver');\n\nexport interface DaffGeographyServiceInterface<T extends DaffCountry> {\n\t/**\n\t * Retrieves the list of countries available to the given store.\n\t */\n\tlist(): Observable<T[]>;\n\n\t/**\n\t * Retrieve precise information about a specific country.\n\t */\n\tget(id: T['id']): Observable<T>;\n}\n"],"names":[],"mappings":";;;;;;;AAAA,MAEa,wBAAyB,SAAQ,oBAAoB;;;;IAGjE,YAAmB,OAAe;QACjC,KAAK,CAAC,OAAO,CAAC,CAAC;QADG,YAAO,GAAP,OAAO,CAAQ;QAFjB,SAAI,GAAW,kCAAkC,CAAC;KAIlE;CACD;;;IALC,wCAAkE;;IAEvD,2CAAsB;;;;;;;ACLnC,MAEa,oCAAqC,SAAQ,oBAAoB;;;;IAG7E,YAAmB,OAAe;QACjC,KAAK,CAAC,OAAO,CAAC,CAAC;QADG,YAAO,GAAP,OAAO,CAAQ;QAFjB,SAAI,GAAW,qCAAqC,CAAC;KAIrE;CACD;;;IALC,oDAAqE;;IAE1D,uDAAsB;;;;;;;;;;;;ACLnC;AAKA,MAAa,mBAAmB,GAAG,IAAI,cAAc,CAAC,qBAAqB,CAAC;;;;;AAE5E,4CAUC;;;;;;IANA,+DAAwB;;;;;;IAKxB,gEAAgC;;;;;;;;;;;;;;;"}