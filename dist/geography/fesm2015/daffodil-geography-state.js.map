{"version":3,"file":"daffodil-geography-state.js","sources":["ng://@daffodil/geography/state/reducers/geography/geography-initial-state.ts","ng://@daffodil/geography/state/actions/geography.actions.ts","ng://@daffodil/geography/state/reducers/geography/geography.reducer.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-adapter.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities-initial-state.ts","ng://@daffodil/geography/state/reducers/country-entities/country-entities.reducer.ts","ng://@daffodil/geography/state/reducers/geography-reducers.ts","ng://@daffodil/geography/state/reducers/geography-store-feature-key.ts","ng://@daffodil/geography/state/selectors/geography-feature.selector.ts","ng://@daffodil/geography/state/selectors/country-entities.selector.ts","ng://@daffodil/geography/state/selectors/geography.selector.ts","ng://@daffodil/geography/state/selectors/geography-all.selector.ts","ng://@daffodil/geography/state/facades/geography/geography.facade.ts","ng://@daffodil/geography/state/effects/geography.effects.ts","ng://@daffodil/geography/state/geography-state.module.ts"],"sourcesContent":["import { DaffGeographyReducerState } from './geography-state.interface';\n\nexport const daffGeographyInitialState: DaffGeographyReducerState = {\n  loading: false,\n  errors: [],\n};\n","import { Action } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nexport enum DaffGeographyActionTypes {\n  CountryLoadAction = '[DaffGeography] Country Load Action',\n  CountryLoadSuccessAction = '[DaffGeography] Country Load Success Action',\n  CountryLoadFailureAction = '[DaffGeography] Country Load Failure Action',\n  CountryListAction = '[DaffGeography] Country List Action',\n  CountryListSuccessAction = '[DaffGeography] Country List Success Action',\n  CountryListFailureAction = '[DaffGeography] Country List Failure Action',\n}\n\nexport class DaffCountryLoad<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadAction;\n\n  constructor(public payload: T['id']) {}\n}\n\nexport class DaffCountryLoadSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadSuccessAction;\n\n  constructor(public payload: T) {}\n}\n\nexport class DaffCountryLoadFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryLoadFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport class DaffCountryList implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListAction;\n}\n\nexport class DaffCountryListSuccess<T extends DaffCountry> implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListSuccessAction;\n\n  constructor(public payload: T[]) {}\n}\n\nexport class DaffCountryListFailure implements Action {\n  readonly type = DaffGeographyActionTypes.CountryListFailureAction;\n\n  constructor(public payload: string) {}\n}\n\nexport type DaffGeographyActions<T extends DaffCountry> =\n  | DaffCountryLoad<T>\n  | DaffCountryLoadSuccess<T>\n  | DaffCountryLoadFailure\n  | DaffCountryList\n  | DaffCountryListSuccess<T>\n  | DaffCountryListFailure;\n","import { daffGeographyInitialState } from './geography-initial-state';\nimport { DaffGeographyReducerState } from './geography-state.interface';\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { DaffCountry } from '@daffodil/geography';\n\nexport function daffGeographyReducer<T extends DaffCountry>(\n  state = daffGeographyInitialState,\n  action: DaffGeographyActions<T>\n): DaffGeographyReducerState {\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadAction:\n    case DaffGeographyActionTypes.CountryListAction:\n      return { ...state, loading: true };\n\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return {\n        ...state,\n        errors: [],\n        loading: false,\n      };\n\n    case DaffGeographyActionTypes.CountryLoadFailureAction:\n    case DaffGeographyActionTypes.CountryListFailureAction:\n      return {\n        ...state,\n        errors: [\n          ...state.errors,\n          action.payload\n        ],\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\n/**\n * Country Adapter for changing/overwriting entity state.\n */\nexport const getCountryAdapter = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): EntityAdapter<T> =>\n    cache = cache || createEntityAdapter<T>();\n})();\n","import { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\n\n/**\n * Initial state for country entity state.\n */\nexport const daffCountryEntitiesInitialState: DaffCountryEntityState<any> = getCountryAdapter().getInitialState();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyActions, DaffGeographyActionTypes } from '../../actions/public_api';\nimport { getCountryAdapter } from './country-entities-adapter';\nimport { DaffCountryEntityState } from './country-entities-state.interface';\nimport { daffCountryEntitiesInitialState } from './country-entities-initial-state';\n\n/**\n * Reducer function that catches actions and changes/overwrites country entities state.\n */\nexport function daffCountryEntitiesReducer<T extends DaffCountry = DaffCountry>(\n  state = daffCountryEntitiesInitialState,\n  action: DaffGeographyActions<T>\n): DaffCountryEntityState<T> {\n  const adapter = getCountryAdapter<T>();\n\n  switch (action.type) {\n    case DaffGeographyActionTypes.CountryLoadSuccessAction:\n      return adapter.upsertOne({\n        ...action.payload,\n        loaded: true\n      }, state);\n\n    case DaffGeographyActionTypes.CountryListSuccessAction:\n      return adapter.upsertMany(\n        action.payload.map(country => ({\n          ...country,\n          // defer to the loaded state of the country already in state (if it exists) but init field to false if it does not\n          loaded: (state.entities[country.id] && state.entities[country.id].loaded) || false,\n          // if the country coming in has no subdivisions and the same country in state does, use the subdivisions in state\n          subdivisions: country.subdivisions.length === 0 && state.entities[country.id] && state.entities[country.id].subdivisions.length > 0\n            ? state.entities[country.id].subdivisions\n            : country.subdivisions\n        })),\n        state\n      );\n\n    default:\n      return state;\n  }\n}\n","import { daffGeographyReducer } from './geography/geography.reducer';\nimport { daffCountryEntitiesReducer } from './country-entities/country-entities.reducer';\n\nexport const daffGeographyReducers = {\n  geography: daffGeographyReducer,\n  countries: daffCountryEntitiesReducer\n}\n","export const DAFF_GEOGRAPHY_STORE_FEATURE_KEY = 'daffGeography';\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from '../reducers/public_api';\n\nexport interface DaffGeographyFeatureSelector<T extends DaffCountry = DaffCountry> {\n  selectGeographyFeatureState: MemoizedSelector<object, DaffGeographyFeatureState<T>>\n}\n\nexport const getDaffGeographyFeatureStateSelector = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyFeatureSelector<T> =>\n    cache = cache || {\n      selectGeographyFeatureState: createFeatureSelector<DaffGeographyFeatureState<T>>(DAFF_GEOGRAPHY_STORE_FEATURE_KEY)\n    }\n})();\n","import { createSelector, MemoizedSelector, MemoizedSelectorWithProps } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport {\n  DaffCountry,\n} from '@daffodil/geography';\n\nimport {\n  getCountryAdapter,\n  DaffCountryEntityState\n} from '../reducers/public_api';\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffCountryEntitySelectors<T extends DaffCountry> {\n  selectCountryEntitiesState: MemoizedSelector<object, DaffCountryEntityState<T>>;\n  selectCountryIds: MemoizedSelector<object, string[] | number[]>;\n  selectCountryEntities: MemoizedSelector<object, Dictionary<T>>;\n  selectAllCountries: MemoizedSelector<object, T[]>;\n  selectCountryTotal: MemoizedSelector<object, number>;\n  selectCountry: MemoizedSelectorWithProps<object, {id: string | number}, T>;\n  selectCountrySubdivisions: MemoizedSelectorWithProps<object, {id: string | number}, T['subdivisions']>;\n  selectIsCountryFullyLoaded: MemoizedSelector<object, boolean>;\n}\n\nconst createCountryEntitySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectCountryEntitiesState = createSelector(\n    selectGeographyFeatureState,\n    state => state.countries\n  )\n  const { selectIds, selectEntities, selectAll, selectTotal } = getCountryAdapter<T>().getSelectors(selectCountryEntitiesState);\n\n  const selectCountry = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => countries[props.id]\n  )\n\n  const selectCountrySubdivisions = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country ? country.subdivisions : []\n    }\n  )\n\n  const selectIsCountryFullyLoaded = createSelector(\n    selectEntities,\n    (countries: Dictionary<T>, props: {id: T['id']}) => {\n      const country = selectCountry.projector(countries, { id: props.id });\n      return country && country.loaded\n    }\n  );\n\n  return {\n    selectCountryEntitiesState,\n    /**\n     * Selector for country IDs.\n     */\n    selectCountryIds: selectIds,\n    /**\n     * Selector for country entities.\n     */\n    selectCountryEntities: selectEntities,\n    /**\n     * Selector for all countries.\n     */\n    selectAllCountries: selectAll,\n    /**\n     * Selector for total number of countries.\n     */\n    selectCountryTotal: selectTotal,\n    /**\n     * Selector for a specific country.\n     */\n    selectCountry,\n    /**\n     * Selector for a specific country's subdivisions.\n     */\n    selectCountrySubdivisions,\n    /**\n     * Selector for checking if a country has been fully loaded.\n     * If true, then a country's subdivisions will be populated if any exist.\n     */\n    selectIsCountryFullyLoaded\n  }\n}\n\nexport const getDaffCountryEntitySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry>(): DaffCountryEntitySelectors<T> =>\n    cache = cache || createCountryEntitySelectors<T>()\n})();\n\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\nimport {\n  DaffGeographyReducerState,\n} from '../reducers/public_api';\n\nexport interface DaffGeographySelectors {\n  selectGeographyState: MemoizedSelector<object, DaffGeographyReducerState>;\n  selectGeographyLoading: MemoizedSelector<object, boolean>;\n  selectGeographyErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createGeographySelectors = <T extends DaffCountry = DaffCountry>() => {\n  const { selectGeographyFeatureState } = getDaffGeographyFeatureStateSelector<T>();\n  const selectGeographyState = createSelector(\n    selectGeographyFeatureState,\n    state => state.geography\n  );\n\n  const selectGeographyLoading = createSelector(\n    selectGeographyState,\n    state => state.loading\n  );\n\n  const selectGeographyErrors = createSelector(\n    selectGeographyState,\n    state => state.errors\n  );\n\n  return {\n    selectGeographyState,\n    selectGeographyLoading,\n    selectGeographyErrors\n  }\n}\n\nexport const getGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographySelectors =>\n    cache = cache || createGeographySelectors<T>()\n})();\n","import { DaffCountry } from '@daffodil/geography';\n\nimport { DaffCountryEntitySelectors, getDaffCountryEntitySelectors } from './country-entities.selector';\nimport { DaffGeographySelectors, getGeographySelectors } from './geography.selector';\nimport { DaffGeographyFeatureSelector, getDaffGeographyFeatureStateSelector } from './geography-feature.selector';\n\nexport interface DaffGeographyAllSelectors<T extends DaffCountry = DaffCountry> extends\n  DaffCountryEntitySelectors<T>,\n  DaffGeographySelectors,\n  DaffGeographyFeatureSelector<T> {}\n\nexport const getDaffGeographySelectors = (() => {\n  let cache;\n  return <T extends DaffCountry = DaffCountry>(): DaffGeographyAllSelectors<T> =>\n    cache = cache || {\n      ...getGeographySelectors<T>(),\n      ...getDaffCountryEntitySelectors<T>(),\n      ...getDaffGeographyFeatureStateSelector<T>()\n    }\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Action, Store, select } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity';\n\nimport { DaffCountry } from '@daffodil/geography';\n\nimport { DaffGeographyFeatureState } from '../../reducers/public_api';\nimport {\n  getDaffGeographySelectors, DaffGeographyAllSelectors\n} from '../../selectors/public_api';\nimport { DaffGeographyFacadeInterface } from './geography-facade.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffGeographyFacade<T extends DaffCountry = DaffCountry> implements DaffGeographyFacadeInterface<T> {\n  loading$: Observable<boolean>;\n  errors$: Observable<string[]>;\n\n  countries$: Observable<T[]>;\n  countryIds$: Observable<(string | number)[]>;\n  countryCount$: Observable<number>;\n  countryEntities$: Observable<Dictionary<T>>;\n\n  private _selectCountry: DaffGeographyAllSelectors<T>['selectCountry'];\n  private _selectCountrySubdivisions: DaffGeographyAllSelectors<T>['selectCountrySubdivisions'];\n  private _selectIsCountryFullyLoaded: DaffGeographyAllSelectors<T>['selectIsCountryFullyLoaded'];\n\n  constructor(private store: Store<DaffGeographyFeatureState<T>>) {\n    const {\n      selectCountryIds,\n      selectCountryEntities,\n      selectAllCountries,\n      selectCountryTotal,\n      selectGeographyLoading,\n      selectGeographyErrors,\n      selectCountry,\n      selectCountrySubdivisions,\n      selectIsCountryFullyLoaded\n    } = getDaffGeographySelectors<T>();\n\n    this._selectCountry = selectCountry;\n    this._selectCountrySubdivisions = selectCountrySubdivisions;\n    this._selectIsCountryFullyLoaded = selectIsCountryFullyLoaded;\n\n    this.loading$ = this.store.pipe(select(selectGeographyLoading));\n    this.errors$ = this.store.pipe(select(selectGeographyErrors));\n\n    this.countries$ = this.store.pipe(select(selectAllCountries));\n    this.countryIds$ = this.store.pipe(select(selectCountryIds));\n    this.countryCount$ = this.store.pipe(select(selectCountryTotal));\n    this.countryEntities$ = this.store.pipe(select(selectCountryEntities));\n  }\n\n  getCountry(id: T['id']): Observable<T> {\n    return this.store.pipe(select(this._selectCountry, { id }))\n  }\n\n  getCountrySubdivisions(id: T['id']): Observable<T['subdivisions']> {\n    return this.store.pipe(select(this._selectCountrySubdivisions, { id }))\n  }\n\n  isCountryFullyLoaded(id: T['id']): Observable<boolean> {\n    return this.store.pipe(select(this._selectIsCountryFullyLoaded, { id }))\n  }\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { DaffCountry } from '@daffodil/geography';\nimport { DaffGeographyServiceInterface, DaffGeographyDriver } from '@daffodil/geography/driver';\n\nimport {\n  DaffGeographyActionTypes,\n  DaffCountryLoad,\n  DaffCountryLoadSuccess,\n  DaffCountryLoadFailure,\n  DaffCountryList,\n  DaffCountryListSuccess,\n  DaffCountryListFailure,\n} from '../actions/public_api';\n\n@Injectable()\nexport class DaffGeographyEffects<T extends DaffCountry> {\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffGeographyDriver) private driver: DaffGeographyServiceInterface<T>,\n  ) {}\n\n  @Effect()\n  get$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryLoadAction),\n    switchMap((action: DaffCountryLoad<T>) => this.driver.get(action.payload).pipe(\n      map(resp => new DaffCountryLoadSuccess(resp)),\n      catchError(error => of(new DaffCountryLoadFailure('Failed to load country')))\n    )),\n  )\n\n  @Effect()\n  list$ = this.actions$.pipe(\n    ofType(DaffGeographyActionTypes.CountryListAction),\n    switchMap((action: DaffCountryList) => this.driver.list().pipe(\n      map(resp => new DaffCountryListSuccess(resp)),\n      catchError(error => of(new DaffCountryListFailure('Failed to list the countries')))\n    ))\n  )\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DaffGeographyEffects } from './effects/geography.effects';\nimport { daffGeographyReducers, DAFF_GEOGRAPHY_STORE_FEATURE_KEY } from './reducers/public_api';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(DAFF_GEOGRAPHY_STORE_FEATURE_KEY, daffGeographyReducers),\n    EffectsModule.forFeature([\n      DaffGeographyEffects,\n    ]),\n  ]\n})\nexport class DaffGeographyStateModule {}\n"],"names":[],"mappings":"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"}