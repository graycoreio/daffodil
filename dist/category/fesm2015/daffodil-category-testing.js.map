{"version":3,"file":"daffodil-category-testing.js","sources":["ng://@daffodil/category/testing/factories/category.factory.ts","ng://@daffodil/category/testing/factories/category-page-configuration-state.factory.ts","ng://@daffodil/category/testing/inmemory-backend/category.service.ts","ng://@daffodil/category/testing/drivers/testing/category.service.ts","ng://@daffodil/category/testing/drivers/in-memory/category.service.ts","ng://@daffodil/category/testing/drivers/in-memory/category-driver.module.ts","ng://@daffodil/category/testing/drivers/testing/category-driver.module.ts","ng://@daffodil/category/testing/helpers/mock-category-facade.ts","ng://@daffodil/category/testing/helpers/category-testing.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCategory } from '@daffodil/category';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCategory implements DaffCategory {\n  id = faker.random.number({min: 1, max: 10000}).toString();\n\tname = faker.commerce.productMaterial();\n\tdescription = faker.random.words(Math.floor(Math.random() * 20));\n  breadcrumbs = [{\n    categoryId: faker.random.number({min: 1, max: 100}),\n    categoryName: faker.commerce.productMaterial(),\n    categoryLevel: faker.random.number({min: 1, max: 5}),\n    categoryUrlKey: faker.commerce.productMaterial()\n  }]\n  children_count = faker.random.number({min: 1, max: 10});\n  total_products = 1;\n  product_ids = [faker.random.number({min: 1, max: 100}).toString()];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCategoryFactory extends DaffModelFactory<DaffCategory>{\n  constructor(){\n    super(MockCategory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffCategoryPageConfigurationState, DaffCategoryFilterType, DaffCategoryRequest } from '@daffodil/category';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCategoryPageConfigurationState implements DaffCategoryPageConfigurationState<DaffCategoryRequest> {\n  id = String(faker.random.number({min: 1, max: 100}));\n  page_size = 20;\n  current_page = 1;\n  filters = [{\n    label: 'Category',\n    name: 'cat',\n    type: DaffCategoryFilterType.Equal,\n    options: [\n      {\n        label: 'Gear',\n        value: '3',\n        count: 34\n      },\n      {\n        label: 'Training',\n        value: '9',\n        count: 6\n      }\n    ]\n  }];\n  sort_options = [\n    {\n      label: 'Position',\n      value: 'position'\n    },\n    {\n        label: 'Name',\n        value: 'name'\n    },\n    {\n        label: 'Price',\n        value: 'price'\n    }\n  ];\n  total_pages = faker.random.number({min: 1, max: 4});\n  filter_requests = [];\n  applied_sort_option = null;\n\tapplied_sort_direction = null;\n\ttotal_products = faker.random.number({min: 1, max: 3});\n\tproduct_ids = [faker.random.number({min: 1, max: 100}).toString()];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCategoryPageConfigurationStateFactory extends DaffModelFactory<DaffCategoryPageConfigurationState<DaffCategoryRequest>>{\n  constructor(){\n    super(MockCategoryPageConfigurationState);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  RequestInfoUtilities,\n  ParsedRequestUrl,\n  STATUS\n} from 'angular-in-memory-web-api';\n\nimport { DaffCategory, DaffCategoryPageConfigurationState, DaffCategoryRequest } from '@daffodil/category';\nimport { DaffInMemoryBackendProductService } from '@daffodil/product/testing';\nimport { randomSubset } from '@daffodil/core';\nimport { DaffProduct } from '@daffodil/product';\n\nimport { DaffCategoryFactory } from '../factories/category.factory';\nimport { DaffCategoryPageConfigurationStateFactory } from '../factories/category-page-configuration-state.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendCategoryService implements InMemoryDbService {\n  category: DaffCategory;\n  categoryPageConfigurationState: DaffCategoryPageConfigurationState<DaffCategoryRequest>;\n\n  constructor(\n    private categoryFactory: DaffCategoryFactory,\n    private categoryPageConfigurationFactory: DaffCategoryPageConfigurationStateFactory,\n    private productInMemoryBackendService: DaffInMemoryBackendProductService\n  ) {}\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  createDb(): any {\n    return {};\n  }\n\n  get(reqInfo: any) {\n\t\tconst allCategoryProductIds = this.generateProductIdSubset(this.productInMemoryBackendService.products);\n\n    this.categoryPageConfigurationState = this.categoryPageConfigurationFactory.create({\n\t\t\tid: reqInfo.id,\n\t\t\tpage_size: this.generatePageSize(reqInfo),\n\t\t\tcurrent_page: this.getCurrentPageParam(reqInfo),\n\t\t\ttotal_pages: this.getTotalPages(allCategoryProductIds, this.generatePageSize(reqInfo)),\n\t\t\tproduct_ids: this.trimProductIdsToSinglePage(allCategoryProductIds, this.getCurrentPageParam(reqInfo), this.generatePageSize(reqInfo))\n\t\t});\n\n\t\tthis.category = this.categoryFactory.create({\n\t\t\tid: reqInfo.id,\n\t\t\ttotal_products: allCategoryProductIds.length,\n\t\t\tpage_size: this.generatePageSize(reqInfo),\n\t\t});\n\n    return reqInfo.utils.createResponse$(() => {\n      return {\n        body: {\n          category: this.category,\n          categoryPageConfigurationState: this.categoryPageConfigurationState,\n          products: this.productInMemoryBackendService.products\n        },\n        status: STATUS.OK\n      };\n    });\n\t}\n\t\n\tprivate getTotalPages(allIds: string[], pageSize: number) {\n\t\treturn Math.ceil(allIds.length/pageSize);\n\t}\n\n\tprivate trimProductIdsToSinglePage(allIds: any[], currentPage: number, pageSize: number) {\n\t\tconst tempIds = [...allIds];\n\t\ttempIds.splice(0, (currentPage-1) * pageSize);\n\t\ttempIds.splice(pageSize, tempIds.length-pageSize);\n\n\t\treturn tempIds;\n\t}\n\n\tprivate generateProductIdSubset(products: DaffProduct[]): string[] {\n\t\treturn randomSubset(products).map(product => product.id);\n\t}\n\n\tprivate generatePageSize(reqInfo) {\n\t\tif(reqInfo.req.params.map && reqInfo.req.params.map.get('page_size') && reqInfo.req.params.map.get('page_size')[0]) {\n\t\t\treturn parseInt(reqInfo.req.params.map.get('page_size')[0], 10);\n\t\t}\n\t\treturn 10;\n\t}\n\n\tprivate getCurrentPageParam(reqInfo) {\n\t\tif(reqInfo.req.params.map && reqInfo.req.params.map.get('current_page') && reqInfo.req.params.map.get('current_page')[0]) {\n\t\t\treturn parseInt(reqInfo.req.params.map.get('current_page')[0], 10);\n\t\t}\n\t\treturn 1;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DaffGetCategoryResponse, DaffCategoryServiceInterface, DaffCategoryRequest } from '@daffodil/category';\nimport { DaffProductFactory } from '@daffodil/product/testing';\n\nimport { DaffCategoryFactory } from '../../factories/category.factory';\nimport { DaffCategoryPageConfigurationStateFactory } from '../../factories/category-page-configuration-state.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingCategoryService implements DaffCategoryServiceInterface {\n \n  constructor(\n    private categoryFactory: DaffCategoryFactory,\n    private categoryPageConfigurationStateFactory: DaffCategoryPageConfigurationStateFactory,\n    private productFactory: DaffProductFactory\n  ) {}\n\n  get(categoryRequest: DaffCategoryRequest): Observable<DaffGetCategoryResponse> {\n    return of({\n      category: this.categoryFactory.create(),\n      categoryPageConfigurationState: this.categoryPageConfigurationStateFactory.create(),\n      products: this.productFactory.createMany(3)\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { DaffCategoryServiceInterface, DaffGetCategoryResponse, DaffCategoryRequest } from '@daffodil/category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryCategoryService implements DaffCategoryServiceInterface {\n  url = '/api/category/';\n\n  constructor(private http: HttpClient) {}\n\n  get(categoryRequest: DaffCategoryRequest): Observable<DaffGetCategoryResponse> {\n\t\tconst params = new HttpParams()\n\t\t\t.set('page_size', categoryRequest.page_size ? categoryRequest.page_size.toString() : null)\n\t\t\t.set('current_page', categoryRequest.current_page ? categoryRequest.current_page.toString() : null);\n\t\t\n    return this.http.get<DaffGetCategoryResponse>(this.url + categoryRequest.id, {params: params});\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffCategoryDriver } from '@daffodil/category';\n\nimport { DaffInMemoryCategoryService } from './category.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffCategoryInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffCategoryInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffCategoryDriver,\n          useExisting: DaffInMemoryCategoryService\n        }\n      ]\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffCategoryDriver } from '@daffodil/category';\n\nimport { DaffTestingCategoryService } from './category.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffCategoryTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffCategoryTestingDriverModule,\n      providers: [\n        {\n          provide: DaffCategoryDriver,\n          useExisting: DaffTestingCategoryService\n        }\n      ]\n    };\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { DaffProduct } from '@daffodil/product';\nimport {\n\tDaffCategoryFacadeInterface,\n\tDaffCategory,\n\tDaffCategoryPageConfigurationState,\n\tDaffCategoryFilter,\n\tDaffCategorySortOption,\n\tDaffCategoryAppliedFilter,\n\tDaffSortDirectionEnum\n} from '@daffodil/category';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffCategoryFacade implements DaffCategoryFacadeInterface {\n\n  category$: BehaviorSubject<DaffCategory> = new BehaviorSubject(null);\n  pageConfigurationState$: BehaviorSubject<DaffCategoryPageConfigurationState> = new BehaviorSubject(null);\n  currentPage$: BehaviorSubject<number> = new BehaviorSubject(null);\n\ttotalPages$: BehaviorSubject<number> = new BehaviorSubject(null);\n\ttotalProducts$: BehaviorSubject<number> = new BehaviorSubject(null);\n  pageSize$: BehaviorSubject<number> = new BehaviorSubject(null);\n  filters$: BehaviorSubject<DaffCategoryFilter[]> = new BehaviorSubject([]);\n  sortOptions$: BehaviorSubject<DaffCategorySortOption[]> = new BehaviorSubject([]);\n  appliedFilters$: BehaviorSubject<DaffCategoryAppliedFilter[]> = new BehaviorSubject([]);\n  appliedSortOption$: BehaviorSubject<string> = new BehaviorSubject(null);\n  appliedSortDirection$: BehaviorSubject<DaffSortDirectionEnum> = new BehaviorSubject(null);\n  products$: BehaviorSubject<DaffProduct[]> = new BehaviorSubject([]);\n  categoryLoading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  productsLoading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\terrors$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\tisCategoryEmpty$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\n\tgetCategoryById(id: string): BehaviorSubject<DaffCategory> {\n\t\treturn new BehaviorSubject(null);\n\t};\n\tgetProductsByCategory(categoryId: string): BehaviorSubject<DaffProduct[]> {\n\t\treturn new BehaviorSubject([]);\n\t};\n\tgetTotalProductsByCategory(categoryId: string): BehaviorSubject<number> {\n\t\treturn new BehaviorSubject(null);\n\t};\n  dispatch(action: Action) {};\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffCategoryFacade } from '@daffodil/category';\n\nimport { MockDaffCategoryFacade } from './mock-category-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffCategoryFacade, useExisting: MockDaffCategoryFacade }\n\t]\n})\nexport class DaffCategoryTestingModule { }\n"],"names":["faker.random","faker.commerce"],"mappings":"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"}