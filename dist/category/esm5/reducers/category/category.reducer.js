/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DaffCategoryActionTypes } from '../../actions/category.actions';
import { toggleCategoryFilter } from './toggle-filter/core';
/** @type {?} */
var initialState = {
    categoryPageConfigurationState: {
        id: null,
        filter_requests: [],
        applied_sort_option: null,
        applied_sort_direction: null,
        current_page: null,
        page_size: null,
        total_pages: null,
        filters: [],
        sort_options: [],
        total_products: null,
        product_ids: []
    },
    categoryLoading: false,
    productsLoading: false,
    errors: []
};
/**
 * @template T, U, V, W
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function daffCategoryReducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case DaffCategoryActionTypes.CategoryLoadAction:
            return tslib_1.__assign({}, state, { categoryLoading: true, productsLoading: true });
        // This reducer must assume the call will be successful, and immediately set the applied filters to state, because the
        // GetCategory magento call doesn't return currently applied filters. If there is a bug where the wrong filters are somehow
        // applied by Magento, then this will result in a bug. Until Magento returns applied filters with a category call, this is
        // unavoidable.
        case DaffCategoryActionTypes.CategoryPageLoadAction:
            return tslib_1.__assign({}, state, { categoryLoading: true, productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, action.request) });
        case DaffCategoryActionTypes.ChangeCategoryPageSizeAction:
            return tslib_1.__assign({}, state, { productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { page_size: action.pageSize }) });
        case DaffCategoryActionTypes.ChangeCategoryCurrentPageAction:
            return tslib_1.__assign({}, state, { productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { current_page: action.currentPage }) });
        case DaffCategoryActionTypes.ChangeCategorySortingOptionAction:
            return tslib_1.__assign({}, state, { productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { applied_sort_option: action.sort.option, applied_sort_direction: action.sort.direction }) });
        case DaffCategoryActionTypes.ChangeCategoryFiltersAction:
            return tslib_1.__assign({}, state, { productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { filter_requests: action.filters }) });
        case DaffCategoryActionTypes.ToggleCategoryFilterAction:
            return tslib_1.__assign({}, state, { productsLoading: true, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { filter_requests: toggleCategoryFilter(action.filter, state.categoryPageConfigurationState.filter_requests) }) });
        // This reducer cannot spread over state, because this would wipe out the applied filters on state. Applied filters are not
        // set here for reasons stated above.
        case DaffCategoryActionTypes.CategoryLoadSuccessAction:
        case DaffCategoryActionTypes.CategoryPageLoadSuccessAction:
            return tslib_1.__assign({}, state, { categoryLoading: false, productsLoading: false, categoryPageConfigurationState: tslib_1.__assign({}, state.categoryPageConfigurationState, { id: action.response.categoryPageConfigurationState.id, current_page: action.response.categoryPageConfigurationState.current_page, page_size: action.response.categoryPageConfigurationState.page_size, filters: action.response.categoryPageConfigurationState.filters, sort_options: action.response.categoryPageConfigurationState.sort_options, total_pages: action.response.categoryPageConfigurationState.total_pages, total_products: action.response.categoryPageConfigurationState.total_products, product_ids: action.response.categoryPageConfigurationState.product_ids }) });
        case DaffCategoryActionTypes.CategoryLoadFailureAction:
        case DaffCategoryActionTypes.CategoryPageLoadFailureAction:
            return tslib_1.__assign({}, state, { categoryLoading: false, productsLoading: false, errors: [action.errorMessage] });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,