/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DaffCategoryActionTypes } from '../../actions/category.actions';
import { toggleCategoryFilter } from './toggle-filter/core';
/** @type {?} */
const initialState = {
    categoryPageConfigurationState: {
        id: null,
        filter_requests: [],
        applied_sort_option: null,
        applied_sort_direction: null,
        current_page: null,
        page_size: null,
        total_pages: null,
        filters: [],
        sort_options: [],
        total_products: null,
        product_ids: []
    },
    categoryLoading: false,
    productsLoading: false,
    errors: []
};
/**
 * @template T, U, V, W
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function daffCategoryReducer(state = initialState, action) {
    switch (action.type) {
        case DaffCategoryActionTypes.CategoryLoadAction:
            return Object.assign({}, state, { categoryLoading: true, productsLoading: true });
        // This reducer must assume the call will be successful, and immediately set the applied filters to state, because the
        // GetCategory magento call doesn't return currently applied filters. If there is a bug where the wrong filters are somehow
        // applied by Magento, then this will result in a bug. Until Magento returns applied filters with a category call, this is
        // unavoidable.
        case DaffCategoryActionTypes.CategoryPageLoadAction:
            return Object.assign({}, state, { categoryLoading: true, productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, action.request) });
        case DaffCategoryActionTypes.ChangeCategoryPageSizeAction:
            return Object.assign({}, state, { productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { page_size: action.pageSize }) });
        case DaffCategoryActionTypes.ChangeCategoryCurrentPageAction:
            return Object.assign({}, state, { productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { current_page: action.currentPage }) });
        case DaffCategoryActionTypes.ChangeCategorySortingOptionAction:
            return Object.assign({}, state, { productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { applied_sort_option: action.sort.option, applied_sort_direction: action.sort.direction }) });
        case DaffCategoryActionTypes.ChangeCategoryFiltersAction:
            return Object.assign({}, state, { productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { filter_requests: action.filters }) });
        case DaffCategoryActionTypes.ToggleCategoryFilterAction:
            return Object.assign({}, state, { productsLoading: true, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { filter_requests: toggleCategoryFilter(action.filter, state.categoryPageConfigurationState.filter_requests) }) });
        // This reducer cannot spread over state, because this would wipe out the applied filters on state. Applied filters are not
        // set here for reasons stated above.
        case DaffCategoryActionTypes.CategoryLoadSuccessAction:
        case DaffCategoryActionTypes.CategoryPageLoadSuccessAction:
            return Object.assign({}, state, { categoryLoading: false, productsLoading: false, categoryPageConfigurationState: Object.assign({}, state.categoryPageConfigurationState, { id: action.response.categoryPageConfigurationState.id, current_page: action.response.categoryPageConfigurationState.current_page, page_size: action.response.categoryPageConfigurationState.page_size, filters: action.response.categoryPageConfigurationState.filters, sort_options: action.response.categoryPageConfigurationState.sort_options, total_pages: action.response.categoryPageConfigurationState.total_pages, total_products: action.response.categoryPageConfigurationState.total_products, product_ids: action.response.categoryPageConfigurationState.product_ids }) });
        case DaffCategoryActionTypes.CategoryLoadFailureAction:
        case DaffCategoryActionTypes.CategoryPageLoadFailureAction:
            return Object.assign({}, state, { categoryLoading: false, productsLoading: false, errors: [action.errorMessage] });
        default:
            return state;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcnkucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYWZmb2RpbC9jYXRlZ29yeS8iLCJzb3VyY2VzIjpbInJlZHVjZXJzL2NhdGVnb3J5L2NhdGVnb3J5LnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBdUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU5RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7TUFLdEQsWUFBWSxHQUF1QztJQUN4RCw4QkFBOEIsRUFBRTtRQUM3QixFQUFFLEVBQUUsSUFBSTtRQUNWLGVBQWUsRUFBRSxFQUFFO1FBQ2pCLG1CQUFtQixFQUFFLElBQUk7UUFDekIsc0JBQXNCLEVBQUUsSUFBSTtRQUM1QixZQUFZLEVBQUUsSUFBSTtRQUNsQixTQUFTLEVBQUUsSUFBSTtRQUNmLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLE9BQU8sRUFBRSxFQUFFO1FBQ2IsWUFBWSxFQUFFLEVBQUU7UUFDaEIsY0FBYyxFQUFFLElBQUk7UUFDcEIsV0FBVyxFQUFFLEVBQUU7S0FDZjtJQUNELGVBQWUsRUFBRSxLQUFLO0lBQ3RCLGVBQWUsRUFBRSxLQUFLO0lBQ3JCLE1BQU0sRUFBRSxFQUFFO0NBQ1g7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQUssR0FBRyxZQUFZLEVBQUUsTUFBdUM7SUFDN0QsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssdUJBQXVCLENBQUMsa0JBQWtCO1lBQzdDLHlCQUNLLEtBQUssSUFDWixlQUFlLEVBQUUsSUFBSSxFQUNyQixlQUFlLEVBQUUsSUFBSSxJQUNqQjtRQUVKLHNIQUFzSDtRQUN0SCwySEFBMkg7UUFDM0gsMEhBQTBIO1FBQzFILGVBQWU7UUFDZixLQUFLLHVCQUF1QixDQUFDLHNCQUFzQjtZQUNqRCx5QkFDSyxLQUFLLElBQ1osZUFBZSxFQUFFLElBQUksRUFDckIsZUFBZSxFQUFFLElBQUksRUFDakIsOEJBQThCLG9CQUN6QixLQUFLLENBQUMsOEJBQThCLEVBQ3BDLE1BQU0sQ0FBQyxPQUFPLEtBRXRCO1FBQ0gsS0FBSyx1QkFBdUIsQ0FBQyw0QkFBNEI7WUFDeEQseUJBQ0ksS0FBSyxJQUNSLGVBQWUsRUFBRSxJQUFJLEVBQ3JCLDhCQUE4QixvQkFDMUIsS0FBSyxDQUFDLDhCQUE4QixJQUN2QyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsT0FFMUI7UUFDSCxLQUFLLHVCQUF1QixDQUFDLCtCQUErQjtZQUMzRCx5QkFDSSxLQUFLLElBQ1IsZUFBZSxFQUFFLElBQUksRUFDckIsOEJBQThCLG9CQUMxQixLQUFLLENBQUMsOEJBQThCLElBQ3ZDLFlBQVksRUFBRSxNQUFNLENBQUMsV0FBVyxPQUVoQztRQUNILEtBQUssdUJBQXVCLENBQUMsaUNBQWlDO1lBQzdELHlCQUNJLEtBQUssSUFDUixlQUFlLEVBQUUsSUFBSSxFQUNyQiw4QkFBOEIsb0JBQzFCLEtBQUssQ0FBQyw4QkFBOEIsSUFDdkMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQ3ZDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxPQUU3QztRQUNILEtBQUssdUJBQXVCLENBQUMsMkJBQTJCO1lBQ3ZELHlCQUNJLEtBQUssSUFDUixlQUFlLEVBQUUsSUFBSSxFQUNyQiw4QkFBOEIsb0JBQzFCLEtBQUssQ0FBQyw4QkFBOEIsSUFDdkMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxPQUFPLE9BRS9CO1FBQ0gsS0FBSyx1QkFBdUIsQ0FBQywwQkFBMEI7WUFDdEQseUJBQ0ksS0FBSyxJQUNSLGVBQWUsRUFBRSxJQUFJLEVBQ3JCLDhCQUE4QixvQkFDMUIsS0FBSyxDQUFDLDhCQUE4QixJQUN2QyxlQUFlLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsOEJBQThCLENBQUMsZUFBZSxDQUFDLE9BRTNHO1FBQ0EsMkhBQTJIO1FBQzNILHFDQUFxQztRQUN2QyxLQUFLLHVCQUF1QixDQUFDLHlCQUF5QixDQUFDO1FBQ3ZELEtBQUssdUJBQXVCLENBQUMsNkJBQTZCO1lBQ3RELHlCQUNLLEtBQUssSUFDWixlQUFlLEVBQUUsS0FBSyxFQUN0QixlQUFlLEVBQUUsS0FBSyxFQUNsQiw4QkFBOEIsb0JBQ3pCLEtBQUssQ0FBQyw4QkFBOEIsSUFDdkMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsRUFBRSxFQUNyRCxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxZQUFZLEVBQ3pFLFNBQVMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLFNBQVMsRUFDbkUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsT0FBTyxFQUMvRCxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxZQUFZLEVBQzlFLFdBQVcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLFdBQVcsRUFDdkUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsY0FBYyxFQUM3RSxXQUFXLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxXQUFXLE9BRXBFO1FBQ0osS0FBSyx1QkFBdUIsQ0FBQyx5QkFBeUIsQ0FBQztRQUN2RCxLQUFLLHVCQUF1QixDQUFDLDZCQUE2QjtZQUN4RCx5QkFDSyxLQUFLLElBQ1osZUFBZSxFQUFFLEtBQUssRUFDdEIsZUFBZSxFQUFFLEtBQUssRUFDbEIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUM3QjtRQUNKO1lBQ0UsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGFmZlByb2R1Y3QgfSBmcm9tICdAZGFmZm9kaWwvcHJvZHVjdCc7XG5cbmltcG9ydCB7IERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLCBEYWZmQ2F0ZWdvcnlBY3Rpb25zIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jYXRlZ29yeS5hY3Rpb25zJztcbmltcG9ydCB7IERhZmZDYXRlZ29yeVJlZHVjZXJTdGF0ZSB9IGZyb20gJy4vY2F0ZWdvcnktcmVkdWNlci1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgdG9nZ2xlQ2F0ZWdvcnlGaWx0ZXIgfSBmcm9tICcuL3RvZ2dsZS1maWx0ZXIvY29yZSc7XG5pbXBvcnQgeyBEYWZmQ2F0ZWdvcnlSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3JlcXVlc3RzL2NhdGVnb3J5LXJlcXVlc3QnO1xuaW1wb3J0IHsgRGFmZkNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZSB9IGZyb20gJy4uLy4uL21vZGVscy9jYXRlZ29yeS1wYWdlLWNvbmZpZ3VyYXRpb24tc3RhdGUnO1xuaW1wb3J0IHsgRGFmZkdlbmVyaWNDYXRlZ29yeSB9IGZyb20gJy4uLy4uL21vZGVscy9nZW5lcmljLWNhdGVnb3J5JztcblxuY29uc3QgaW5pdGlhbFN0YXRlOiBEYWZmQ2F0ZWdvcnlSZWR1Y2VyU3RhdGU8YW55LCBhbnk+ID0ge1xuXHRjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcbiAgICBpZDogbnVsbCxcblx0XHRmaWx0ZXJfcmVxdWVzdHM6IFtdLFxuICAgIGFwcGxpZWRfc29ydF9vcHRpb246IG51bGwsXG4gICAgYXBwbGllZF9zb3J0X2RpcmVjdGlvbjogbnVsbCxcbiAgICBjdXJyZW50X3BhZ2U6IG51bGwsXG4gICAgcGFnZV9zaXplOiBudWxsLFxuICAgIHRvdGFsX3BhZ2VzOiBudWxsLFxuICAgIGZpbHRlcnM6IFtdLFxuXHRcdHNvcnRfb3B0aW9uczogW10sXG5cdFx0dG90YWxfcHJvZHVjdHM6IG51bGwsXG5cdFx0cHJvZHVjdF9pZHM6IFtdXG5cdH0sXG5cdGNhdGVnb3J5TG9hZGluZzogZmFsc2UsXG5cdHByb2R1Y3RzTG9hZGluZzogZmFsc2UsXG4gIGVycm9yczogW11cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkYWZmQ2F0ZWdvcnlSZWR1Y2VyPFQgZXh0ZW5kcyBEYWZmQ2F0ZWdvcnlSZXF1ZXN0LCBVIGV4dGVuZHMgRGFmZkdlbmVyaWNDYXRlZ29yeTxVPiwgViBleHRlbmRzIERhZmZDYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU8VD4sIFcgZXh0ZW5kcyBEYWZmUHJvZHVjdD5cblx0KHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IERhZmZDYXRlZ29yeUFjdGlvbnM8VCwgVSwgViwgVz4pOiBEYWZmQ2F0ZWdvcnlSZWR1Y2VyU3RhdGU8VCwgVj4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBEYWZmQ2F0ZWdvcnlBY3Rpb25UeXBlcy5DYXRlZ29yeUxvYWRBY3Rpb246XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcblx0XHRcdFx0Y2F0ZWdvcnlMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRwcm9kdWN0c0xvYWRpbmc6IHRydWUsXG4gICAgICB9O1xuXG4gICAgLy8gVGhpcyByZWR1Y2VyIG11c3QgYXNzdW1lIHRoZSBjYWxsIHdpbGwgYmUgc3VjY2Vzc2Z1bCwgYW5kIGltbWVkaWF0ZWx5IHNldCB0aGUgYXBwbGllZCBmaWx0ZXJzIHRvIHN0YXRlLCBiZWNhdXNlIHRoZVxuICAgIC8vIEdldENhdGVnb3J5IG1hZ2VudG8gY2FsbCBkb2Vzbid0IHJldHVybiBjdXJyZW50bHkgYXBwbGllZCBmaWx0ZXJzLiBJZiB0aGVyZSBpcyBhIGJ1ZyB3aGVyZSB0aGUgd3JvbmcgZmlsdGVycyBhcmUgc29tZWhvd1xuICAgIC8vIGFwcGxpZWQgYnkgTWFnZW50bywgdGhlbiB0aGlzIHdpbGwgcmVzdWx0IGluIGEgYnVnLiBVbnRpbCBNYWdlbnRvIHJldHVybnMgYXBwbGllZCBmaWx0ZXJzIHdpdGggYSBjYXRlZ29yeSBjYWxsLCB0aGlzIGlzXG4gICAgLy8gdW5hdm9pZGFibGUuXG4gICAgY2FzZSBEYWZmQ2F0ZWdvcnlBY3Rpb25UeXBlcy5DYXRlZ29yeVBhZ2VMb2FkQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG5cdFx0XHRcdGNhdGVnb3J5TG9hZGluZzogdHJ1ZSxcblx0XHRcdFx0cHJvZHVjdHNMb2FkaW5nOiB0cnVlLFxuICAgICAgICBjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUsXG4gICAgICAgICAgLi4uYWN0aW9uLnJlcXVlc3Rcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRjYXNlIERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLkNoYW5nZUNhdGVnb3J5UGFnZVNpemVBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0cHJvZHVjdHNMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUsXG5cdFx0XHRcdFx0cGFnZV9zaXplOiBhY3Rpb24ucGFnZVNpemVcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRjYXNlIERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLkNoYW5nZUNhdGVnb3J5Q3VycmVudFBhZ2VBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0cHJvZHVjdHNMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUsXG5cdFx0XHRcdFx0Y3VycmVudF9wYWdlOiBhY3Rpb24uY3VycmVudFBhZ2Vcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRjYXNlIERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLkNoYW5nZUNhdGVnb3J5U29ydGluZ09wdGlvbkFjdGlvbjpcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLnN0YXRlLFxuXHRcdFx0XHRwcm9kdWN0c0xvYWRpbmc6IHRydWUsXG5cdFx0XHRcdGNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZToge1xuXHRcdFx0XHRcdC4uLnN0YXRlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZSxcblx0XHRcdFx0XHRhcHBsaWVkX3NvcnRfb3B0aW9uOiBhY3Rpb24uc29ydC5vcHRpb24sXG5cdFx0XHRcdFx0YXBwbGllZF9zb3J0X2RpcmVjdGlvbjogYWN0aW9uLnNvcnQuZGlyZWN0aW9uXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0Y2FzZSBEYWZmQ2F0ZWdvcnlBY3Rpb25UeXBlcy5DaGFuZ2VDYXRlZ29yeUZpbHRlcnNBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0cHJvZHVjdHNMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUsXG5cdFx0XHRcdFx0ZmlsdGVyX3JlcXVlc3RzOiBhY3Rpb24uZmlsdGVyc1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdGNhc2UgRGFmZkNhdGVnb3J5QWN0aW9uVHlwZXMuVG9nZ2xlQ2F0ZWdvcnlGaWx0ZXJBY3Rpb246XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5zdGF0ZSxcblx0XHRcdFx0cHJvZHVjdHNMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRjYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGU6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUsXG5cdFx0XHRcdFx0ZmlsdGVyX3JlcXVlc3RzOiB0b2dnbGVDYXRlZ29yeUZpbHRlcihhY3Rpb24uZmlsdGVyLCBzdGF0ZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUuZmlsdGVyX3JlcXVlc3RzKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG4gICAgLy8gVGhpcyByZWR1Y2VyIGNhbm5vdCBzcHJlYWQgb3ZlciBzdGF0ZSwgYmVjYXVzZSB0aGlzIHdvdWxkIHdpcGUgb3V0IHRoZSBhcHBsaWVkIGZpbHRlcnMgb24gc3RhdGUuIEFwcGxpZWQgZmlsdGVycyBhcmUgbm90XG4gICAgLy8gc2V0IGhlcmUgZm9yIHJlYXNvbnMgc3RhdGVkIGFib3ZlLlxuXHRcdGNhc2UgRGFmZkNhdGVnb3J5QWN0aW9uVHlwZXMuQ2F0ZWdvcnlMb2FkU3VjY2Vzc0FjdGlvbjpcblx0XHRjYXNlIERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLkNhdGVnb3J5UGFnZUxvYWRTdWNjZXNzQWN0aW9uOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG5cdFx0XHRcdGNhdGVnb3J5TG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdHByb2R1Y3RzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZToge1xuICAgICAgICAgIC4uLnN0YXRlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZSxcbiAgICAgICAgICBpZDogYWN0aW9uLnJlc3BvbnNlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZS5pZCxcbiAgICAgICAgICBjdXJyZW50X3BhZ2U6IGFjdGlvbi5yZXNwb25zZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUuY3VycmVudF9wYWdlLFxuICAgICAgICAgIHBhZ2Vfc2l6ZTogYWN0aW9uLnJlc3BvbnNlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZS5wYWdlX3NpemUsXG4gICAgICAgICAgZmlsdGVyczogYWN0aW9uLnJlc3BvbnNlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZS5maWx0ZXJzLFxuICAgICAgICAgIHNvcnRfb3B0aW9uczogYWN0aW9uLnJlc3BvbnNlLmNhdGVnb3J5UGFnZUNvbmZpZ3VyYXRpb25TdGF0ZS5zb3J0X29wdGlvbnMsXG5cdFx0XHRcdFx0dG90YWxfcGFnZXM6IGFjdGlvbi5yZXNwb25zZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUudG90YWxfcGFnZXMsXG5cdFx0XHRcdFx0dG90YWxfcHJvZHVjdHM6IGFjdGlvbi5yZXNwb25zZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUudG90YWxfcHJvZHVjdHMsXG5cdFx0XHRcdFx0cHJvZHVjdF9pZHM6IGFjdGlvbi5yZXNwb25zZS5jYXRlZ29yeVBhZ2VDb25maWd1cmF0aW9uU3RhdGUucHJvZHVjdF9pZHNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICBjYXNlIERhZmZDYXRlZ29yeUFjdGlvblR5cGVzLkNhdGVnb3J5TG9hZEZhaWx1cmVBY3Rpb246XG4gICAgY2FzZSBEYWZmQ2F0ZWdvcnlBY3Rpb25UeXBlcy5DYXRlZ29yeVBhZ2VMb2FkRmFpbHVyZUFjdGlvbjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuXHRcdFx0XHRjYXRlZ29yeUxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRwcm9kdWN0c0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IFthY3Rpb24uZXJyb3JNZXNzYWdlXVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iXX0=