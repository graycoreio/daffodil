{"version":3,"file":"daffodil-navigation-state.js","sources":["ng://@daffodil/navigation/state/actions/navigation.actions.ts","ng://@daffodil/navigation/state/reducers/navigation/navigation.reducer.ts","ng://@daffodil/navigation/state/reducers/navigation-reducers.ts","ng://@daffodil/navigation/state/reducers/navigation-store-feature-key.ts","ng://@daffodil/navigation/state/selectors/navigation.selector.ts","ng://@daffodil/navigation/state/facades/navigation.facade.ts","ng://@daffodil/navigation/state/effects/navigation.effects.ts","ng://@daffodil/navigation/state/navigation-state.module.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { DaffGenericNavigationTree } from '@daffodil/navigation';\n\nexport enum DaffNavigationActionTypes {\n  NavigationLoadAction = '[Daff-Navigation] Navigation Load Action',\n  NavigationLoadSuccessAction = '[Daff-Navigation] Navigation Load Success Action',\n  NavigationLoadFailureAction = '[Daff-Navigation] Navigation Load Failure Action'\n}\n\nexport class DaffNavigationLoad implements Action {\n  readonly type = DaffNavigationActionTypes.NavigationLoadAction;\n\n  constructor(public payload: string) { }\n}\n\nexport class DaffNavigationLoadSuccess<T extends DaffGenericNavigationTree<T>> implements Action {\n  readonly type = DaffNavigationActionTypes.NavigationLoadSuccessAction;\n\n  constructor(public payload: T) { }\n}\n\nexport class DaffNavigationLoadFailure implements Action {\n  readonly type = DaffNavigationActionTypes.NavigationLoadFailureAction;\n\n  constructor(public payload: string) { }\n}\n\nexport type DaffNavigationActions<T extends DaffGenericNavigationTree<T>> =\n  | DaffNavigationLoad\n  | DaffNavigationLoadSuccess<T>\n  | DaffNavigationLoadFailure;\n","import { DaffGenericNavigationTree } from '@daffodil/navigation';\n\nimport { DaffNavigationActionTypes, DaffNavigationActions } from '../../actions/navigation.actions';\nimport { DaffNavigationReducerState } from './navigation-reducer-state.interface';\n\nexport const initialState: DaffNavigationReducerState<any> = {\n\tnavigationTree: null,\n\tloading: false,\n\terrors: []\n};\n\nexport function daffNavigationReducer <T extends DaffGenericNavigationTree<T>>\n\t(state: DaffNavigationReducerState<T> = initialState, action: DaffNavigationActions<T>): DaffNavigationReducerState<T> {\n  switch (action.type) {\n    case DaffNavigationActionTypes.NavigationLoadAction:\n      return {...state, loading: true};\n    case DaffNavigationActionTypes.NavigationLoadSuccessAction:\n      return {...state, loading: false, navigationTree: action.payload};\n    case DaffNavigationActionTypes.NavigationLoadFailureAction:\n      return {...state,\n        loading: false,\n        errors: [action.payload]\n      };\n    default:\n      return state;\n  }\n}\n","import { daffNavigationReducer } from './navigation/navigation.reducer';\n\nexport const daffNavigationReducers = {\n\tnavigation: daffNavigationReducer\n}\n","export const DAFF_NAVIGATION_STORE_FEATURE_KEY = 'daffNavigation';\n","import { createSelector, createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffGenericNavigationTree } from '@daffodil/navigation';\n\nimport { DaffNavigationReducersState, DaffNavigationReducerState, DAFF_NAVIGATION_STORE_FEATURE_KEY } from '../reducers/public_api';\n\nexport interface DaffNavigationMemoizedSelectors<T extends DaffGenericNavigationTree<T>> {\n\tselectNavigationFeatureState: MemoizedSelector<object, DaffNavigationReducersState<T>>;\n\tselectNavigationState: MemoizedSelector<object, DaffNavigationReducerState<T>>;\n\tselectNavigationTree: MemoizedSelector<object, T>;\n\tselectNavigationLoading: MemoizedSelector<object, boolean>;\n\tselectNavigationErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createNavigationFeatureSelectors = <T extends DaffGenericNavigationTree<T>>(): DaffNavigationMemoizedSelectors<T> => {\n\n\tconst selectNavigationFeatureState = createFeatureSelector<DaffNavigationReducersState<T>>(DAFF_NAVIGATION_STORE_FEATURE_KEY);\n\n\tconst selectNavigationState = createSelector(\n\t\tselectNavigationFeatureState,\n\t\t(state: DaffNavigationReducersState<T>) => state.navigation\n\t);\n\n\tconst selectNavigationTree = createSelector(\n\t\tselectNavigationState,\n\t\t(state: DaffNavigationReducerState<T>) => state.navigationTree\n\t);\n\n\tconst selectNavigationLoading = createSelector(\n\t\tselectNavigationState,\n\t\t(state: DaffNavigationReducerState<T>) => state.loading\n\t);\n\n\tconst selectNavigationErrors = createSelector(\n\t\tselectNavigationState,\n\t\t(state: DaffNavigationReducerState<T>) => state.errors\n\t);\n\n\treturn {\n\t\tselectNavigationFeatureState,\n\t\tselectNavigationState,\n\t\tselectNavigationTree,\n\t\tselectNavigationLoading,\n\t\tselectNavigationErrors\n\t}\n}\n\nexport const getDaffNavigationSelectors = (() => {\n\tlet cache;\n\treturn <T extends DaffGenericNavigationTree<T>>(): DaffNavigationMemoizedSelectors<T> => cache = cache\n\t\t? cache\n\t\t: createNavigationFeatureSelectors<T>();\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store, select, Action } from '@ngrx/store';\n\nimport { DaffGenericNavigationTree } from '@daffodil/navigation';\n\nimport { getDaffNavigationSelectors } from '../selectors/navigation.selector';\nimport { DaffNavigationReducersState } from '../reducers/navigation-reducers.interface';\nimport { DaffNavigationFacadeInterface } from './navigation-facade.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffNavigationFacade<T extends DaffGenericNavigationTree<T>> implements DaffNavigationFacadeInterface<T> {\n  /**\n   * The navigation retrieved in a single navigation call.\n   */\n  tree$: Observable<T>;\n  /**\n   * The loading state for retrieving a single navigation.\n   */\n  loading$: Observable<boolean>;\n  /**\n   * Errors associated with retrieving a single navigation.\n   */\n  errors$: Observable<string[]>;\n\n  constructor(private store: Store<DaffNavigationReducersState<T>>) {\n\t\tconst {\n\t\t\tselectNavigationTree,\n\t\t\tselectNavigationLoading,\n\t\t\tselectNavigationErrors\n\t\t} = getDaffNavigationSelectors<T>();\n\n    this.tree$ = this.store.pipe(select(selectNavigationTree));\n    this.loading$ = this.store.pipe(select(selectNavigationLoading));\n    this.errors$ = this.store.pipe(select(selectNavigationErrors));\n  }\n\n  /**\n   * Dispatches the given action.\n   * @param action action to dispatch.\n   */\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { of, Observable } from 'rxjs';\n\nimport { DaffGenericNavigationTree } from '@daffodil/navigation';\nimport { DaffNavigationDriver, DaffNavigationServiceInterface } from '@daffodil/navigation/driver';\n\nimport {\n  DaffNavigationActionTypes,\n  DaffNavigationLoad,\n  DaffNavigationLoadSuccess,\n  DaffNavigationLoadFailure\n} from '../actions/navigation.actions';\n\n@Injectable()\nexport class DaffNavigationEffects<T extends DaffGenericNavigationTree<T>> {\n\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffNavigationDriver) private driver: DaffNavigationServiceInterface<T>){}\n\n  @Effect()\n  loadNavigation$ : Observable<any> = this.actions$.pipe(\n    ofType(DaffNavigationActionTypes.NavigationLoadAction),\n    switchMap((action: DaffNavigationLoad) =>\n      this.driver.get(action.payload)\n        .pipe(\n          map((resp) => {\n            return new DaffNavigationLoadSuccess(resp);\n          }),\n          catchError(error => {\n            return of(new DaffNavigationLoadFailure('Failed to load the navigation tree'));\n          })\n        )\n    )\n  )\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { daffNavigationReducers } from './reducers/navigation-reducers';\nimport { DaffNavigationEffects } from './effects/navigation.effects';\nimport { DAFF_NAVIGATION_STORE_FEATURE_KEY } from './reducers/public_api';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(DAFF_NAVIGATION_STORE_FEATURE_KEY, daffNavigationReducers),\n    EffectsModule.forFeature([DaffNavigationEffects]),\n  ]\n})\nexport class DaffNavigationStateModule { }\n"],"names":["tslib_1.__decorate"],"mappings":"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"}