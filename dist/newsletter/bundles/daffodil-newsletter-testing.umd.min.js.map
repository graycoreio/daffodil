{"version":3,"sources":["ng://@daffodil/newsletter/testing/drivers/testing/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter-driver.module.ts","ng://@daffodil/newsletter/testing/in-memory-backend/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/testing/testing.module.ts","ng://@daffodil/newsletter/testing/helpers/mock-newsletter-facade.ts","ng://@daffodil/newsletter/testing/helpers/newsletter-testing.module.ts"],"names":["DaffTestingNewsletterService","prototype","send","payload","of","pipe","delay","Injectable","args","providedIn","DaffInMemoryNewsletterService","http","this","url","post","HttpClient","DaffNewsletterInMemoryDriverModule","forRoot","ngModule","providers","provide","DaffNewsletterDriver","useExisting","NgModule","imports","CommonModule","DaffInMemoryBackendNewsletterService","newsletters","parseRequestUrl","utils","createDb","reqInfo","undefined","Error","indexOf","push","DaffNewsletterTestingDriverModule","useClass","MockDaffNewsletterFacade","success$","BehaviorSubject","error$","loading$","dispatch","action","DaffNewsletterTestingModule","DaffNewsletterFacade"],"mappings":"0qBACA,IAAAA,EAAA,WAKA,SAAAA,YAKEA,EAAAC,UAAAC,KAAA,SAAKC,GACH,OAAOC,EAAAA,GAAG,WAAWC,KAAKC,EAAAA,MAAM,0BANnCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHANd,GCWAC,EAAA,WAME,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAFpBC,KAAAC,IAAM,2BAUNH,EAAAT,UAAAC,KAAA,SAAKC,GACH,OAAOS,KAAKD,KAAKG,KAA0BF,KAAKC,IAAKV,wBAfxDI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDARLM,EAAAA,+IAOT,GCLA,IAAAC,EAAA,WAAA,SAAAA,KAiBA,OAXSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,qBACTC,YAAaZ,0BAZtBa,EAAAA,SAAQf,KAAA,CAAC,CACRgB,QAAS,CACPC,EAAAA,kBAeJT,EAjBA,GCNAU,EAAA,WAIA,SAAAA,IAIEd,KAAAe,YAAqC,UAErCD,EAAAzB,UAAA2B,gBAAA,SAAgBf,EAAagB,GAC3B,OAAOA,EAAMD,gBAAgBf,IAG/Ba,EAAAzB,UAAA6B,SAAA,WACE,MAAO,CACLH,YAAaf,KAAKe,cAKtBD,EAAAzB,UAAAa,KAAA,SAAKiB,GACH,YAAgBC,IAAZD,EACKE,MAAM,wBAENrB,KAAKe,YAAYO,QAAQH,IAAY,EACrCE,MAAM,gCAGbrB,KAAKe,YAAYQ,KAAKJ,GACfA,wBA1BZxB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHALd,GCDA,IAAA2B,EAAA,WAIA,SAAAA,KAaA,OAXSA,EAAAnB,QAAP,WACE,MAAO,CACLC,SAAUkB,EACVjB,UAAW,CACT,CACEC,QAASC,EAAAA,qBACTgB,SAAUrC,0BARnBuB,EAAAA,WAaDa,EAjBA,GCAAE,EAAA,WAMA,SAAAA,IAEE1B,KAAA2B,SAAsC,IAAIC,EAAAA,iBAAgB,GAC1D5B,KAAA6B,OAAkC,IAAID,EAAAA,gBAAgB,MACtD5B,KAAA8B,SAAqC,IAAIF,EAAAA,iBAAgB,UAEzDF,EAAArC,UAAA0C,SAAA,SAASC,yBANVrC,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAY,kHANzB,GCAA,IAAAoC,EAAA,WAMA,SAAAA,KAK2C,2BAL1CtB,EAAAA,SAAQf,KAAA,CAAC,CACRW,UAAW,CACX,CAAEC,QAAS0B,EAAAA,qBAAsBxB,YAAagB,QAGLO,EAX3C","sourcesContent":["import { DaffNewsletterSubmission, DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { Observable, of, BehaviorSubject, timer } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterServiceInterface } from '@daffodil/newsletter';\nimport { delay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DaffTestingNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, any>{\n  send(payload: DaffNewsletterUnion): Observable<any>{\n    return of('Success').pipe(delay(10));\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs';\n\nimport { DaffNewsletterServiceInterface} from '@daffodil/newsletter';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * The newsletter inmemory driver to mock the newsletter backend service.\n * \n * @Param HttpClient\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, DaffNewsletterUnion>{\n  url = '/api/newsletters/';\n\n  constructor(private http: HttpClient) { }\n  \n  /**\n   * Sends your newsletter submission data.\n   * \n   * @param payload DaffNewsletterUnion\n   * @returns An Observable of DaffNewsletterUnion\n   */\n  send(payload: DaffNewsletterUnion): Observable<DaffNewsletterUnion> {\n    return this.http.post<DaffNewsletterUnion>(this.url, payload);\n  }\n\n}","import { CommonModule } from '@angular/common';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffInMemoryNewsletterService } from './newsletter.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n/**\n * Module for providing the DaffInMemoryNewsletterService driver to your application\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffNewsletterInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useExisting: DaffInMemoryNewsletterService\n        }\n      ]\n    }\n  }\n}","import { InMemoryDbService, RequestInfoUtilities, ParsedRequestUrl, STATUS } from 'angular-in-memory-web-api';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendNewsletterService implements InMemoryDbService {\n  newsletters: DaffNewsletterUnion[] = [];\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  createDb(): any {\n    return {\n      newsletters: this.newsletters\n    };\n  }\n  //validate that its not empty\n  //validate that it doesn't already exist\n  post(reqInfo: any) {\n    if (reqInfo === undefined) {\n      return Error('Payload is undefined');\n    }\n    else if (this.newsletters.indexOf(reqInfo) > -1) {\n      return Error('Already contains submission');\n    }\n    else {\n      this.newsletters.push(reqInfo);\n      return reqInfo;\n    }\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffTestingNewsletterService } from './newsletter.service';\n\n@NgModule()\nexport class DaffNewsletterTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterTestingDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useClass: DaffTestingNewsletterService\n        }\n      ]\n    };\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { DaffNewsletterFacadeInterface } from '@daffodil/newsletter';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffNewsletterFacade implements DaffNewsletterFacadeInterface {\n  success$ : BehaviorSubject<boolean> = new BehaviorSubject(false);\n  error$: BehaviorSubject<string> = new BehaviorSubject(null);\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  dispatch(action: Action) {}\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffNewsletterFacade } from '@daffodil/newsletter';\n\nimport { MockDaffNewsletterFacade } from './mock-newsletter-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffNewsletterFacade, useExisting: MockDaffNewsletterFacade }\n\t]\n})\nexport class DaffNewsletterTestingModule { }\n"]}