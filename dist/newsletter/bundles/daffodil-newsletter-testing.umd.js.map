{"version":3,"file":"daffodil-newsletter-testing.umd.js","sources":["ng://@daffodil/newsletter/testing/drivers/testing/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter-driver.module.ts","ng://@daffodil/newsletter/testing/in-memory-backend/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/testing/testing.module.ts","ng://@daffodil/newsletter/testing/helpers/mock-newsletter-facade.ts","ng://@daffodil/newsletter/testing/helpers/newsletter-testing.module.ts"],"sourcesContent":["import { DaffNewsletterSubmission, DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { Observable, of, BehaviorSubject, timer } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterServiceInterface } from '@daffodil/newsletter';\nimport { delay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DaffTestingNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, any>{\n  send(payload: DaffNewsletterUnion): Observable<any>{\n    return of('Success').pipe(delay(10));\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs';\n\nimport { DaffNewsletterServiceInterface} from '@daffodil/newsletter';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * The newsletter inmemory driver to mock the newsletter backend service.\n * \n * @Param HttpClient\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, DaffNewsletterUnion>{\n  url = '/api/newsletters/';\n\n  constructor(private http: HttpClient) { }\n  \n  /**\n   * Sends your newsletter submission data.\n   * \n   * @param payload DaffNewsletterUnion\n   * @returns An Observable of DaffNewsletterUnion\n   */\n  send(payload: DaffNewsletterUnion): Observable<DaffNewsletterUnion> {\n    return this.http.post<DaffNewsletterUnion>(this.url, payload);\n  }\n\n}","import { CommonModule } from '@angular/common';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffInMemoryNewsletterService } from './newsletter.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n/**\n * Module for providing the DaffInMemoryNewsletterService driver to your application\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffNewsletterInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useExisting: DaffInMemoryNewsletterService\n        }\n      ]\n    }\n  }\n}","import { InMemoryDbService, RequestInfoUtilities, ParsedRequestUrl, STATUS } from 'angular-in-memory-web-api';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendNewsletterService implements InMemoryDbService {\n  newsletters: DaffNewsletterUnion[] = [];\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  createDb(): any {\n    return {\n      newsletters: this.newsletters\n    };\n  }\n  //validate that its not empty\n  //validate that it doesn't already exist\n  post(reqInfo: any) {\n    if (reqInfo === undefined) {\n      return Error('Payload is undefined');\n    }\n    else if (this.newsletters.indexOf(reqInfo) > -1) {\n      return Error('Already contains submission');\n    }\n    else {\n      this.newsletters.push(reqInfo);\n      return reqInfo;\n    }\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffTestingNewsletterService } from './newsletter.service';\n\n@NgModule()\nexport class DaffNewsletterTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterTestingDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useClass: DaffTestingNewsletterService\n        }\n      ]\n    };\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { DaffNewsletterFacadeInterface } from '@daffodil/newsletter';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffNewsletterFacade implements DaffNewsletterFacadeInterface {\n  success$ : BehaviorSubject<boolean> = new BehaviorSubject(false);\n  error$: BehaviorSubject<string> = new BehaviorSubject(null);\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  dispatch(action: Action) {}\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffNewsletterFacade } from '@daffodil/newsletter';\n\nimport { MockDaffNewsletterFacade } from './mock-newsletter-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffNewsletterFacade, useExisting: MockDaffNewsletterFacade }\n\t]\n})\nexport class DaffNewsletterTestingModule { }\n"],"names":["of","delay","Injectable","HttpClient","DaffNewsletterDriver","NgModule","CommonModule","BehaviorSubject","DaffNewsletterFacade"],"mappings":"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"}