{"version":3,"file":"daffodil-newsletter.js","sources":["ng://@daffodil/newsletter/actions/newsletter.actions.ts","ng://@daffodil/newsletter/reducers/newsletter.reducer.ts","ng://@daffodil/newsletter/selectors/newsletter.selector.ts","ng://@daffodil/newsletter/driver/hubspot/newsletter.service.ts","ng://@daffodil/newsletter/driver/interfaces/newsletter-service.interface.ts","ng://@daffodil/newsletter/driver/hubspot/config/newsletter-config.interface.ts","ng://@daffodil/newsletter/driver/hubspot/hubspot-driver.module.ts","ng://@daffodil/newsletter/effects/newsletter.effects.ts","ng://@daffodil/newsletter/newsletter.module.ts","ng://@daffodil/newsletter/facades/newsletter.facade.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { DaffNewsletterSubmission } from '../models/newsletter.model';\n\nexport enum DaffNewsletterActionTypes {\n  NewsletterSubscribeAction = '[Daff-Newsletter] Newsletter Subscribe Action',\n  NewsletterCancelAction = '[Daff-Newsletter] Newsletter Cancel Action',\n  NewsletterSuccessSubscribeAction = '[Daff-Newsletter] Succeeded on Newsletter Subscribe Action',\n  NewsletterFailedSubscribeAction = '[Daff-Newsletter] Failed on Newsletter Subscribe Action',\n  NewsletterRetry = '[Daff-Newsletter] Retrying submission',\n  NewsletterReset = '[Daff-Newsletter] Reset Newsletter'\n}\n\nexport class DaffNewsletterSubscribe<T extends DaffNewsletterSubmission> implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterSubscribeAction;\n\n  constructor(public payload: T) { }\n}\nexport class DaffNewsletterRetry<T extends DaffNewsletterSubmission> implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterRetry;\n\n  constructor(public payload: T) { }\n}\n\nexport class DaffNewsletterCancel implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterCancelAction;\n\n}\nexport class DaffNewsletterFailedSubscribe implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterFailedSubscribeAction;\n\n  constructor(public payload: string) { }\n}\nexport class DaffNewsletterSuccessSubscribe implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterSuccessSubscribeAction;\n}\nexport class DaffNewsletterReset implements Action {\n  readonly type = DaffNewsletterActionTypes.NewsletterReset;\n}\n\nexport type DaffNewsletterActions<T extends DaffNewsletterSubmission> = \n  DaffNewsletterSubscribe<T> |\n  DaffNewsletterSuccessSubscribe |\n  DaffNewsletterFailedSubscribe |\n  DaffNewsletterReset |\n  DaffNewsletterRetry<T> |\n  DaffNewsletterCancel;","import { DaffNewsletterSubmission } from './../models/newsletter.model';\nimport { DaffNewsletterActions, DaffNewsletterActionTypes } from './../actions/newsletter.actions';\n\nexport interface DaffNewsletterState {\n  success: boolean;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: DaffNewsletterState = {\n  success: false,\n  loading: false,\n  error: null\n}\n\nexport function reducer<T extends DaffNewsletterSubmission>(state: DaffNewsletterState = initialState, action: DaffNewsletterActions<T>) {\n  switch (action.type) {\n    case DaffNewsletterActionTypes.NewsletterRetry:\n    case DaffNewsletterActionTypes.NewsletterSubscribeAction:\n      return {...state, loading: true};\n    case DaffNewsletterActionTypes.NewsletterFailedSubscribeAction:\n      return { ...state, loading: false, error: action.payload };\n    case DaffNewsletterActionTypes.NewsletterCancelAction:\n      return { ...state, loading: false};\n    case DaffNewsletterActionTypes.NewsletterSuccessSubscribeAction:\n        return { ...state, success: true, loading: false};\n    case DaffNewsletterActionTypes.NewsletterReset:\n        return {...state, ...initialState};\n    default:\n      return state;\n  }\n}","import { createSelector, MemoizedSelector, createFeatureSelector } from '@ngrx/store';\nimport { DaffNewsletterState } from '../reducers/newsletter.reducer';\n\nexport interface State {\n  newsletter: DaffNewsletterState\n}\n\n/**\n * Feature State Selector\n */\nconst selectNewsletterFeatureState: \n  MemoizedSelector<State, DaffNewsletterState> = createFeatureSelector<DaffNewsletterState>('newsletter');\n\n\n/**\n * Child key of feature state\n */\nexport const selectDaffNewsletterLoading = createSelector(\n  selectNewsletterFeatureState,\n  (state: DaffNewsletterState) => state.loading\n);\n\nexport const selectDaffNewsletterError = createSelector(\n  selectNewsletterFeatureState,\n  (state: DaffNewsletterState) => state.error\n);\n\nexport const selectDaffNewsletterSuccess = createSelector(\n  selectNewsletterFeatureState,\n  (state: DaffNewsletterState) => state.success\n);","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DaffHubspotFormsService } from '@daffodil/driver/hubspot';\n\nimport { DaffNewsletterUnion } from '../../models/newsletter-union';\nimport { DaffNewsletterServiceInterface } from '../interfaces/newsletter-service.interface';\n\n@Injectable()\nexport class DaffNewsletterHubspotService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, any> {\n  \n  constructor(private hubspotService: DaffHubspotFormsService) {}\n  \n  send(payload: DaffNewsletterUnion): Observable<any> {\n    return this.hubspotService.submit(payload)\n  }  \n}\n","import { Observable } from 'rxjs';\nimport { InjectionToken } from '@angular/core';\nimport { DaffNewsletterSubmission } from '../../models/newsletter.model';\n\nexport const DaffNewsletterDriver = new InjectionToken('DaffNewsletterDriver');\nexport interface DaffNewsletterServiceInterface<T extends DaffNewsletterSubmission, V> {\n\tsend(email: T): Observable<V>;\n}","import { InjectionToken } from '@angular/core';\nimport { DaffHubspotConfig } from '@daffodil/driver/hubspot';\n\nexport const DaffNewsletterConfigToken = new InjectionToken<DaffHubspotConfig>('DaffNewsletterConfig')","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\n\nimport { DaffHubspotConfig, DaffHubspotFormsService, daffHubspotFormsServiceFactory } from '@daffodil/driver/hubspot';\n\nimport { DaffNewsletterHubspotService } from './newsletter.service';\nimport { DaffNewsletterDriver } from '../interfaces/newsletter-service.interface';\nimport { DaffNewsletterConfigToken } from './config/newsletter-config.interface';\n\n@NgModule({\n\timports: [CommonModule],\n})\nexport class DaffNewsletterHubSpotDriverModule {\n\tstatic forRoot(\n\t\tconfig: DaffHubspotConfig,\n\t): ModuleWithProviders<DaffNewsletterHubSpotDriverModule> {\n\t\treturn {\n\t\t\tngModule: DaffNewsletterHubSpotDriverModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: DaffNewsletterDriver,\n\t\t\t\t\tuseClass: DaffNewsletterHubspotService,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: DaffNewsletterConfigToken,\n\t\t\t\t\tuseValue: config,\n\t\t\t\t},\n\t\t\t\t{\n          provide: DaffHubspotFormsService, \n          useFactory: daffHubspotFormsServiceFactory, \n          deps: [\n            HttpClient,\n            DOCUMENT, \n            Router, \n            Title, \n            DaffNewsletterConfigToken\n          ],\n        }\n\t\t\t],\n\t\t};\n\t}\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { of, EMPTY } from 'rxjs';\n\nimport { Actions, Effect, ofType, createEffect } from '@ngrx/effects';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Action } from '@ngrx/store';\n\nimport { DaffNewsletterActionTypes, DaffNewsletterSubscribe, DaffNewsletterSuccessSubscribe, DaffNewsletterFailedSubscribe, DaffNewsletterRetry, DaffNewsletterCancel } from '../actions/newsletter.actions';\nimport { DaffNewsletterSubmission } from '../models/newsletter.model';\nimport { DaffNewsletterDriver, DaffNewsletterServiceInterface } from '../driver/public_api';\n\n@Injectable()\nexport class DaffNewsletterEffects<T extends DaffNewsletterSubmission, V>{\n\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffNewsletterDriver) private driver: DaffNewsletterServiceInterface<T, V>) { }\n\n  trySubmission$: Observable<Action> = createEffect(() => this.actions$.pipe(\n    ofType(DaffNewsletterActionTypes.NewsletterSubscribeAction,\n      DaffNewsletterActionTypes.NewsletterRetry,\n      DaffNewsletterActionTypes.NewsletterCancelAction),\n    switchMap((action: DaffNewsletterSubscribe<T> | DaffNewsletterRetry<T> | DaffNewsletterCancel) => {\n      if ((action.type === DaffNewsletterActionTypes.NewsletterCancelAction)) {\n        return of(action);\n      }\n      else if (action instanceof DaffNewsletterSubscribe || action instanceof DaffNewsletterRetry){\n        return this.driver.send(action.payload).pipe(\n          map((resp: V) => {\n            return new DaffNewsletterSuccessSubscribe();\n          }),\n          catchError(error => {\n            return of(new DaffNewsletterFailedSubscribe('Failed to subscribe to newsletter'));\n          })\n        )\n      }\n    }),\n    ofType(DaffNewsletterActionTypes.NewsletterFailedSubscribeAction, DaffNewsletterActionTypes.NewsletterSuccessSubscribeAction)\n  ));\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StoreModule } from '@ngrx/store';\nimport { reducer } from './reducers/newsletter.reducer'\nimport { EffectsModule } from '@ngrx/effects';\nimport { DaffNewsletterEffects } from './effects/newsletter.effects';\n\n@NgModule({\n  imports: [\n      CommonModule,\n       StoreModule.forFeature('newsletter', reducer),\n       EffectsModule.forFeature([\n         DaffNewsletterEffects\n       ])\n  ]\n})\nexport class DaffNewsletterModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store, Action } from '@ngrx/store';\n\nimport { State, selectDaffNewsletterSuccess, selectDaffNewsletterError, selectDaffNewsletterLoading } from '../selectors/newsletter.selector';\nimport { DaffNewsletterModule } from '../newsletter.module';\nimport { DaffNewsletterFacadeInterface } from './newsletter-facade.interface';\n\n@Injectable( {providedIn: DaffNewsletterModule} )\nexport class DaffNewsletterFacade implements DaffNewsletterFacadeInterface {\n  success$ : Observable<boolean> = this.store.select(selectDaffNewsletterSuccess);\n  error$: Observable<string> = this.store.select(selectDaffNewsletterError);\n  loading$: Observable<boolean> = this.store.select(selectDaffNewsletterLoading);\n\n  constructor(private store: Store<State>){\n\n  }\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}"],"names":[],"mappings":"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"}