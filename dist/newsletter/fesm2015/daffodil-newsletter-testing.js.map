{"version":3,"file":"daffodil-newsletter-testing.js","sources":["ng://@daffodil/newsletter/testing/drivers/testing/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/in-memory/newsletter-driver.module.ts","ng://@daffodil/newsletter/testing/in-memory-backend/newsletter.service.ts","ng://@daffodil/newsletter/testing/drivers/testing/testing.module.ts","ng://@daffodil/newsletter/testing/helpers/mock-newsletter-facade.ts","ng://@daffodil/newsletter/testing/helpers/newsletter-testing.module.ts"],"sourcesContent":["import { DaffNewsletterSubmission, DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { Observable, of, BehaviorSubject, timer } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterServiceInterface } from '@daffodil/newsletter';\nimport { delay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DaffTestingNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, any>{\n  send(payload: DaffNewsletterUnion): Observable<any>{\n    return of('Success').pipe(delay(10));\n  }\n}","import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs';\n\nimport { DaffNewsletterServiceInterface} from '@daffodil/newsletter';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * The newsletter inmemory driver to mock the newsletter backend service.\n * \n * @Param HttpClient\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryNewsletterService implements DaffNewsletterServiceInterface<DaffNewsletterUnion, DaffNewsletterUnion>{\n  url = '/api/newsletters/';\n\n  constructor(private http: HttpClient) { }\n  \n  /**\n   * Sends your newsletter submission data.\n   * \n   * @param payload DaffNewsletterUnion\n   * @returns An Observable of DaffNewsletterUnion\n   */\n  send(payload: DaffNewsletterUnion): Observable<DaffNewsletterUnion> {\n    return this.http.post<DaffNewsletterUnion>(this.url, payload);\n  }\n\n}","import { CommonModule } from '@angular/common';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffInMemoryNewsletterService } from './newsletter.service';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n/**\n * Module for providing the DaffInMemoryNewsletterService driver to your application\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffNewsletterInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useExisting: DaffInMemoryNewsletterService\n        }\n      ]\n    }\n  }\n}","import { InMemoryDbService, RequestInfoUtilities, ParsedRequestUrl, STATUS } from 'angular-in-memory-web-api';\nimport { Injectable } from '@angular/core';\nimport { DaffNewsletterUnion } from '@daffodil/newsletter';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendNewsletterService implements InMemoryDbService {\n  newsletters: DaffNewsletterUnion[] = [];\n\n  parseRequestUrl(url: string, utils: RequestInfoUtilities): ParsedRequestUrl {\n    return utils.parseRequestUrl(url);\n  }\n\n  createDb(): any {\n    return {\n      newsletters: this.newsletters\n    };\n  }\n  //validate that its not empty\n  //validate that it doesn't already exist\n  post(reqInfo: any) {\n    if (reqInfo === undefined) {\n      return Error('Payload is undefined');\n    }\n    else if (this.newsletters.indexOf(reqInfo) > -1) {\n      return Error('Already contains submission');\n    }\n    else {\n      this.newsletters.push(reqInfo);\n      return reqInfo;\n    }\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DaffNewsletterDriver } from '@daffodil/newsletter';\nimport { DaffTestingNewsletterService } from './newsletter.service';\n\n@NgModule()\nexport class DaffNewsletterTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffNewsletterTestingDriverModule,\n      providers: [\n        {\n          provide: DaffNewsletterDriver,\n          useClass: DaffTestingNewsletterService\n        }\n      ]\n    };\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { DaffNewsletterFacadeInterface } from '@daffodil/newsletter';\n\n@Injectable({providedIn: 'root'})\nexport class MockDaffNewsletterFacade implements DaffNewsletterFacadeInterface {\n  success$ : BehaviorSubject<boolean> = new BehaviorSubject(false);\n  error$: BehaviorSubject<string> = new BehaviorSubject(null);\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  dispatch(action: Action) {}\n}\n","import { NgModule } from '@angular/core';\n\nimport { DaffNewsletterFacade } from '@daffodil/newsletter';\n\nimport { MockDaffNewsletterFacade } from './mock-newsletter-facade';\n\n@NgModule({\n  providers: [\n\t\t{ provide: DaffNewsletterFacade, useExisting: MockDaffNewsletterFacade }\n\t]\n})\nexport class DaffNewsletterTestingModule { }\n"],"names":[],"mappings":";;;;;;;;;;;AACA,MASa,4BAA4B;;;;;IACvC,IAAI,CAAC,OAA4B;QAC/B,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;KACtC;;;YAPF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;ACRD;;;;;AAeA,MAAa,6BAA6B;;;;IAGxC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAG,mBAAmB,CAAC;KAEe;;;;;;;IAQzC,IAAI,CAAC,OAA4B;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAsB,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAC/D;;;YAhBF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YATQ,UAAU;;;;;IAWjB,4CAA0B;;;;;IAEd,6CAAwB;;;;;;;AClBtC;;;AAYA,MAAa,kCAAkC;;;;IAC7C,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,kCAAkC;YAC5C,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,WAAW,EAAE,6BAA6B;iBAC3C;aACF;SACF,CAAA;KACF;;;YAhBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;aACF;;;;;;;ACVD,MAOa,oCAAoC;IAHjD;QAIE,gBAAW,GAA0B,EAAE,CAAC;KAyBzC;;;;;;IAvBC,eAAe,CAAC,GAAW,EAAE,KAA2B;QACtD,OAAO,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;KACnC;;;;IAED,QAAQ;QACN,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;KACH;;;;;;;IAGD,IAAI,CAAC,OAAY;QACf,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,OAAO,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACtC;aACI,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAC7C;aACI;YACH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,OAAO,OAAO,CAAC;SAChB;KACF;;;YA5BF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;IAEC,2DAAwC;;;;;;;ACT1C,MAKa,iCAAiC;;;;IAC5C,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,iCAAiC;YAC3C,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,4BAA4B;iBACvC;aACF;SACF,CAAC;KACH;;;YAZF,QAAQ;;;;;;;ACJT,MAOa,wBAAwB;IADrC;QAEE,aAAQ,GAA8B,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QACjE,WAAM,GAA4B,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5D,aAAQ,GAA6B,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;KAGjE;;;;;IADC,QAAQ,CAAC,MAAc,KAAI;;;YAN5B,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;;;;IAE9B,4CAAiE;;IACjE,0CAA4D;;IAC5D,4CAAgE;;;;;;;ACVlE,MAWa,2BAA2B;;;YALvC,QAAQ,SAAC;gBACR,SAAS,EAAE;oBACX,EAAE,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,wBAAwB,EAAE;iBACxE;aACD;;;;;;;;;;;;;;;"}