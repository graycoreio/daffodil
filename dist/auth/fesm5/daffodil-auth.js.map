{"version":3,"file":"daffodil-auth.js","sources":["ng://@daffodil/auth/actions/auth.actions.ts","ng://@daffodil/auth/reducers/auth/auth-initial-state.ts","ng://@daffodil/auth/reducers/auth/auth.reducer.ts","ng://@daffodil/auth/reducers/login/login-initial-state.ts","ng://@daffodil/auth/reducers/login/login.reducer.ts","ng://@daffodil/auth/reducers/register/register-initial-state.ts","ng://@daffodil/auth/reducers/register/register.reducer.ts","ng://@daffodil/auth/reducers/auth-store-feature-key.ts","ng://@daffodil/auth/reducers/auth-reducers.ts","ng://@daffodil/auth/selectors/auth-feature.selector.ts","ng://@daffodil/auth/selectors/auth/auth.selector.ts","ng://@daffodil/auth/selectors/login/login.selector.ts","ng://@daffodil/auth/selectors/register/register.selector.ts","ng://@daffodil/auth/selectors/auth-all.selector.ts","ng://@daffodil/auth/facades/auth.facade.ts","ng://@daffodil/auth/drivers/interfaces/register-service.interface.ts","ng://@daffodil/auth/drivers/interfaces/login-service.interface.ts","ng://@daffodil/auth/drivers/interfaces/auth-service.interface.ts","ng://@daffodil/auth/storage/auth-storage.service.ts","ng://@daffodil/auth/effects/auth.effects.ts","ng://@daffodil/auth/auth-state.module.ts","ng://@daffodil/auth/auth.module.ts","ng://@daffodil/auth/drivers/magento/transforms/login-info-transformer.service.ts","ng://@daffodil/auth/drivers/magento/queries/check-token.ts","ng://@daffodil/auth/drivers/magento/queries/create-customer.ts","ng://@daffodil/auth/drivers/magento/queries/generate-token.ts","ng://@daffodil/auth/drivers/magento/queries/revoke-customer-token.ts","ng://@daffodil/auth/drivers/magento/errors/codes.ts","ng://@daffodil/auth/errors/unauthorized.ts","ng://@daffodil/auth/errors/authentication-failed.ts","ng://@daffodil/auth/errors/invalid-api-response.ts","ng://@daffodil/auth/drivers/magento/errors/map.ts","ng://@daffodil/auth/drivers/magento/errors/transform.ts","ng://@daffodil/auth/drivers/magento/register.service.ts","ng://@daffodil/auth/drivers/magento/transforms/auth-transformer.service.ts","ng://@daffodil/auth/drivers/magento/validators/check-token.ts","ng://@daffodil/auth/drivers/magento/validators/generate-token.ts","ng://@daffodil/auth/drivers/magento/validators/revoke-token.ts","ng://@daffodil/auth/drivers/magento/login.service.ts","ng://@daffodil/auth/drivers/magento/auth.service.ts","ng://@daffodil/auth/drivers/magento/auth-driver.module.ts","ng://@daffodil/auth/guards/member-only.guard.ts","ng://@daffodil/auth/guards/guest-only.guard.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n\nimport { DaffLoginInfo } from '../models/login-info';\nimport { DaffAuthToken } from '../models/auth-token';\nimport { DaffAccountRegistration } from '../models/account-registration';\n\nexport enum DaffAuthActionTypes {\n  AuthGuardCheckAction = '[Daff-Auth] Auth Guard Check Action',\n  AuthGuardCheckCompletionAction = '[Daff-Auth] Auth Guard Check Completion Action',\n  AuthStorageFailureAction = '[Daff-Auth] Auth Storage Failure Action',\n  AuthLoginAction = '[Daff-Auth] Auth Login Action',\n  AuthLoginSuccessAction = '[Daff-Auth] Auth Login Success Action',\n  AuthLoginFailureAction = '[Daff-Auth] Auth Login Failure Action',\n  AuthLogoutAction = '[Daff-Auth] Auth Logout Action',\n  AuthLogoutSuccessAction = '[Daff-Auth] Auth Logout Success Action',\n  AuthLogoutFailureAction = '[Daff-Auth] Auth Logout Failure Action',\n  AuthCheckAction = '[Daff-Auth] Auth Check Action',\n  AuthCheckSuccessAction = '[Daff-Auth] Auth Check Success Action',\n  AuthCheckFailureAction = '[Daff-Auth] Auth Check Failure Action',\n  AuthRegisterAction = '[Daff-Auth] Auth Register Action',\n  AuthRegisterSuccessAction = '[Daff-Auth] Auth Register Success Action',\n  AuthRegisterFailureAction = '[Daff-Auth] Auth Register Failure Action',\n}\n\n/**\n * An action triggered by guards to initialize an auth check request.\n */\nexport class DaffAuthGuardCheck implements Action {\n  readonly type = DaffAuthActionTypes.AuthGuardCheckAction;\n}\n\n/**\n * An action triggered on the completion of a guard token check.\n */\nexport class DaffAuthGuardCheckCompletion implements Action {\n  readonly type = DaffAuthActionTypes.AuthGuardCheckCompletionAction;\n\n  constructor(public result: boolean) {}\n}\n\n/*\n * An action triggered upon a failed auth storage operation.\n */\nexport class DaffAuthStorageFailure implements Action {\n  readonly type = DaffAuthActionTypes.AuthStorageFailureAction;\n\n  constructor(public errorMessage: string) {}\n}\n\n/**\n * An action triggered to initialize a auth login request.\n */\nexport class DaffAuthLogin<T extends DaffLoginInfo> implements Action {\n  readonly type = DaffAuthActionTypes.AuthLoginAction;\n\n  constructor(public loginInfo: T) {}\n}\n\n/**\n * An action triggered upon a successful auth login.\n *\n * @param token - the customer access token\n */\nexport class DaffAuthLoginSuccess<T extends DaffAuthToken> implements Action {\n  readonly type = DaffAuthActionTypes.AuthLoginSuccessAction;\n\n  constructor(public auth: T) {}\n}\n\n/**\n * An action triggered upon a failed auth login request.\n *\n * @param errorMessage - an error message\n */\nexport class DaffAuthLoginFailure implements Action {\n  readonly type = DaffAuthActionTypes.AuthLoginFailureAction;\n\n  constructor(public errorMessage: string) {}\n}\n\n/**\n * An action triggered to initialize a logout request.\n */\nexport class DaffAuthLogout implements Action {\n  readonly type = DaffAuthActionTypes.AuthLogoutAction;\n}\n\n/**\n * An action triggered upon a successful logout.\n *\n * @param token - the customer access token\n */\nexport class DaffAuthLogoutSuccess implements Action {\n  readonly type = DaffAuthActionTypes.AuthLogoutSuccessAction;\n}\n\n/**\n * An action triggered upon a failed logout request.\n *\n * @param errorMessage - an error message\n */\nexport class DaffAuthLogoutFailure implements Action {\n  readonly type = DaffAuthActionTypes.AuthLogoutFailureAction;\n\n  constructor(public errorMessage: string) {}\n}\n\n\n/**\n * An action triggered to initialize an auth check request.\n */\nexport class DaffAuthCheck implements Action {\n  readonly type = DaffAuthActionTypes.AuthCheckAction;\n}\n\n/**\n * An action triggered upon a successful auth check.\n *\n * @param token - the customer access token\n */\nexport class DaffAuthCheckSuccess implements Action {\n  readonly type = DaffAuthActionTypes.AuthCheckSuccessAction;\n}\n\n/**\n * An action triggered upon a failed auth check request.\n *\n * @param errorMessage - an error message\n */\nexport class DaffAuthCheckFailure implements Action {\n  readonly type = DaffAuthActionTypes.AuthCheckFailureAction;\n\n  constructor(public errorMessage: string) {}\n}\n\n/**\n * An action triggered to initialize a auth register request.\n *\n * @param registration\n */\nexport class DaffAuthRegister<T extends DaffAccountRegistration> implements Action {\n  readonly type = DaffAuthActionTypes.AuthRegisterAction;\n\n  constructor(public registration: T) {}\n}\n\n/**\n * An action triggered upon a successful auth register request.\n *\n * @param token - the customer access token\n */\nexport class DaffAuthRegisterSuccess<T extends DaffLoginInfo> implements Action {\n  readonly type = DaffAuthActionTypes.AuthRegisterSuccessAction;\n\n  constructor(public loginInfo: T) {}\n}\n\n/**\n * An action triggered upon a failed auth request.\n *\n * @param errorMessage - an error message\n */\nexport class DaffAuthRegisterFailure implements Action {\n  readonly type = DaffAuthActionTypes.AuthRegisterFailureAction;\n\n  constructor(public errorMessage: string) {}\n}\n\nexport type DaffAuthActions<\n  T extends DaffLoginInfo,\n  U extends DaffAuthToken,\n  S extends DaffAccountRegistration,\n> =\n  | DaffAuthGuardCheckCompletion\n  | DaffAuthGuardCheck\n  | DaffAuthStorageFailure\n  | DaffAuthLogin<T>\n  | DaffAuthLoginSuccess<U>\n  | DaffAuthLoginFailure\n  | DaffAuthLogout\n  | DaffAuthLogoutSuccess\n  | DaffAuthLogoutFailure\n  | DaffAuthCheck\n  | DaffAuthCheckSuccess\n  | DaffAuthCheckFailure\n  | DaffAuthRegister<S>\n  | DaffAuthRegisterSuccess<T>\n  | DaffAuthRegisterFailure\n","import { DaffAuthReducerState } from './auth-reducer-state.interface';\n\nexport const daffAuthInitialState: DaffAuthReducerState = {\n  loading: false,\n  errors: []\n};\n","import { DaffAuthActionTypes, DaffAuthActions } from '../../actions/auth.actions';\nimport { DaffAuthReducerState } from './auth-reducer-state.interface';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAccountRegistration } from '../../models/account-registration';\nimport { daffAuthInitialState } from './auth-initial-state';\n\nexport function daffAuthReducer<\n  T extends DaffLoginInfo,\n  U extends DaffAuthToken,\n  S extends DaffAccountRegistration,\n>(\n  state = daffAuthInitialState,\n  action: DaffAuthActions<\n    T,\n    U,\n    S\n  >\n): DaffAuthReducerState {\n  switch (action.type) {\n    case DaffAuthActionTypes.AuthCheckAction:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case DaffAuthActionTypes.AuthCheckSuccessAction:\n      return {\n        ...state,\n        loading: false\n      };\n\n    case DaffAuthActionTypes.AuthCheckFailureAction:\n      return {\n        ...state,\n        loading: false,\n        errors: [action.errorMessage]\n      };\n\n    default:\n      return state;\n  }\n}\n","import { DaffAuthLoginReducerState } from './login-reducer-state.interface';\n\nexport const daffAuthLoginInitialState: DaffAuthLoginReducerState<any> = {\n  auth: null,\n  loading: false,\n  errors: []\n};\n","import { DaffAuthActionTypes, DaffAuthActions } from '../../actions/auth.actions';\nimport { DaffAuthLoginReducerState } from './login-reducer-state.interface';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAccountRegistration } from '../../models/account-registration';\nimport { daffAuthLoginInitialState } from './login-initial-state';\n\nexport function daffAuthLoginReducer<\n  T extends DaffLoginInfo,\n  U extends DaffAuthToken,\n  S extends DaffAccountRegistration,\n>(\n  state = daffAuthLoginInitialState,\n  action: DaffAuthActions<\n    T,\n    U,\n    S\n  >\n): DaffAuthLoginReducerState<U> {\n  switch (action.type) {\n    case DaffAuthActionTypes.AuthLoginAction:\n    case DaffAuthActionTypes.AuthLogoutAction:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case DaffAuthActionTypes.AuthLoginSuccessAction:\n      return {\n        ...state,\n        loading: false,\n        auth: action.auth\n      };\n\n    case DaffAuthActionTypes.AuthLogoutSuccessAction:\n      return {\n        ...state,\n        auth: null,\n        loading: false,\n      };\n\n    case DaffAuthActionTypes.AuthLoginFailureAction:\n    case DaffAuthActionTypes.AuthLogoutFailureAction:\n      return {\n        ...state,\n        loading: false,\n        errors: [action.errorMessage]\n      };\n\n    default:\n      return state;\n  }\n}\n","import { DaffAuthRegisterReducerState } from './register-reducer-state.interface';\n\nexport const daffAuthRegisterInitialState: DaffAuthRegisterReducerState = {\n  loading: false,\n  errors: []\n};\n","import { DaffAuthActionTypes, DaffAuthActions } from '../../actions/auth.actions';\nimport { DaffAuthRegisterReducerState } from './register-reducer-state.interface';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAccountRegistration } from '../../models/account-registration';\nimport { daffAuthRegisterInitialState } from './register-initial-state';\n\nexport function daffAuthRegisterReducer<\n  T extends DaffLoginInfo,\n  U extends DaffAuthToken,\n  S extends DaffAccountRegistration,\n>(\n  state = daffAuthRegisterInitialState,\n  action: DaffAuthActions<\n    T,\n    U,\n    S\n  >\n): DaffAuthRegisterReducerState {\n  switch (action.type) {\n    case DaffAuthActionTypes.AuthRegisterAction:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case DaffAuthActionTypes.AuthRegisterSuccessAction:\n      return {\n        ...state,\n        loading: false\n      };\n\n    case DaffAuthActionTypes.AuthRegisterFailureAction:\n      return {\n        ...state,\n        loading: false,\n        errors: [action.errorMessage]\n      };\n\n    default:\n      return state;\n  }\n}\n","export const DAFF_AUTH_STORE_FEATURE_KEY = 'daffAuth';\n","import { daffAuthReducer } from './auth/public_api';\nimport { daffAuthLoginReducer } from './login/public_api';\nimport { daffAuthRegisterReducer } from './register/public_api';\n\nexport const daffAuthReducers = {\n  auth: daffAuthReducer,\n  login: daffAuthLoginReducer,\n  register: daffAuthRegisterReducer\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { DaffAuthFeatureState, DAFF_AUTH_STORE_FEATURE_KEY } from '../reducers/public_api';\nimport { DaffAuthToken } from '../models/auth-token';\n\n/**\n * Feature State Selector\n */\nexport const getDaffAuthFeatureStateSelector = (() => {\n  let cache;\n  return <T extends DaffAuthToken>(): MemoizedSelector<object, DaffAuthFeatureState<T>> =>\n    cache = cache || createFeatureSelector<DaffAuthFeatureState<T>>(DAFF_AUTH_STORE_FEATURE_KEY)\n})();\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { getDaffAuthFeatureStateSelector } from '../auth-feature.selector';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport {\n  DaffAuthReducerState\n} from '../../reducers/public_api';\n\n\nexport interface AuthSelectors {\n  selectAuthState: MemoizedSelector<object, DaffAuthReducerState>;\n  selectAuthLoading: MemoizedSelector<object, boolean>;\n  selectAuthErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createAuthSelectors = <T extends DaffAuthToken>() => {\n  const selectAuthState = createSelector(\n    getDaffAuthFeatureStateSelector<T>(),\n    state => state.auth\n  )\n\n  const selectAuthLoading = createSelector(\n    selectAuthState,\n    state => state.loading\n  );\n\n  const selectAuthErrors = createSelector(\n    selectAuthState,\n    state => state.errors\n  );\n\n  return {\n    selectAuthState,\n    selectAuthLoading,\n    selectAuthErrors,\n  }\n};\n\nexport const getAuthSelectors = (() => {\n  let cache;\n  return <T extends DaffAuthToken>(): AuthSelectors =>\n    cache = cache || createAuthSelectors<T>()\n})();\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { getDaffAuthFeatureStateSelector } from '../auth-feature.selector';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport { DaffAuthFeatureState } from '../../reducers/auth-feature-state.interface';\nimport { DaffAuthLoginReducerState } from '../../reducers/public_api';\n\nexport interface DaffAuthLoginSelectors<T extends DaffAuthToken> {\n  selectAuthLoginState: MemoizedSelector<object, DaffAuthLoginReducerState<T>>;\n  selectAuthLoginLoading: MemoizedSelector<object, boolean>;\n  selectAuthLoginErrors: MemoizedSelector<object, string[]>;\n  selectAuthLoginToken: MemoizedSelector<object, T>;\n  selectAuthLoginTokenValue: MemoizedSelector<object, T['token']>;\n}\n\nconst createLoginSelectors = <T extends DaffAuthToken>() => {\n  const selectAuthLoginState = createSelector(\n    getDaffAuthFeatureStateSelector<T>(),\n    state => state.login\n  )\n\n  const selectAuthLoginLoading = createSelector(\n    selectAuthLoginState,\n    state => state.loading\n  );\n\n  const selectAuthLoginErrors = createSelector(\n    selectAuthLoginState,\n    state => state.errors\n  );\n\n  const selectAuthLoginToken = createSelector(\n    selectAuthLoginState,\n    state => state.auth\n  );\n\n  const selectAuthLoginTokenValue = createSelector(\n    selectAuthLoginToken,\n    state => state ? state.token : null\n  );\n\n  return {\n    selectAuthLoginState,\n    selectAuthLoginLoading,\n    selectAuthLoginErrors,\n    selectAuthLoginToken,\n    selectAuthLoginTokenValue\n  }\n};\n\nexport const getDaffAuthLoginSelectors = (() => {\n  let cache;\n  return <T extends DaffAuthToken>(): DaffAuthLoginSelectors<T> =>\n    cache = cache || createLoginSelectors<T>()\n})();\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { getDaffAuthFeatureStateSelector } from '../auth-feature.selector';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport {\n  DaffAuthRegisterReducerState,\n} from '../../reducers/public_api';\n\nexport interface DaffAuthRegisterSelectors {\n  selectAuthRegisterState: MemoizedSelector<object, DaffAuthRegisterReducerState>;\n  selectAuthRegisterLoading: MemoizedSelector<object, boolean>;\n  selectAuthRegisterErrors: MemoizedSelector<object, string[]>;\n}\n\nconst createRegisterSelectors = <T extends DaffAuthToken>() => {\n  const selectAuthRegisterState = createSelector(\n    getDaffAuthFeatureStateSelector<T>(),\n    state => state.register\n  )\n\n  const selectAuthRegisterLoading = createSelector(\n    selectAuthRegisterState,\n    state => state.loading\n  );\n\n  const selectAuthRegisterErrors = createSelector(\n    selectAuthRegisterState,\n    state => state.errors\n  );\n\n  return {\n    selectAuthRegisterState,\n    selectAuthRegisterLoading,\n    selectAuthRegisterErrors,\n  }\n};\n\nexport const getDaffAuthRegisterSelectors = (() => {\n  let cache;\n  return <T extends DaffAuthToken>(): DaffAuthRegisterSelectors =>\n    cache = cache || createRegisterSelectors<T>()\n})();\n","import { MemoizedSelector } from '@ngrx/store';\n\nimport { getAuthSelectors, AuthSelectors } from './auth/auth.selector';\nimport { getDaffAuthLoginSelectors, DaffAuthLoginSelectors } from './login/login.selector';\nimport { getDaffAuthRegisterSelectors, DaffAuthRegisterSelectors } from './register/register.selector';\nimport { DaffAuthToken } from '../models/auth-token';\nimport { DaffAuthFeatureState } from '../reducers/public_api';\nimport { getDaffAuthFeatureStateSelector } from './auth-feature.selector';\n\nexport interface DaffAuthSelectors<T extends DaffAuthToken> extends\n  DaffAuthRegisterSelectors,\n  DaffAuthLoginSelectors<T>,\n  AuthSelectors {\n  selectAuthFeatureState: MemoizedSelector<object, DaffAuthFeatureState<T>>;\n}\n\nexport const getDaffAuthSelectors = (() => {\n  let cache;\n  return <T extends DaffAuthToken>(): DaffAuthSelectors<T> =>\n    cache = cache || {\n      ...getAuthSelectors<T>(),\n      ...getDaffAuthLoginSelectors<T>(),\n      ...getDaffAuthRegisterSelectors<T>(),\n      selectAuthFeatureState: getDaffAuthFeatureStateSelector<T>()\n    }\n})();\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Action, Store, select } from '@ngrx/store';\n\nimport { DaffAuthFeatureState } from '../reducers/public_api';\nimport {\n  getDaffAuthSelectors\n} from '../selectors/public_api';\nimport { DaffAuthToken } from '../models/auth-token';\nimport { DaffAuthFacadeInterface } from '../interfaces/auth-facade.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAuthFacade<T extends DaffAuthToken = DaffAuthToken> implements DaffAuthFacadeInterface<T> {\n  auth$: Observable<T>;\n  token$: Observable<T['token']>\n\n  authLoading$: Observable<boolean>;\n  authErrors$: Observable<string[]>;\n\n  loginLoading$: Observable<boolean>;\n  loginErrors$: Observable<string[]>;\n\n  registerLoading$: Observable<boolean>;\n  registerErrors$: Observable<string[]>;\n\n  constructor(private store: Store<DaffAuthFeatureState<T>>) {\n    const {\n      selectAuthLoginToken,\n      selectAuthLoading,\n      selectAuthErrors,\n      selectAuthLoginLoading,\n      selectAuthLoginErrors,\n      selectAuthRegisterLoading,\n      selectAuthRegisterErrors,\n      selectAuthLoginTokenValue\n    } = getDaffAuthSelectors<T>();\n\n    this.auth$ = this.store.pipe(select(selectAuthLoginToken));\n    this.token$ = this.store.pipe(select(selectAuthLoginTokenValue));\n\n    this.authLoading$ = this.store.pipe(select(selectAuthLoading));\n    this.authErrors$ = this.store.pipe(select(selectAuthErrors));\n\n    this.loginLoading$ = this.store.pipe(select(selectAuthLoginLoading));\n    this.loginErrors$ = this.store.pipe(select(selectAuthLoginErrors));\n\n    this.registerLoading$ = this.store.pipe(select(selectAuthRegisterLoading));\n    this.registerErrors$ = this.store.pipe(select(selectAuthRegisterErrors));\n  }\n\n  dispatch(action: Action) {\n    this.store.dispatch(action);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DaffAccountRegistration } from '../../models/account-registration';\nimport { DaffLoginInfo } from '../../models/login-info';\n\nexport interface DaffRegisterServiceInterface<\n  TRequest extends DaffAccountRegistration,\n  TResponse extends DaffLoginInfo\n> {\n\n  /**\n   * Registers an account for the specified customer.\n   *\n   * @param registration The account registration info.\n   * @returns Login info.\n   */\n  register(registration: TRequest): Observable<TResponse>;\n}\n\nexport const DaffRegisterDriver = new InjectionToken('DaffRegisterDriver');\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAuthToken } from '../../models/auth-token';\n\nexport interface DaffLoginServiceInterface<\n  TRequest extends DaffLoginInfo,\n  TResponse extends DaffAuthToken\n> {\n  /**\n   * Logs the user in.\n   *\n   * @returns An access token.\n   */\n  login(loginInfo: TRequest): Observable<TResponse>;\n\n  /**\n   * Logs the user out by revoking their access token.\n   */\n  logout(): Observable<void>;\n}\n\nexport const DaffLoginDriver = new InjectionToken('DaffLoginDriver');\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface DaffAuthServiceInterface {\n  /**\n   * Checks the validity of an auth token.\n   */\n  check(): Observable<void>;\n}\n\nexport const DaffAuthDriver = new InjectionToken<DaffAuthServiceInterface>('DaffAuthDriver')\n","import { Injectable, Inject } from '@angular/core';\n\nimport { DaffPersistenceService, DaffPersistenceServiceToken } from '@daffodil/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAuthStorageService {\n  private readonly AUTH_STORAGE_TOKEN = 'DAFF_AUTH_TOKEN';\n\n  constructor(@Inject(DaffPersistenceServiceToken) private storageService: DaffPersistenceService) {}\n\n  getAuthToken(): string {\n    return this.storageService.getItem(this.AUTH_STORAGE_TOKEN);\n  }\n\n  setAuthToken(value: string): void {\n    this.storageService.setItem(this.AUTH_STORAGE_TOKEN, value);\n  }\n\n  removeAuthToken(): void {\n    this.storageService.removeItem(this.AUTH_STORAGE_TOKEN);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { switchMap, map, catchError, mapTo, tap, switchMapTo } from 'rxjs/operators';\nimport { of, Observable, EMPTY } from 'rxjs';\n\nimport {\n  DaffAuthActionTypes,\n  DaffAuthLogin,\n  DaffAuthLoginSuccess,\n  DaffAuthLoginFailure,\n  DaffAuthRegister,\n  DaffAuthRegisterSuccess,\n  DaffAuthRegisterFailure,\n  DaffAuthCheckSuccess,\n  DaffAuthCheckFailure,\n  DaffAuthCheck,\n  DaffAuthLogoutSuccess,\n  DaffAuthLogoutFailure,\n  DaffAuthLogout,\n  DaffAuthGuardCheckCompletion,\n  DaffAuthGuardCheck,\n  DaffAuthStorageFailure\n} from '../actions/auth.actions';\nimport { DaffRegisterDriver, DaffRegisterServiceInterface } from '../drivers/interfaces/register-service.interface';\nimport { DaffLoginDriver, DaffLoginServiceInterface } from '../drivers/interfaces/login-service.interface';\nimport { DaffAuthToken } from '../models/auth-token';\nimport { DaffAccountRegistration } from '../models/account-registration';\nimport { DaffLoginInfo } from '../models/login-info';\nimport { DaffAuthDriver, DaffAuthServiceInterface } from '../drivers/interfaces/auth-service.interface';\nimport { DaffAuthStorageService } from '../storage/auth-storage.service';\n\n@Injectable()\nexport class DaffAuthEffects<\n  T extends DaffLoginInfo,\n  U extends DaffAuthToken,\n  S extends DaffAccountRegistration,\n> {\n  constructor(\n    private actions$: Actions,\n    @Inject(DaffRegisterDriver) private registerDriver: DaffRegisterServiceInterface<S, T>,\n    @Inject(DaffLoginDriver) private loginDriver: DaffLoginServiceInterface<T, U>,\n    @Inject(DaffAuthDriver) private authDriver: DaffAuthServiceInterface,\n    private storage: DaffAuthStorageService\n  ) {}\n\n  @Effect()\n  check$ : Observable<DaffAuthCheckSuccess | DaffAuthCheckFailure> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthCheckAction),\n    switchMap((action: DaffAuthCheck) =>\n      this.checkToken().pipe(\n        mapTo(new DaffAuthCheckSuccess()),\n        catchError(error =>\n          of(new DaffAuthCheckFailure('Auth token is not valid'))\n        )\n      )\n    )\n  )\n\n  @Effect()\n  login$ : Observable<DaffAuthLoginSuccess<U> | DaffAuthLoginFailure> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthLoginAction),\n    switchMap((action: DaffAuthLogin<T>) =>\n      this.loginDriver.login(action.loginInfo).pipe(\n        map((resp) =>\n          new DaffAuthLoginSuccess<U>(resp)\n        ),\n        catchError(error =>\n          of(new DaffAuthLoginFailure('Failed to log in'))\n        )\n      )\n    )\n  )\n\n  @Effect({\n    dispatch: false\n  })\n  storeAuthToken$ = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthLoginSuccessAction),\n    tap((action: DaffAuthLoginSuccess<U>) => {\n      this.storage.setAuthToken(action.auth.token)\n    }),\n    switchMapTo(EMPTY),\n    catchError(error => of(new DaffAuthStorageFailure('Storage of auth token has failed.')))\n  )\n\n  @Effect()\n  logout$ : Observable<DaffAuthLogoutSuccess | DaffAuthLogoutFailure> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthLogoutAction),\n    switchMap((action: DaffAuthLogout) =>\n      this.loginDriver.logout().pipe(\n        mapTo(new DaffAuthLogoutSuccess()),\n        catchError(error =>\n          of(new DaffAuthLogoutFailure('Failed to log out'))\n        )\n      )\n    )\n  )\n\n  @Effect()\n  loginAfterRegister$: Observable<DaffAuthLogin<T>> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthRegisterSuccessAction),\n    map((action: DaffAuthRegisterSuccess<T>) => new DaffAuthLogin(action.loginInfo))\n  )\n\n  @Effect()\n  register$ : Observable<any> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthRegisterAction),\n    switchMap((action: DaffAuthRegister<S>) =>\n      this.registerDriver.register(action.registration).pipe(\n        map((resp) =>\n          new DaffAuthRegisterSuccess<T>(resp)\n        ),\n        catchError(error =>\n          of(new DaffAuthRegisterFailure('Failed to register a new user'))\n        )\n      )\n    )\n  )\n\n  @Effect()\n  guardCheck$: Observable<DaffAuthGuardCheckCompletion> = this.actions$.pipe(\n    ofType(DaffAuthActionTypes.AuthGuardCheckAction),\n    switchMap((action: DaffAuthGuardCheck) =>\n      this.checkToken().pipe(\n        mapTo(new DaffAuthGuardCheckCompletion(true)),\n        catchError(error =>\n          of(new DaffAuthGuardCheckCompletion(false))\n        )\n      )\n    )\n  )\n\n  private checkToken() {\n    return this.authDriver.check()\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DaffAuthEffects } from './effects/auth.effects';\nimport { DAFF_AUTH_STORE_FEATURE_KEY, daffAuthReducers } from './reducers/public_api';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(DAFF_AUTH_STORE_FEATURE_KEY, daffAuthReducers),\n    EffectsModule.forFeature([DaffAuthEffects]),\n  ]\n})\nexport class DaffAuthStateModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffAuthStateModule } from './auth-state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    DaffAuthStateModule\n  ],\n})\nexport class DaffAuthModule { }\n","import { Injectable } from '@angular/core';\n\nimport { DaffLoginInfo } from '../../../models/login-info'\nimport { DaffAccountRegistration } from '../../../models/account-registration'\n\n/**\n * Transforms magento auths into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoLoginInfoTransformerService {\n  transform(registration: DaffAccountRegistration): DaffLoginInfo {\n    return {\n      email: registration.customer.email,\n      password: registration.password\n    }\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const checkTokenQuery = gql`\n  query CheckToken {\n    customer {\n      id\n    }\n  }\n`\n","import gql from 'graphql-tag';\n\nexport const createCustomerMutation = gql`\n  mutation CreateCustomer(\n    $email: String!,\n    $password: String!,\n    $firstname: String!,\n    $lastname: String!,\n  ) {\n    createCustomer(input: {\n      firstname: $firstname,\n      lastname: $lastname,\n      email: $email,\n      password: $password\n    })\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const generateTokenMutation = gql`\n  mutation GenerateToken($email: String!, $password: String!) {\n    generateCustomerToken(\n      email: $email,\n      password: $password\n    ) {\n      token\n    }\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const revokeCustomerTokenMutation = gql`\n  mutation revokeCustomerToken {\n    revokeCustomerToken {\n      result\n    }\n  }\n`;\n","export enum MagentoAuthGraphQlErrorCode {\n  UNAUTHORIZED = 'graphql-authorization',\n  AUTHENTICATION_FAILED = 'graphql-authentication',\n  BAD_INPUT = 'graphql-input'\n}\n","import { DaffError, DaffInheritableError } from '@daffodil/core';\n\nexport class DaffUnauthorizedError extends DaffInheritableError implements DaffError {\n\tpublic readonly code: string = 'DAFF_AUTH_UNAUTHORIZED';\n\n\tconstructor(public message: string) {\n\t\tsuper(message);\n\t}\n}\n","import { DaffError, DaffInheritableError } from '@daffodil/core';\n\nexport class DaffAuthenticationFailedError extends DaffInheritableError implements DaffError {\n\tpublic readonly code: string = 'DAFF_AUTH_AUTHENTICATION_FAILED';\n\n\tconstructor(public message: string) {\n\t\tsuper(message);\n\t}\n}\n","import { DaffError, DaffInheritableError } from '@daffodil/core';\n\nexport class DaffAuthInvalidAPIResponseError extends DaffInheritableError implements DaffError {\n  public readonly code: string = 'DAFF_AUTH_INVALID_API_RESPONSE';\n\n\tconstructor(public message: string) {\n\t\tsuper(message);\n\t}\n}\n","import { DaffErrorCodeMap } from '@daffodil/core';\nimport { DaffBadInputError } from '@daffodil/driver';\n\nimport { MagentoAuthGraphQlErrorCode } from './codes';\nimport {\n  DaffUnauthorizedError,\n  DaffAuthenticationFailedError,\n} from '../../../errors/public_api';\n\nexport const DaffAuthMagentoErrorMap: DaffErrorCodeMap = {\n\t[MagentoAuthGraphQlErrorCode.UNAUTHORIZED]: DaffUnauthorizedError,\n\t[MagentoAuthGraphQlErrorCode.AUTHENTICATION_FAILED]: DaffAuthenticationFailedError,\n\t[MagentoAuthGraphQlErrorCode.BAD_INPUT]: DaffBadInputError,\n};\n","import { daffTransformMagentoError } from '@daffodil/driver/magento';\n\nimport { DaffAuthMagentoErrorMap } from './map';\n\nexport const transformMagentoAuthError = (error: any): Error => {\n\treturn daffTransformMagentoError(error, DaffAuthMagentoErrorMap)\n};\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { mapTo, catchError } from 'rxjs/operators';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffRegisterServiceInterface } from '../interfaces/register-service.interface';\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAccountRegistration } from '../../models/account-registration';\nimport { DaffMagentoLoginInfoTransformerService } from './transforms/login-info-transformer.service';\nimport { createCustomerMutation } from './queries/public_api';\nimport { transformMagentoAuthError } from './errors/transform';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoRegisterService implements DaffRegisterServiceInterface<DaffAccountRegistration, DaffLoginInfo> {\n  constructor(\n    private apollo: Apollo,\n    private loginInfoTransformer: DaffMagentoLoginInfoTransformerService\n  ) {}\n\n  register(registration: DaffAccountRegistration): Observable<DaffLoginInfo> {\n    return this.apollo.mutate({\n      mutation: createCustomerMutation,\n      variables: {\n        email: registration.customer.email,\n        password: registration.password,\n        firstname: registration.customer.firstName,\n        lastname: registration.customer.lastName\n      }\n    }).pipe(\n      mapTo(this.loginInfoTransformer.transform(registration)),\n      catchError(err => throwError(transformMagentoAuthError(err)))\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DaffAuthToken } from '../../../models/auth-token'\nimport { MagentoAuth } from '../models/response/auth';\n\n/**\n * Transforms magento auths into an object usable by daffodil.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoAuthTransformerService {\n\n  /**\n   * Transforms the magento AuthNode from the magento auth query into a DaffAuthToken.\n   * @param auth the auth from a magento auth query.\n   */\n  transform(auth: MagentoAuth): DaffAuthToken {\n    return {\n      token: auth.token\n    }\n  }\n}\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { MagentoCheckTokenResponse } from '../queries/public_api';\nimport { DaffAuthInvalidAPIResponseError } from '../../../errors/public_api';\n\nexport const validateCheckTokenResponse = (response: ApolloQueryResult<MagentoCheckTokenResponse>) => {\n  if (response.data.customer.id) {\n    return response\n  } else {\n    throw new DaffAuthInvalidAPIResponseError('Check token response does not contain a valid customer ID.')\n  }\n}\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { MagentoGenerateTokenResponse } from '../queries/public_api';\nimport { DaffAuthInvalidAPIResponseError } from '../../../errors/public_api';\n\nexport const validateGenerateTokenResponse = (response: ApolloQueryResult<MagentoGenerateTokenResponse>) => {\n  if (response.data.generateCustomerToken.token) {\n    return response\n  } else {\n    throw new DaffAuthInvalidAPIResponseError('Generate token response does not contain an auth token.')\n  }\n}\n","import { ApolloQueryResult } from 'apollo-client';\n\nimport { MagentoRevokeCustomerTokenResponse } from '../queries/public_api';\nimport { DaffAuthInvalidAPIResponseError } from '../../../errors/public_api';\n\nexport const validateRevokeTokenResponse = (response: ApolloQueryResult<MagentoRevokeCustomerTokenResponse>) => {\n  if (response.data.revokeCustomerToken.result) {\n    return response\n  } else {\n    throw new DaffAuthInvalidAPIResponseError('Revoke token response does not contain a successful result.')\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError, mapTo } from 'rxjs/operators';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffLoginServiceInterface } from '../interfaces/login-service.interface';\nimport { DaffLoginInfo } from '../../models/login-info';\nimport { DaffAuthToken } from '../../models/auth-token';\nimport {\n  MagentoRevokeCustomerTokenResponse,\n  MagentoGenerateTokenResponse,\n  generateTokenMutation,\n  revokeCustomerTokenMutation\n} from './queries/public_api';\nimport { DaffMagentoAuthTransformerService } from './transforms/auth-transformer.service';\nimport { transformMagentoAuthError } from './errors/transform';\nimport { validateRevokeTokenResponse, validateGenerateTokenResponse } from './validators/public_api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoLoginService implements DaffLoginServiceInterface<DaffLoginInfo, DaffAuthToken> {\n  constructor(\n    private apollo: Apollo,\n    public authTransformer: DaffMagentoAuthTransformerService,\n  ) {}\n\n  login({email, password}: DaffLoginInfo): Observable<DaffAuthToken> {\n    return this.apollo.mutate<MagentoGenerateTokenResponse>({\n      mutation: generateTokenMutation,\n      variables: {\n        email,\n        password\n      }\n    }).pipe(\n      map(validateGenerateTokenResponse),\n      map(res => this.authTransformer.transform(res.data.generateCustomerToken)),\n      catchError(err => throwError(transformMagentoAuthError(err)))\n    )\n  }\n\n  logout() {\n    return this.apollo.mutate<MagentoRevokeCustomerTokenResponse>({mutation: revokeCustomerTokenMutation}).pipe(\n      map(validateRevokeTokenResponse),\n      mapTo(undefined),\n      catchError(err => throwError(transformMagentoAuthError(err)))\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError, mapTo } from 'rxjs/operators';\nimport { Apollo } from 'apollo-angular';\n\nimport { DaffAuthServiceInterface } from '../interfaces/auth-service.interface';\nimport {\n  checkTokenQuery,\n  MagentoCheckTokenResponse\n} from './queries/public_api';\nimport { validateCheckTokenResponse } from './validators/public_api';\nimport { transformMagentoAuthError } from './errors/transform';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffMagentoAuthService implements DaffAuthServiceInterface {\n  constructor(private apollo: Apollo) {}\n\n  check(): Observable<void> {\n    return this.apollo.query<MagentoCheckTokenResponse>({query: checkTokenQuery}).pipe(\n      map(validateCheckTokenResponse),\n      mapTo(undefined),\n      catchError(err => throwError(transformMagentoAuthError(err)))\n    )\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DaffRegisterDriver } from '../interfaces/register-service.interface';\nimport { DaffMagentoRegisterService } from './register.service';\n\nimport { DaffLoginDriver } from '../interfaces/login-service.interface';\nimport { DaffMagentoLoginService } from './login.service';\n\nimport { DaffAuthDriver } from '../interfaces/auth-service.interface';\nimport { DaffMagentoAuthService } from './auth.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ]\n})\nexport class DaffAuthMagentoDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffAuthMagentoDriverModule,\n      providers: [\n        {\n          provide: DaffRegisterDriver,\n          useExisting: DaffMagentoRegisterService\n        },\n        {\n          provide: DaffLoginDriver,\n          useExisting: DaffMagentoLoginService\n        },\n        {\n          provide: DaffAuthDriver,\n          useExisting: DaffMagentoAuthService\n        }\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Actions, ofType } from '@ngrx/effects';\n\nimport {\n  DaffAuthActionTypes,\n  DaffAuthGuardCheckCompletion,\n  DaffAuthGuardCheck\n} from '../actions/auth.actions';\nimport { DaffAuthFacade } from '../facades/auth.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MemberOnlyGuard implements CanActivate {\n  constructor(\n    private facade: DaffAuthFacade,\n    private actions$: Actions,\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    const ret = this.isAuthenticated();\n\n    this.facade.dispatch(new DaffAuthGuardCheck());\n\n    return ret\n  }\n\n  isAuthenticated(): Observable<boolean> {\n    return this.actions$.pipe(\n      ofType(DaffAuthActionTypes.AuthGuardCheckCompletionAction),\n      map((action: DaffAuthGuardCheckCompletion) => action.result)\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MemberOnlyGuard } from './member-only.guard';\nimport { DaffAuthFacade } from '../facades/auth.facade';\nimport { DaffAuthGuardCheck } from '../actions/auth.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GuestOnlyGuard implements CanActivate {\n  constructor(\n    private facade: DaffAuthFacade,\n    private memberOnlyGuard: MemberOnlyGuard\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    const ret = this.isUnauthenticated();\n\n    this.facade.dispatch(new DaffAuthGuardCheck());\n\n    return ret\n  }\n\n  isUnauthenticated(): Observable<boolean> {\n    return this.memberOnlyGuard.isAuthenticated().pipe(\n      map(authenticated => !authenticated)\n    )\n  }\n}\n"],"names":["tslib_1.__decorate","tslib_1.__extends"],"mappings":"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"}