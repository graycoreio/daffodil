{"version":3,"file":"daffodil-auth-testing.js","sources":["ng://@daffodil/auth/testing/factories/customer-registration.factory.ts","ng://@daffodil/auth/testing/factories/account-registration.factory.ts","ng://@daffodil/auth/testing/factories/auth-token.factory.ts","ng://@daffodil/auth/testing/inmemory-backend/auth.service.ts","ng://@daffodil/auth/testing/drivers/testing/login/login.service.ts","ng://@daffodil/auth/testing/drivers/testing/register/register.service.ts","ng://@daffodil/auth/testing/drivers/testing/auth/auth.service.ts","ng://@daffodil/auth/testing/drivers/testing/auth-driver.module.ts","ng://@daffodil/auth/testing/drivers/in-memory/login/login.service.ts","ng://@daffodil/auth/testing/drivers/in-memory/register/register.service.ts","ng://@daffodil/auth/testing/drivers/in-memory/auth/auth.service.ts","ng://@daffodil/auth/testing/drivers/in-memory/auth-driver.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { DaffCustomerRegistration } from '@daffodil/auth';\nimport * as faker from 'faker/locale/en_US';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockCustomerRegistration implements DaffCustomerRegistration {\n  email = faker.internet.email();\n  firstName = faker.name.firstName();\n  lastName = faker.name.lastName();\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffCustomerRegistrationFactory extends DaffModelFactory<DaffCustomerRegistration> {\n  constructor() {\n    super(MockCustomerRegistration);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffAccountRegistration, DaffCustomerRegistration } from '@daffodil/auth';\nimport { DaffModelFactory } from '@daffodil/core/testing';\nimport { DaffCustomerRegistrationFactory } from './customer-registration.factory';\n\nexport class MockAccountRegistration implements DaffAccountRegistration {\n  customer = this.fakeCustomer();\n  password = faker.random.alphaNumeric(16);\n\n  private fakeCustomer(): DaffCustomerRegistration {\n    const factory = new DaffCustomerRegistrationFactory();\n\n    return factory.create()\n  }\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAccountRegistrationFactory extends DaffModelFactory<DaffAccountRegistration> {\n  constructor() {\n    super(MockAccountRegistration);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as faker from 'faker/locale/en_US';\n\nimport { DaffAuthToken } from '@daffodil/auth';\nimport { DaffModelFactory } from '@daffodil/core/testing';\n\nexport class MockAuthToken implements DaffAuthToken {\n  token = faker.random.alphaNumeric(16);\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffAuthTokenFactory extends DaffModelFactory<DaffAuthToken> {\n  constructor() {\n    super(MockAuthToken);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  InMemoryDbService,\n  STATUS\n} from 'angular-in-memory-web-api';\nimport * as faker from 'faker/locale/en_US';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryBackendAuthService implements InMemoryDbService {\n  constructor() {}\n\n  private generateToken(): string {\n    return faker.random.alphaNumeric(16);\n  }\n\n  private generateId(): string {\n    return faker.random.uuid();\n  }\n\n  createDb() {\n    return {\n      auth: {}\n    };\n  }\n\n  post(reqInfo) {\n    if (reqInfo.id === 'login') {\n      return this.login(reqInfo);\n    } else if (reqInfo.id === 'register') {\n      return this.register(reqInfo);\n    } else if (reqInfo.id === 'logout') {\n      return this.logout(reqInfo);\n    } else if (reqInfo.id === 'check') {\n      return this.check(reqInfo);\n    }\n  }\n\n  private login(reqInfo: any) {\n    return reqInfo.utils.createResponse$(() => ({\n      body: {\n        token: this.generateToken()\n      },\n      status: STATUS.OK\n    }));\n  }\n\n  private register(reqInfo) {\n    const {\n      customer,\n      password\n    } = reqInfo.utils.getJsonBody(reqInfo.req);\n\n    return reqInfo.utils.createResponse$(() => ({\n      body: {\n        email: customer.email,\n        password\n      },\n      status: STATUS.CREATED\n    }))\n  }\n\n  private logout(reqInfo) {\n    return reqInfo.utils.createResponse$(() => ({\n      body: {success: true},\n      status: STATUS.OK\n    }))\n  }\n\n  private check(reqInfo) {\n    return reqInfo.utils.createResponse$(() => ({\n      body: {},\n      status: STATUS.OK\n    }))\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport {\n  DaffLoginServiceInterface,\n  DaffLoginInfo,\n  DaffAuthToken\n} from '@daffodil/auth';\n\nimport { DaffAuthTokenFactory } from '../../../factories/auth-token.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingLoginService implements DaffLoginServiceInterface<DaffLoginInfo, DaffAuthToken> {\n  constructor (private factory: DaffAuthTokenFactory) {}\n\n  login(loginInfo: DaffLoginInfo): Observable<DaffAuthToken> {\n    return of(this.factory.create());\n  }\n\n  logout(): Observable<void> {\n    return of(undefined);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport {\n  DaffAccountRegistration,\n  DaffLoginInfo,\n  DaffRegisterServiceInterface,\n} from '@daffodil/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingRegisterService implements DaffRegisterServiceInterface<\n  DaffAccountRegistration,\n  DaffLoginInfo\n> {\n  register(registration: DaffAccountRegistration): Observable<DaffLoginInfo> {\n    return of({\n      email: registration.customer.email,\n      password: registration.password\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport {\n  DaffAuthServiceInterface,\n} from '@daffodil/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffTestingAuthService implements DaffAuthServiceInterface {\n  check(): Observable<void> {\n    return of(undefined);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffLoginDriver,\n  DaffRegisterDriver,\n  DaffAuthDriver,\n} from '@daffodil/auth';\n\nimport { DaffTestingLoginService } from './login/login.service';\nimport { DaffTestingRegisterService } from './register/register.service';\nimport { DaffTestingAuthService } from './auth/auth.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffAuthTestingDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffAuthTestingDriverModule,\n      providers: [\n        {\n          provide: DaffLoginDriver,\n          useExisting: DaffTestingLoginService\n        },\n        {\n          provide: DaffRegisterDriver,\n          useExisting: DaffTestingRegisterService\n        },\n        {\n          provide: DaffAuthDriver,\n          useExisting: DaffTestingAuthService\n        }\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\n\nimport {\n  DaffLoginServiceInterface,\n  DaffLoginInfo,\n  DaffAuthToken,\n} from '@daffodil/auth';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryLoginService implements DaffLoginServiceInterface<DaffLoginInfo, DaffAuthToken> {\n  url = '/api/auth/';\n\n  constructor(private http: HttpClient) {}\n\n  login(request: DaffLoginInfo): Observable<DaffAuthToken> {\n    return this.http.post<DaffAuthToken>(`${this.url}login`, request);\n  }\n\n  logout(): Observable<void> {\n    return this.http.post<{success: boolean}>(`${this.url}logout`, {}).pipe(\n      switchMap(({success}) => success ? of(undefined) : throwError(new Error('Logout failed')))\n    );\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\nimport {\n  DaffRegisterServiceInterface,\n  DaffCustomerRegistration,\n  DaffAccountRegistration,\n  DaffLoginInfo\n} from '@daffodil/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryRegisterService implements DaffRegisterServiceInterface<\n  DaffAccountRegistration,\n  DaffLoginInfo\n> {\n  url = '/api/auth/';\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  register(registration: DaffAccountRegistration): Observable<DaffLoginInfo> {\n    return this.http.post<DaffCustomerRegistration>(`${this.url}register`, registration).pipe(\n      mapTo({\n        email: registration.customer.email,\n        password: registration.password\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\nimport {\n  DaffAuthServiceInterface,\n} from '@daffodil/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaffInMemoryAuthService implements DaffAuthServiceInterface {\n  url = '/api/auth/';\n\n  constructor(private http: HttpClient) {}\n\n  check(): Observable<void> {\n    return this.http.post(`${this.url}check`, {}).pipe(\n      mapTo(undefined)\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  DaffLoginDriver,\n  DaffRegisterDriver,\n  DaffAuthDriver,\n} from '@daffodil/auth';\n\nimport { DaffInMemoryLoginService } from './login/login.service';\nimport { DaffInMemoryRegisterService } from './register/register.service';\nimport { DaffInMemoryAuthService } from './auth/auth.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ]\n})\nexport class DaffAuthInMemoryDriverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DaffAuthInMemoryDriverModule,\n      providers: [\n        {\n          provide: DaffLoginDriver,\n          useExisting: DaffInMemoryLoginService\n        },\n        {\n          provide: DaffRegisterDriver,\n          useExisting: DaffInMemoryRegisterService\n        },\n        {\n          provide: DaffAuthDriver,\n          useExisting: DaffInMemoryAuthService\n        }\n      ]\n    };\n  }\n}\n"],"names":["faker.internet","faker.name","tslib_1.__extends","faker.random"],"mappings":"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"}