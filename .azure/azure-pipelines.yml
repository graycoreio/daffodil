# specific branch build with batching
trigger:
  branches:
    include:
      - master
      - develop
pr:
  autoCancel: true
  branches:
    include:
      - master
      - develop

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
  - stage: Daffodil_CI
    displayName: Daffodil CI
    jobs:
      - job: Lint
        displayName: Lint
        pool:
          vmImage: 'Ubuntu 16.04'
        strategy:
          matrix:
            node_12_x:
              node_version: 12.x
        steps:
          - template: ./templates/setup-node.yml

          # This cache step is purely for the purpose of diffing the specified files
          # These files are those that would incur a repository-wide linting change
          # Therefore every package must be relinted
          - task: Cache@2
            displayName: Cache .vscode For Lint Diff
            inputs:
              key: '"lint" | "$(node_version)" | angular.json | lerna.json | package.json | package-lock.json | .prettierrc | .stylelintrc | tslint.json'
              path: $(Build.SourcesDirectory)/.vscode
              cacheHitVar: ngLintCache

          - template: ./templates/lerna-lint.yml
            parameters:
              incremental: |
                and(
                  eq(variables['ngLintCache'], 'true'),
                  eq(variables['Build.Reason'], 'PullRequest')
                )


      - job: Build_And_Test
        displayName: Build And Test
        variables:
          # These are the files that, when changed, will incur a full build
          buildRootFiles: angular.json | lerna.json | package.json | package-lock.json | tsconfig.json
        pool:
          vmImage: 'Ubuntu 16.04'
        strategy:
          matrix:
            node_12_x:
              node_version: 12.x
        steps:
          - template: ./templates/setup-node.yml
          - template: ./templates/codeclimate.yml

          - template: ./templates/get-branch-sha.yml
            parameters:
              stepName: GetBuildCacheCommitSHA
              # for PR builds, we want to use the cache from the target commit
              ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
                branch: origin/$(System.PullRequest.TargetBranch)
              # for non PR builds, we want to create the cache for the current commit
              ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
                branch: origin/$(Build.SourceBranchName)

          # This cache step will only hit if the specified files have not changed
          # If a cache miss occurs, we know that a full build must happen
          - task: Cache@2
            displayName: Cache Built Packages
            inputs:
              key: '"dist" | "$(node_version)" | $(buildRootFiles) | "$(GetBuildCacheCommitSHA.BranchSHA)"'
              path: $(Build.SourcesDirectory)/dist
              cacheHitVar: ngBuildCache

          - task: Cache@2
            displayName: Cache Coverage Reports
            inputs:
              key: '"coverage" | "$(node_version)" | $(buildRootFiles) | "$(GetBuildCacheCommitSHA.BranchSHA)"'
              path: $(Build.SourcesDirectory)/coverage
              cacheHitVar: coverageCache

          - template: ./templates/lerna-build-test.yml
            parameters:
              incremental: |
                and(
                  eq(variables['ngBuildCache'], 'true'),
                  eq(variables['Build.Reason'], 'PullRequest')
                )

          - script: |
              ./cc-test-reporter sum-coverage coverage/cc.*.json
              ./cc-test-reporter -r $token upload-coverage
            displayName: Report Code Climate
            env:
              token: $(CODECLIMATE_TOKEN_DAFFODIL)

          - task: CopyFiles@2
            displayName: Prepare Artifact Staging Directory
            inputs:
              sourceFolder: dist
              contents: '**/*'
              targetFolder: $(Build.ArtifactStagingDirectory)

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Daff.io Serverless Artifact'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/apps/daffio'
              artifactName: 'daffio-serverless'
              parallel: true
              parallelCount: 8
  - stage: preview
    displayName: Preview Environment
    jobs:
      - deployment: deploy_daffio_preview
        displayName: Deploy Daff.io
        condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/pull'))
        environment: 'daffio-pr-preview'
        variables:
          - group: daffio-now
          - group: daffio-preview-now
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ./templates/now-deployment.yml
                  parameters:
                    artifactName: daffio-serverless
                    token: $(NOW_DEPLOYMENT_TOKEN)
                    nowOrg: $(NOW_ORG)
                    nowProjectId: $(DAFFIO_PREVIEW_NOW_PROJECTID)
  - stage: next
    displayName: Daff.io Next Environment
    jobs:
      - deployment: deploy_next
        displayName: Deploy
        condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/heads/develop'))
        environment: 'daffio-next'
        variables:
          - group: daffio-now
          - group: daffio-next-now
        strategy:
          runOnce:
            deploy:
              steps:
              - template: ./templates/now-deployment.yml
                parameters:
                  artifactName: daffio-serverless
                  token: $(NOW_DEPLOYMENT_TOKEN)
                  nowOrg: $(NOW_ORG)
                  nowProjectId: $(DAFFIO_NEXT_NOW_PROJECTID)
                  prod: true
