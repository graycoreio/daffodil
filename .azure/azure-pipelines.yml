# specific branch build with batching
trigger:
  branches:
    include:
    - master
    - develop
pr:
  autoCancel: true
  branches:
    include:
    - master
    - develop
variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
stages:
- stage: Daffodil_CI
  displayName: Daffodil CI
  jobs: 
    - job: Lint
      displayName: Lint
      pool:
        vmImage: "Ubuntu 16.04"
      strategy:
        matrix:
          node_10_x:
            node_version: 10.x
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: $(node_version)
          displayName: Set Node Version

        - task: CacheBeta@0
          inputs:
            key: $(Build.SourcesDirectory)/package-lock.json
            path: $(npm_config_cache)
          displayName: Cache npm

        - script: npx npm ci
          displayName: Install Dependencies

        - script: npx lerna run lint
          displayName: Lint

    - job: Build_And_Test
      displayName: Build And Test
      pool:
        vmImage: "Ubuntu 16.04"
      strategy:
        matrix:
          node_10_x:
            node_version: 10.x
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: $(node_version)
          displayName: Set Node Version

        - task: CacheBeta@0
          inputs:
            key: $(Build.SourcesDirectory)/package-lock.json
            path: $(npm_config_cache)
          displayName: Cache npm

        - script: npm ci
          displayName: Install Dependencies

        - script: npx lerna run build && npx lerna run test
          displayName: Build & Test

        - template: ./templates/codeclimate.yml

        - script: npx lerna run reportcoverage
          displayName: Generate Coverage Report

        - script: |
            ./cc-test-reporter sum-coverage coverage/cc.*.json
            ./cc-test-reporter -r $token upload-coverage
          displayName: Report Code Climate
          env:
            token: $(CODECLIMATE_TOKEN_DAFFODIL)

        - task: CopyFiles@2
          displayName: Prepare Artifact Staging Directory
          inputs:
            sourceFolder: dist
            contents: '**/*'
            targetFolder: $(Build.ArtifactStagingDirectory)

        - task: PublishBuildArtifacts@1
          displayName: "Publish Daff.io Serverless Artifact"
          inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)/apps/daffio'
            artifactName: 'daffio-serverless'
            parallel: true
            parallelCount: 8
- stage: Deploy release
  jobs: 
    - job: Deploy
      steps:
      - task: Npm@1
        displayName: 'Install Build Tools'
        inputs:
          command: custom
          verbose: false
          customCommand: 'install now'

      - bash: 'npx now --scope="graycoreio" --token=$(NOW_DEPLOYMENT_TOKEN)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/_daff-ci/daffio-serverless'
        displayName: 'Bash Script'


